// ignore_for_file: non_constant_identifier_names

final metadata_json = {
  "lookup": {
    "types": [
      {
        "id": 0,
        "type": {
          "path": ["sp_core", "crypto", "AccountId32"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 1, "typeName": "[u8; 32]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 1,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Array": {"len": 32, "type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 2,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "U8"},
          "docs": []
        }
      },
      {
        "id": 3,
        "type": {
          "path": ["frame_system", "AccountInfo"],
          "params": [
            {"name": "Index", "type": 4},
            {"name": "AccountData", "type": 5}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "nonce", "type": 4, "typeName": "Index", "docs": []},
                {
                  "name": "consumers",
                  "type": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "providers",
                  "type": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "sufficients",
                  "type": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 5,
                  "typeName": "AccountData",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 4,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "U32"},
          "docs": []
        }
      },
      {
        "id": 5,
        "type": {
          "path": ["pallet_balances", "AccountData"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "free", "type": 6, "typeName": "Balance", "docs": []},
                {
                  "name": "reserved",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "misc_frozen",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee_frozen",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 6,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "U128"},
          "docs": []
        }
      },
      {
        "id": 7,
        "type": {
          "path": ["frame_support", "weights", "PerDispatchClass"],
          "params": [
            {"name": "T", "type": 8}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "normal", "type": 8, "typeName": "T", "docs": []},
                {"name": "operational", "type": 8, "typeName": "T", "docs": []},
                {"name": "mandatory", "type": 8, "typeName": "T", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 8,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "U64"},
          "docs": []
        }
      },
      {
        "id": 9,
        "type": {
          "path": ["primitive_types", "H256"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 1, "typeName": "[u8; 32]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 10,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 11,
        "type": {
          "path": ["sp_runtime", "generic", "digest", "Digest"],
          "params": [
            {"name": "Hash", "type": 9}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "logs",
                  "type": 12,
                  "typeName": "Vec<DigestItem<Hash>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 12,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 13}
          },
          "docs": []
        }
      },
      {
        "id": 13,
        "type": {
          "path": ["sp_runtime", "generic", "digest", "DigestItem"],
          "params": [
            {"name": "Hash", "type": 9}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ChangesTrieRoot",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "Hash", "docs": []}
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PreRuntime",
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Consensus",
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Seal",
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ChangesTrieSignal",
                  "fields": [
                    {
                      "name": null,
                      "type": 15,
                      "typeName": "ChangesTrieSignal",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RuntimeEnvironmentUpdated",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 14,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Array": {"len": 4, "type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 15,
        "type": {
          "path": ["sp_runtime", "generic", "digest", "ChangesTrieSignal"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NewConfiguration",
                  "fields": [
                    {
                      "name": null,
                      "type": 16,
                      "typeName": "Option<ChangesTrieConfiguration>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 16,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 17}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 17, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 17,
        "type": {
          "path": ["sp_core", "changes_trie", "ChangesTrieConfiguration"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "digest_interval",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "digest_levels",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 18,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 19}
          },
          "docs": []
        }
      },
      {
        "id": 19,
        "type": {
          "path": ["frame_system", "EventRecord"],
          "params": [
            {"name": "E", "type": 20},
            {"name": "T", "type": 9}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "phase", "type": 170, "typeName": "Phase", "docs": []},
                {"name": "event", "type": 20, "typeName": "E", "docs": []},
                {
                  "name": "topics",
                  "type": 160,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 20,
        "type": {
          "path": ["acala_runtime", "Event"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "name": null,
                      "type": 21,
                      "typeName": "frame_system::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "name": null,
                      "type": 28,
                      "typeName": "pallet_scheduler::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "name": null,
                      "type": 33,
                      "typeName": "pallet_utility::Event",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "name": null,
                      "type": 34,
                      "typeName": "pallet_multisig::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "name": null,
                      "type": 36,
                      "typeName": "pallet_proxy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TransactionPause",
                  "fields": [
                    {
                      "name": null,
                      "type": 39,
                      "typeName": "module_transaction_pause::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "IdleScheduler",
                  "fields": [
                    {
                      "name": null,
                      "type": 40,
                      "typeName": "module_idle_scheduler::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "name": null,
                      "type": 41,
                      "typeName": "pallet_balances::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Tokens",
                  "fields": [
                    {
                      "name": null,
                      "type": 43,
                      "typeName": "orml_tokens::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Currencies",
                  "fields": [
                    {
                      "name": null,
                      "type": 49,
                      "typeName": "module_currencies::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "name": null,
                      "type": 51,
                      "typeName": "orml_vesting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "name": null,
                      "type": 54,
                      "typeName": "pallet_treasury::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "name": null,
                      "type": 55,
                      "typeName": "pallet_bounties::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Tips",
                  "fields": [
                    {
                      "name": null,
                      "type": 56,
                      "typeName": "pallet_tips::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ParachainSystem",
                  "fields": [
                    {
                      "name": null,
                      "type": 57,
                      "typeName":
                          "cumulus_pallet_parachain_system::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "CollatorSelection",
                  "fields": [
                    {
                      "name": null,
                      "type": 58,
                      "typeName": "module_collator_selection::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "name": null,
                      "type": 60,
                      "typeName": "pallet_session::Event",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SessionManager",
                  "fields": [
                    {
                      "name": null,
                      "type": 61,
                      "typeName": "module_session_manager::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "XcmpQueue",
                  "fields": [
                    {
                      "name": null,
                      "type": 62,
                      "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "PolkadotXcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 65,
                      "typeName": "pallet_xcm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "CumulusXcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 102,
                      "typeName": "cumulus_pallet_xcm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "DmpQueue",
                  "fields": [
                    {
                      "name": null,
                      "type": 103,
                      "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "XTokens",
                  "fields": [
                    {
                      "name": null,
                      "type": 104,
                      "typeName": "orml_xtokens::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "UnknownTokens",
                  "fields": [
                    {
                      "name": null,
                      "type": 105,
                      "typeName": "orml_unknown_tokens::Event",
                      "docs": []
                    }
                  ],
                  "index": 55,
                  "docs": []
                },
                {
                  "name": "OrmlXcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 106,
                      "typeName": "orml_xcm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Authority",
                  "fields": [
                    {
                      "name": null,
                      "type": 107,
                      "typeName": "orml_authority::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "GeneralCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 120,
                      "typeName":
                          "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "GeneralCouncilMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 122,
                      "typeName":
                          "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "FinancialCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 123,
                      "typeName":
                          "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "FinancialCouncilMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 124,
                      "typeName":
                          "pallet_membership::Event<Runtime, pallet_membership::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "HomaCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 125,
                      "typeName":
                          "pallet_collective::Event<Runtime, pallet_collective::Instance3>",
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "HomaCouncilMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 126,
                      "typeName":
                          "pallet_membership::Event<Runtime, pallet_membership::Instance3>",
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "TechnicalCommittee",
                  "fields": [
                    {
                      "name": null,
                      "type": 127,
                      "typeName":
                          "pallet_collective::Event<Runtime, pallet_collective::Instance4>",
                      "docs": []
                    }
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "TechnicalCommitteeMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 128,
                      "typeName":
                          "pallet_membership::Event<Runtime, pallet_membership::Instance4>",
                      "docs": []
                    }
                  ],
                  "index": 68,
                  "docs": []
                },
                {
                  "name": "Democracy",
                  "fields": [
                    {
                      "name": null,
                      "type": 129,
                      "typeName": "pallet_democracy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 69,
                  "docs": []
                },
                {
                  "name": "AcalaOracle",
                  "fields": [
                    {
                      "name": null,
                      "type": 131,
                      "typeName":
                          "orml_oracle::Event<Runtime, orml_oracle::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "OperatorMembershipAcala",
                  "fields": [
                    {
                      "name": null,
                      "type": 135,
                      "typeName":
                          "pallet_membership::Event<Runtime, pallet_membership::Instance5>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Auction",
                  "fields": [
                    {
                      "name": null,
                      "type": 136,
                      "typeName": "orml_auction::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "Prices",
                  "fields": [
                    {
                      "name": null,
                      "type": 137,
                      "typeName": "module_prices::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "Dex",
                  "fields": [
                    {
                      "name": null,
                      "type": 138,
                      "typeName": "module_dex::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 91,
                  "docs": []
                },
                {
                  "name": "AuctionManager",
                  "fields": [
                    {
                      "name": null,
                      "type": 142,
                      "typeName": "module_auction_manager::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "Loans",
                  "fields": [
                    {
                      "name": null,
                      "type": 143,
                      "typeName": "module_loans::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "Honzon",
                  "fields": [
                    {
                      "name": null,
                      "type": 144,
                      "typeName": "module_honzon::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "CdpTreasury",
                  "fields": [
                    {
                      "name": null,
                      "type": 145,
                      "typeName": "module_cdp_treasury::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "CdpEngine",
                  "fields": [
                    {
                      "name": null,
                      "type": 146,
                      "typeName": "module_cdp_engine::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "EmergencyShutdown",
                  "fields": [
                    {
                      "name": null,
                      "type": 149,
                      "typeName": "module_emergency_shutdown::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "HomaLite",
                  "fields": [
                    {
                      "name": null,
                      "type": 152,
                      "typeName": "module_homa_lite::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 115,
                  "docs": []
                },
                {
                  "name": "Incentives",
                  "fields": [
                    {
                      "name": null,
                      "type": 154,
                      "typeName": "module_incentives::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                },
                {
                  "name": "NFT",
                  "fields": [
                    {
                      "name": null,
                      "type": 156,
                      "typeName": "module_nft::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 121,
                  "docs": []
                },
                {
                  "name": "EVM",
                  "fields": [
                    {
                      "name": null,
                      "type": 157,
                      "typeName": "module_evm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 130,
                  "docs": []
                },
                {
                  "name": "EvmAccounts",
                  "fields": [
                    {
                      "name": null,
                      "type": 168,
                      "typeName": "module_evm_accounts::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 132,
                  "docs": []
                },
                {
                  "name": "Sudo",
                  "fields": [
                    {
                      "name": null,
                      "type": 169,
                      "typeName": "pallet_sudo::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 21,
        "type": {
          "path": ["frame_system", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ExtrinsicSuccess",
                  "fields": [
                    {
                      "name": null,
                      "type": 22,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["An extrinsic completed successfully. \\[info\\]"]
                },
                {
                  "name": "ExtrinsicFailed",
                  "fields": [
                    {
                      "name": null,
                      "type": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 22,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["An extrinsic failed. \\[error, info\\]"]
                },
                {
                  "name": "CodeUpdated",
                  "fields": [],
                  "index": 2,
                  "docs": ["`:code` was updated."]
                },
                {
                  "name": "NewAccount",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A new \\[account\\] was created."]
                },
                {
                  "name": "KilledAccount",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["An \\[account\\] was reaped."]
                },
                {
                  "name": "Remarked",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 5,
                  "docs": [
                    "On on-chain remark happened. \\[origin, remark_hash\\]"
                  ]
                }
              ]
            }
          },
          "docs": ["Event for the System pallet."]
        }
      },
      {
        "id": 22,
        "type": {
          "path": ["frame_support", "weights", "DispatchInfo"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": "weight", "type": 8, "typeName": "Weight", "docs": []},
                {
                  "name": "class",
                  "type": 23,
                  "typeName": "DispatchClass",
                  "docs": []
                },
                {"name": "pays_fee", "type": 24, "typeName": "Pays", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 23,
        "type": {
          "path": ["frame_support", "weights", "DispatchClass"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Normal", "fields": [], "index": 0, "docs": []},
                {"name": "Operational", "fields": [], "index": 1, "docs": []},
                {"name": "Mandatory", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 24,
        "type": {
          "path": ["frame_support", "weights", "Pays"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Yes", "fields": [], "index": 0, "docs": []},
                {"name": "No", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 25,
        "type": {
          "path": ["sp_runtime", "DispatchError"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Other", "fields": [], "index": 0, "docs": []},
                {"name": "CannotLookup", "fields": [], "index": 1, "docs": []},
                {"name": "BadOrigin", "fields": [], "index": 2, "docs": []},
                {
                  "name": "Module",
                  "fields": [
                    {"name": "index", "type": 2, "typeName": "u8", "docs": []},
                    {"name": "error", "type": 2, "typeName": "u8", "docs": []}
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ConsumerRemaining",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {"name": "NoProviders", "fields": [], "index": 5, "docs": []},
                {
                  "name": "Token",
                  "fields": [
                    {
                      "name": null,
                      "type": 26,
                      "typeName": "TokenError",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Arithmetic",
                  "fields": [
                    {
                      "name": null,
                      "type": 27,
                      "typeName": "ArithmeticError",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 26,
        "type": {
          "path": ["sp_runtime", "TokenError"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "NoFunds", "fields": [], "index": 0, "docs": []},
                {"name": "WouldDie", "fields": [], "index": 1, "docs": []},
                {"name": "BelowMinimum", "fields": [], "index": 2, "docs": []},
                {"name": "CannotCreate", "fields": [], "index": 3, "docs": []},
                {"name": "UnknownAsset", "fields": [], "index": 4, "docs": []},
                {"name": "Frozen", "fields": [], "index": 5, "docs": []},
                {"name": "Unsupported", "fields": [], "index": 6, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 27,
        "type": {
          "path": ["sp_runtime", "ArithmeticError"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Underflow", "fields": [], "index": 0, "docs": []},
                {"name": "Overflow", "fields": [], "index": 1, "docs": []},
                {"name": "DivisionByZero", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 28,
        "type": {
          "path": ["pallet_scheduler", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Scheduled",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {"name": null, "type": 4, "typeName": "u32", "docs": []}
                  ],
                  "index": 0,
                  "docs": ["Scheduled some task. \\[when, index\\]"]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {"name": null, "type": 4, "typeName": "u32", "docs": []}
                  ],
                  "index": 1,
                  "docs": ["Canceled some task. \\[when, index\\]"]
                },
                {
                  "name": "Dispatched",
                  "fields": [
                    {
                      "name": null,
                      "type": 29,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 30,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Dispatched some task. \\[task, id, result\\]"]
                }
              ]
            }
          },
          "docs": ["Events type."]
        }
      },
      {
        "id": 29,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 4]
          },
          "docs": []
        }
      },
      {
        "id": 30,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 10}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 10, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 31,
        "type": {
          "path": ["Result"],
          "params": [
            {"name": "T", "type": 32},
            {"name": "E", "type": 25}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Ok",
                  "fields": [
                    {"name": null, "type": 32, "typeName": null, "docs": []}
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {"name": null, "type": 25, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 32,
        "type": {
          "path": [],
          "params": [],
          "def": {"Tuple": []},
          "docs": []
        }
      },
      {
        "id": 33,
        "type": {
          "path": ["pallet_utility", "pallet", "Event"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "BatchInterrupted",
                  "fields": [
                    {"name": null, "type": 4, "typeName": "u32", "docs": []},
                    {
                      "name": null,
                      "type": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                    "well as the error. \\[index, error\\]"
                  ]
                },
                {
                  "name": "BatchCompleted",
                  "fields": [],
                  "index": 1,
                  "docs": ["Batch of dispatches completed fully with no error."]
                },
                {
                  "name": "ItemCompleted",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "A single item within a Batch of dispatches has completed with no error."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 34,
        "type": {
          "path": ["pallet_multisig", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NewMultisig",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new multisig operation has begun. \\[approving, multisig, call_hash\\]"
                  ]
                },
                {
                  "name": "MultisigApproval",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 35,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A multisig operation has been approved by someone.",
                    "\\[approving, timepoint, multisig, call_hash\\]"
                  ]
                },
                {
                  "name": "MultisigExecuted",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 35,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"
                  ]
                },
                {
                  "name": "MultisigCancelled",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 35,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 35,
        "type": {
          "path": ["pallet_multisig", "Timepoint"],
          "params": [
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "height",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {"name": "index", "type": 4, "typeName": "u32", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 36,
        "type": {
          "path": ["pallet_proxy", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ProxyExecuted",
                  "fields": [
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A proxy was executed correctly, with the given \\[result\\]."
                  ]
                },
                {
                  "name": "AnonymousCreated",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 37,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {"name": null, "type": 38, "typeName": "u16", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "Anonymous account has been created by new proxy with given",
                    "disambiguation index and proxy type. \\[anonymous, who, proxy_type,",
                    "disambiguation_index\\]"
                  ]
                },
                {
                  "name": "Announced",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "An announcement was placed to make a call in the future. \\[real, proxy, call_hash\\]"
                  ]
                },
                {
                  "name": "ProxyAdded",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 37,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proxy was added. \\[delegator, delegatee, proxy_type, delay\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 37,
        "type": {
          "path": ["runtime_common", "ProxyType"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Any", "fields": [], "index": 0, "docs": []},
                {"name": "CancelProxy", "fields": [], "index": 1, "docs": []},
                {"name": "Governance", "fields": [], "index": 2, "docs": []},
                {"name": "Auction", "fields": [], "index": 3, "docs": []},
                {"name": "Swap", "fields": [], "index": 4, "docs": []},
                {"name": "Loan", "fields": [], "index": 5, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 38,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "U16"},
          "docs": []
        }
      },
      {
        "id": 39,
        "type": {
          "path": ["module_transaction_pause", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "TransactionPaused",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Paused transaction . \\[pallet_name_bytes, function_name_bytes\\]"
                  ]
                },
                {
                  "name": "TransactionUnpaused",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Unpaused transaction . \\[pallet_name_bytes, function_name_bytes\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 40,
        "type": {
          "path": ["module_idle_scheduler", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "TaskDispatched",
                  "fields": [
                    {"name": null, "type": 4, "typeName": "Nonce", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "A task has been dispatched on_idle.",
                    "\\[TaskId\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 41,
        "type": {
          "path": ["pallet_balances", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Endowed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account was created with some free balance. \\[account, free_balance\\]"
                  ]
                },
                {
                  "name": "DustLost",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                    "resulting in an outright loss. \\[account, balance\\]"
                  ]
                },
                {
                  "name": "Transfer",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Transfer succeeded. \\[from, to, value\\]"]
                },
                {
                  "name": "BalanceSet",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A balance was set by root. \\[who, free, reserved\\]"
                  ]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some balance was reserved (moved from free to reserved). \\[who, value\\]"
                  ]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
                  ]
                },
                {
                  "name": "ReserveRepatriated",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {"name": null, "type": 42, "typeName": "Status", "docs": []}
                  ],
                  "index": 6,
                  "docs": [
                    "Some balance was moved from the reserve of the first account to the second account.",
                    "Final argument indicates the destination balance type.",
                    "\\[from, to, balance, destination_status\\]"
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Some amount was deposited into the account (e.g. for transaction fees). \\[who,",
                    "deposit\\]"
                  ]
                },
                {
                  "name": "Withdraw",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Some amount was withdrawn from the account (e.g. for transaction fees). \\[who, value\\]"
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Some amount was removed from the account (e.g. for misbehavior). \\[who,",
                    "amount_slashed\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 42,
        "type": {
          "path": [
            "frame_support",
            "traits",
            "tokens",
            "misc",
            "BalanceStatus"
          ],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Free", "fields": [], "index": 0, "docs": []},
                {"name": "Reserved", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 43,
        "type": {
          "path": ["orml_tokens", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Endowed",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account was created with some free balance. \\[currency_id,",
                    "account, free_balance\\]"
                  ]
                },
                {
                  "name": "DustLost",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An account was removed whose balance was non-zero but below",
                    "ExistentialDeposit, resulting in an outright loss. \\[currency_id,",
                    "account, balance\\]"
                  ]
                },
                {
                  "name": "Transfer",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer succeeded. \\[currency_id, from, to, value\\]"
                  ]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Some balance was reserved (moved from free to reserved).",
                    "\\[currency_id, who, value\\]"
                  ]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some balance was unreserved (moved from reserved to free).",
                    "\\[currency_id, who, value\\]"
                  ]
                },
                {
                  "name": "BalanceSet",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A balance was set by root. \\[who, free, reserved\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 44,
        "type": {
          "path": ["acala_primitives", "currency", "CurrencyId"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Token",
                  "fields": [
                    {
                      "name": null,
                      "type": 45,
                      "typeName": "TokenSymbol",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "DexShare",
                  "fields": [
                    {
                      "name": null,
                      "type": 46,
                      "typeName": "DexShare",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 46,
                      "typeName": "DexShare",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Erc20",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "StableAssetPoolToken",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "nutsfinance_stable_asset::StableAssetPoolId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 45,
        "type": {
          "path": ["acala_primitives", "currency", "TokenSymbol"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "ACA", "fields": [], "index": 0, "docs": []},
                {"name": "AUSD", "fields": [], "index": 1, "docs": []},
                {"name": "DOT", "fields": [], "index": 2, "docs": []},
                {"name": "LDOT", "fields": [], "index": 3, "docs": []},
                {"name": "RENBTC", "fields": [], "index": 20, "docs": []},
                {"name": "CASH", "fields": [], "index": 21, "docs": []},
                {"name": "KAR", "fields": [], "index": 128, "docs": []},
                {"name": "KUSD", "fields": [], "index": 129, "docs": []},
                {"name": "KSM", "fields": [], "index": 130, "docs": []},
                {"name": "LKSM", "fields": [], "index": 131, "docs": []},
                {"name": "BNC", "fields": [], "index": 168, "docs": []},
                {"name": "VSKSM", "fields": [], "index": 169, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 46,
        "type": {
          "path": ["acala_primitives", "currency", "DexShare"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Token",
                  "fields": [
                    {
                      "name": null,
                      "type": 45,
                      "typeName": "TokenSymbol",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Erc20",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 47,
        "type": {
          "path": ["primitive_types", "H160"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 48, "typeName": "[u8; 20]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 48,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Array": {"len": 20, "type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 49,
        "type": {
          "path": ["module_currencies", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Transferred",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Currency transfer success. \\[currency_id, from, to, amount\\]"
                  ]
                },
                {
                  "name": "BalanceUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 50,
                      "typeName": "AmountOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Update balance success. \\[currency_id, who, amount\\]"
                  ]
                },
                {
                  "name": "Deposited",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Deposit success. \\[currency_id, who, amount\\]"]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["Withdraw success. \\[currency_id, who, amount\\]"]
                },
                {
                  "name": "DustSwept",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["Dust swept. \\[currency_id, who, amount\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 50,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "I128"},
          "docs": []
        }
      },
      {
        "id": 51,
        "type": {
          "path": ["orml_vesting", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "VestingScheduleAdded",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 52,
                      "typeName": "VestingScheduleOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Added new vesting schedule. \\[from, to, vesting_schedule\\]"
                  ]
                },
                {
                  "name": "Claimed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Claimed vesting. \\[who, locked_amount\\]"]
                },
                {
                  "name": "VestingSchedulesUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Updated vesting schedules. \\[who\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 52,
        "type": {
          "path": ["orml_vesting", "VestingSchedule"],
          "params": [
            {"name": "BlockNumber", "type": 4},
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "start",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "period",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "period_count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "per_period",
                  "type": 53,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 53,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Compact": {"type": 6}
          },
          "docs": []
        }
      },
      {
        "id": 54,
        "type": {
          "path": ["pallet_treasury", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["New proposal. \\[proposal_index\\]"]
                },
                {
                  "name": "Spending",
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
                  ]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
                  ]
                },
                {
                  "name": "Burnt",
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["Some of our funds have been burnt. \\[burn\\]"]
                },
                {
                  "name": "Rollover",
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Spending has finished; this is the amount that rolls over until next spend.",
                    "\\[budget_remaining\\]"
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["Some funds have been deposited. \\[deposit\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 55,
        "type": {
          "path": ["pallet_bounties", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "BountyProposed",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["New bounty proposal. \\[index\\]"]
                },
                {
                  "name": "BountyRejected",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"
                  ]
                },
                {
                  "name": "BountyBecameActive",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A bounty proposal is funded and became active. \\[index\\]"
                  ]
                },
                {
                  "name": "BountyAwarded",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"
                  ]
                },
                {
                  "name": "BountyClaimed",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"
                  ]
                },
                {
                  "name": "BountyCanceled",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["A bounty is cancelled. \\[index\\]"]
                },
                {
                  "name": "BountyExtended",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["A bounty expiry is extended. \\[index\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 56,
        "type": {
          "path": ["pallet_tips", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NewTip",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "A new tip suggestion has been opened. \\[tip_hash\\]"
                  ]
                },
                {
                  "name": "TipClosing",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"
                  ]
                },
                {
                  "name": "TipClosed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A tip suggestion has been closed. \\[tip_hash, who, payout\\]"
                  ]
                },
                {
                  "name": "TipRetracted",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "A tip suggestion has been retracted. \\[tip_hash\\]"
                  ]
                },
                {
                  "name": "TipSlashed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 57,
        "type": {
          "path": ["cumulus_pallet_parachain_system", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ValidationFunctionStored",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The validation function has been scheduled to apply."
                  ]
                },
                {
                  "name": "ValidationFunctionApplied",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "RelayChainBlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The validation function was applied as of the contained relay chain block number."
                  ]
                },
                {
                  "name": "ValidationFunctionDiscarded",
                  "fields": [],
                  "index": 2,
                  "docs": ["The relay-chain aborted the upgrade process."]
                },
                {
                  "name": "UpgradeAuthorized",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 3,
                  "docs": ["An upgrade has been authorized."]
                },
                {
                  "name": "DownwardMessagesReceived",
                  "fields": [
                    {"name": null, "type": 4, "typeName": "u32", "docs": []}
                  ],
                  "index": 4,
                  "docs": [
                    "Some downward messages have been received and will be processed.",
                    "\\[ count \\]"
                  ]
                },
                {
                  "name": "DownwardMessagesProcessed",
                  "fields": [
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []},
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "relay_chain::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Downward messages were processed using the given weight.",
                    "\\[ weight_used, result_mqc_head \\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 58,
        "type": {
          "path": ["module_collator_selection", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NewInvulnerables",
                  "fields": [
                    {
                      "name": null,
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Invulnurable was updated. \\[new_invulnerables\\]"]
                },
                {
                  "name": "NewDesiredCandidates",
                  "fields": [
                    {"name": null, "type": 4, "typeName": "u32", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "Desired candidates was updated. \\[new_desired_candidates\\]"
                  ]
                },
                {
                  "name": "NewCandidacyBond",
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Candidacy bond was updated. \\[new_candidacy_bond\\]"
                  ]
                },
                {
                  "name": "CandidateAdded",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A candidate was added. \\[who, bond\\]"]
                },
                {
                  "name": "CandidateRemoved",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["A candidate was removed. \\[who\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 59,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 0}
          },
          "docs": []
        }
      },
      {
        "id": 60,
        "type": {
          "path": ["pallet_session", "pallet", "Event"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NewSession",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New session has happened. Note that the argument is the \\[session_index\\], not the",
                    "block number as the type might suggest."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 61,
        "type": {
          "path": ["module_session_manager", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ScheduledSessionDuration",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Scheduled session duration. \\[block_number, session_index, session_duration\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 62,
        "type": {
          "path": ["cumulus_pallet_xcmp_queue", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Success",
                  "fields": [
                    {
                      "name": null,
                      "type": 63,
                      "typeName": "Option<T::Hash>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Some XCM was executed ok."]
                },
                {
                  "name": "Fail",
                  "fields": [
                    {
                      "name": null,
                      "type": 63,
                      "typeName": "Option<T::Hash>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 64,
                      "typeName": "XcmError",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Some XCM failed."]
                },
                {
                  "name": "BadVersion",
                  "fields": [
                    {
                      "name": null,
                      "type": 63,
                      "typeName": "Option<T::Hash>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Bad XCM version used."]
                },
                {
                  "name": "BadFormat",
                  "fields": [
                    {
                      "name": null,
                      "type": 63,
                      "typeName": "Option<T::Hash>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["Bad XCM format used."]
                },
                {
                  "name": "UpwardMessageSent",
                  "fields": [
                    {
                      "name": null,
                      "type": 63,
                      "typeName": "Option<T::Hash>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["An upward message was sent to the relay chain."]
                },
                {
                  "name": "XcmpMessageSent",
                  "fields": [
                    {
                      "name": null,
                      "type": 63,
                      "typeName": "Option<T::Hash>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["An HRMP message was sent to a sibling parachain."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 63,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 9}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 9, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 64,
        "type": {
          "path": ["xcm", "v2", "traits", "Error"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Overflow", "fields": [], "index": 0, "docs": []},
                {"name": "Unimplemented", "fields": [], "index": 1, "docs": []},
                {
                  "name": "UntrustedReserveLocation",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UntrustedTeleportLocation",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MultiLocationFull",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "MultiLocationNotInvertible",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {"name": "BadOrigin", "fields": [], "index": 6, "docs": []},
                {
                  "name": "InvalidLocation",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {"name": "AssetNotFound", "fields": [], "index": 8, "docs": []},
                {
                  "name": "FailedToTransactAsset",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "NotWithdrawable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "LocationCannotHold",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ExceedsMaxMessageSize",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DestinationUnsupported",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {"name": "Transport", "fields": [], "index": 14, "docs": []},
                {"name": "Unroutable", "fields": [], "index": 15, "docs": []},
                {"name": "UnknownClaim", "fields": [], "index": 16, "docs": []},
                {
                  "name": "FailedToDecode",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "TooMuchWeightRequired",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "NotHoldingFees",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {"name": "TooExpensive", "fields": [], "index": 20, "docs": []},
                {
                  "name": "Trap",
                  "fields": [
                    {"name": null, "type": 8, "typeName": "u64", "docs": []}
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "UnhandledXcmVersion",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "WeightLimitReached",
                  "fields": [
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []}
                  ],
                  "index": 23,
                  "docs": []
                },
                {"name": "Barrier", "fields": [], "index": 24, "docs": []},
                {
                  "name": "WeightNotComputable",
                  "fields": [],
                  "index": 25,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 65,
        "type": {
          "path": ["pallet_xcm", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Attempted",
                  "fields": [
                    {
                      "name": null,
                      "type": 66,
                      "typeName": "xcm::latest::Outcome",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Execution of an XCM message was attempted.",
                    "",
                    "\\[ outcome \\]"
                  ]
                },
                {
                  "name": "Sent",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A XCM message was sent.",
                    "",
                    "\\[ origin, destination, message \\]"
                  ]
                },
                {
                  "name": "UnexpectedResponse",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {"name": null, "type": 8, "typeName": "QueryId", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "Query response received which does not match a registered query. This may be because a",
                    "matching query was never registered, it may be because it is a duplicate response, or",
                    "because the query timed out.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "ResponseReady",
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 86,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Query response has been received and is ready for taking with `take_response`. There is",
                    "no registered notification call.",
                    "",
                    "\\[ id, response \\]"
                  ]
                },
                {
                  "name": "Notified",
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {"name": null, "type": 2, "typeName": "u8", "docs": []},
                    {"name": null, "type": 2, "typeName": "u8", "docs": []}
                  ],
                  "index": 4,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification has",
                    "been dispatched and executed successfully.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "NotifyOverweight",
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {"name": null, "type": 2, "typeName": "u8", "docs": []},
                    {"name": null, "type": 2, "typeName": "u8", "docs": []},
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []},
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []}
                  ],
                  "index": 5,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification could",
                    "not be dispatched because the dispatch weight is greater than the maximum weight",
                    "originally budgeted by this runtime for the query result.",
                    "",
                    "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                  ]
                },
                {
                  "name": "NotifyDispatchError",
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {"name": null, "type": 2, "typeName": "u8", "docs": []},
                    {"name": null, "type": 2, "typeName": "u8", "docs": []}
                  ],
                  "index": 6,
                  "docs": [
                    "Query response has been received and query is removed. There was a general error with",
                    "dispatching the notification call.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "NotifyDecodeFailed",
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {"name": null, "type": 2, "typeName": "u8", "docs": []},
                    {"name": null, "type": 2, "typeName": "u8", "docs": []}
                  ],
                  "index": 7,
                  "docs": [
                    "Query response has been received and query is removed. The dispatch was unable to be",
                    "decoded into a `Call`; this might be due to dispatch function having a signature which",
                    "is not `(origin, QueryId, Response)`.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "InvalidResponder",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 95,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Expected query response has been received but the origin location of the response does",
                    "not match that expected. The query remains registered for a later, valid, response to",
                    "be received and acted upon.",
                    "",
                    "\\[ origin location, id, expected location \\]"
                  ]
                },
                {
                  "name": "InvalidResponderVersion",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {"name": null, "type": 8, "typeName": "QueryId", "docs": []}
                  ],
                  "index": 9,
                  "docs": [
                    "Expected query response has been received but the expected origin location placed in",
                    "storate by this runtime previously cannot be decoded. The query remains registered.",
                    "",
                    "This is unexpected (since a location placed in storage in a previously executing",
                    "runtime should be readable prior to query timeout) and dangerous since the possibly",
                    "valid response will be dropped. Manual governance intervention is probably going to be",
                    "needed.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "ResponseTaken",
                  "fields": [
                    {"name": null, "type": 8, "typeName": "QueryId", "docs": []}
                  ],
                  "index": 10,
                  "docs": [
                    "Received query response has been read and removed.",
                    "",
                    "\\[ id \\]"
                  ]
                },
                {
                  "name": "AssetsTrapped",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "H256", "docs": []},
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 96,
                      "typeName": "VersionedMultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Some assets have been placed in an asset trap.",
                    "",
                    "\\[ hash, origin, assets \\]"
                  ]
                },
                {
                  "name": "VersionChangeNotified",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An XCM version change notification message has been attempted to be sent.",
                    "",
                    "\\[ destination, result \\]"
                  ]
                },
                {
                  "name": "SupportedVersionChanged",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The supported version of a location has been changed. This might be through an",
                    "automatic notification or a manual intervention.",
                    "",
                    "\\[ location, XCM version \\]"
                  ]
                },
                {
                  "name": "NotifyTargetSendFail",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 64,
                      "typeName": "XcmError",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "sending the notification to it.",
                    "",
                    "\\[ location, query ID, error \\]"
                  ]
                },
                {
                  "name": "NotifyTargetMigrationFail",
                  "fields": [
                    {
                      "name": null,
                      "type": 101,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {"name": null, "type": 8, "typeName": "QueryId", "docs": []}
                  ],
                  "index": 15,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "migrating the location to our new XCM format.",
                    "",
                    "\\[ location, query ID \\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 66,
        "type": {
          "path": ["xcm", "v2", "traits", "Outcome"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Complete",
                  "fields": [
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []}
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Incomplete",
                  "fields": [
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []},
                    {"name": null, "type": 64, "typeName": "Error", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {"name": null, "type": 64, "typeName": "Error", "docs": []}
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 67,
        "type": {
          "path": ["xcm", "v1", "multilocation", "MultiLocation"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": "parents", "type": 2, "typeName": "u8", "docs": []},
                {
                  "name": "interior",
                  "type": 68,
                  "typeName": "Junctions",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 68,
        "type": {
          "path": ["xcm", "v1", "multilocation", "Junctions"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Here", "fields": [], "index": 0, "docs": []},
                {
                  "name": "X1",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 69,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 69,
        "type": {
          "path": ["xcm", "v1", "junction", "Junction"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Parachain",
                  "fields": [
                    {"name": null, "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "type": 71,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "type": 71,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {"name": "index", "type": 72, "typeName": "u64", "docs": []}
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "type": 71,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "type": 48,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {"name": null, "type": 2, "typeName": "u8", "docs": []}
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {"name": null, "type": 53, "typeName": "u128", "docs": []}
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {"name": "OnlyChild", "fields": [], "index": 7, "docs": []},
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "type": 73,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "type": 74,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 70,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Compact": {"type": 4}
          },
          "docs": []
        }
      },
      {
        "id": 71,
        "type": {
          "path": ["xcm", "v0", "junction", "NetworkId"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Any", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Named",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {"name": "Polkadot", "fields": [], "index": 2, "docs": []},
                {"name": "Kusama", "fields": [], "index": 3, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 72,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Compact": {"type": 8}
          },
          "docs": []
        }
      },
      {
        "id": 73,
        "type": {
          "path": ["xcm", "v0", "junction", "BodyId"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Unit", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Named",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {"name": null, "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 2,
                  "docs": []
                },
                {"name": "Executive", "fields": [], "index": 3, "docs": []},
                {"name": "Technical", "fields": [], "index": 4, "docs": []},
                {"name": "Legislative", "fields": [], "index": 5, "docs": []},
                {"name": "Judicial", "fields": [], "index": 6, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 74,
        "type": {
          "path": ["xcm", "v0", "junction", "BodyPart"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Voice", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Members",
                  "fields": [
                    {"name": "count", "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Fraction",
                  "fields": [
                    {"name": "nom", "type": 70, "typeName": "u32", "docs": []},
                    {"name": "denom", "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AtLeastProportion",
                  "fields": [
                    {"name": "nom", "type": 70, "typeName": "u32", "docs": []},
                    {"name": "denom", "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MoreThanProportion",
                  "fields": [
                    {"name": "nom", "type": 70, "typeName": "u32", "docs": []},
                    {"name": "denom", "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 75,
        "type": {
          "path": ["xcm", "v2", "Xcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 76,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 76,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 77}
          },
          "docs": []
        }
      },
      {
        "id": 77,
        "type": {
          "path": ["xcm", "v2", "Instruction"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 86,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 89,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 90,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {"name": "ClearOrigin", "fields": [], "index": 10, "docs": []},
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "name": null,
                      "type": 68,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 80,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 94,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "name": null,
                      "type": 75,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "name": null,
                      "type": 75,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {"name": "ClearError", "fields": [], "index": 23, "docs": []},
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {"name": null, "type": 72, "typeName": "u64", "docs": []}
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 78,
        "type": {
          "path": ["xcm", "v1", "multiasset", "MultiAssets"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 79,
                  "typeName": "Vec<MultiAsset>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 79,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 80}
          },
          "docs": []
        }
      },
      {
        "id": 80,
        "type": {
          "path": ["xcm", "v1", "multiasset", "MultiAsset"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": "id", "type": 81, "typeName": "AssetId", "docs": []},
                {
                  "name": "fun",
                  "type": 82,
                  "typeName": "Fungibility",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 81,
        "type": {
          "path": ["xcm", "v1", "multiasset", "AssetId"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Concrete",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Abstract",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 82,
        "type": {
          "path": ["xcm", "v1", "multiasset", "Fungibility"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Fungible",
                  "fields": [
                    {"name": null, "type": 53, "typeName": "u128", "docs": []}
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [
                    {
                      "name": null,
                      "type": 83,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 83,
        "type": {
          "path": ["xcm", "v1", "multiasset", "AssetInstance"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Undefined", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Index",
                  "fields": [
                    {"name": null, "type": 53, "typeName": "u128", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Array4",
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Array8",
                  "fields": [
                    {
                      "name": null,
                      "type": 84,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Array16",
                  "fields": [
                    {
                      "name": null,
                      "type": 85,
                      "typeName": "[u8; 16]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Array32",
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Blob",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 84,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Array": {"len": 8, "type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 85,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Array": {"len": 16, "type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 86,
        "type": {
          "path": ["xcm", "v2", "Response"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Null", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ExecutionResult",
                  "fields": [
                    {
                      "name": null,
                      "type": 87,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 87,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 88}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 88, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 88,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 64]
          },
          "docs": []
        }
      },
      {
        "id": 89,
        "type": {
          "path": ["xcm", "v0", "OriginKind"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Native", "fields": [], "index": 0, "docs": []},
                {
                  "name": "SovereignAccount",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {"name": "Superuser", "fields": [], "index": 2, "docs": []},
                {"name": "Xcm", "fields": [], "index": 3, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 90,
        "type": {
          "path": ["xcm", "double_encoded", "DoubleEncoded"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "encoded",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 91,
        "type": {
          "path": ["xcm", "v1", "multiasset", "MultiAssetFilter"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Definite",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Wild",
                  "fields": [
                    {
                      "name": null,
                      "type": 92,
                      "typeName": "WildMultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 92,
        "type": {
          "path": ["xcm", "v1", "multiasset", "WildMultiAsset"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "All", "fields": [], "index": 0, "docs": []},
                {
                  "name": "AllOf",
                  "fields": [
                    {
                      "name": "id",
                      "type": 81,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "type": 93,
                      "typeName": "WildFungibility",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 93,
        "type": {
          "path": ["xcm", "v1", "multiasset", "WildFungibility"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Fungible", "fields": [], "index": 0, "docs": []},
                {"name": "NonFungible", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 94,
        "type": {
          "path": ["xcm", "v2", "WeightLimit"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Unlimited", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Limited",
                  "fields": [
                    {"name": null, "type": 72, "typeName": "u64", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 95,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 67}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 67, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 96,
        "type": {
          "path": ["xcm", "VersionedMultiAssets"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "V0",
                  "fields": [
                    {
                      "name": null,
                      "type": 97,
                      "typeName": "Vec<v0::MultiAsset>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "v1::MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 97,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 98}
          },
          "docs": []
        }
      },
      {
        "id": 98,
        "type": {
          "path": ["xcm", "v0", "multi_asset", "MultiAsset"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {"name": "All", "fields": [], "index": 1, "docs": []},
                {"name": "AllFungible", "fields": [], "index": 2, "docs": []},
                {
                  "name": "AllNonFungible",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "AllAbstractFungible",
                  "fields": [
                    {
                      "name": "id",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "AllAbstractNonFungible",
                  "fields": [
                    {
                      "name": "class",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "AllConcreteFungible",
                  "fields": [
                    {
                      "name": "id",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "AllConcreteNonFungible",
                  "fields": [
                    {
                      "name": "class",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AbstractFungible",
                  "fields": [
                    {
                      "name": "id",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "AbstractNonFungible",
                  "fields": [
                    {
                      "name": "class",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "instance",
                      "type": 83,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ConcreteFungible",
                  "fields": [
                    {
                      "name": "id",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "ConcreteNonFungible",
                  "fields": [
                    {
                      "name": "class",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "instance",
                      "type": 83,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 99,
        "type": {
          "path": ["xcm", "v0", "multi_location", "MultiLocation"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Null", "fields": [], "index": 0, "docs": []},
                {
                  "name": "X1",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 100,
        "type": {
          "path": ["xcm", "v0", "junction", "Junction"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Parent", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Parachain",
                  "fields": [
                    {"name": null, "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "type": 71,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "type": 71,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {"name": "index", "type": 72, "typeName": "u64", "docs": []}
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "type": 71,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "type": 48,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {"name": null, "type": 2, "typeName": "u8", "docs": []}
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {"name": null, "type": 53, "typeName": "u128", "docs": []}
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {"name": "OnlyChild", "fields": [], "index": 8, "docs": []},
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "type": 73,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "type": 74,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 101,
        "type": {
          "path": ["xcm", "VersionedMultiLocation"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "V0",
                  "fields": [
                    {
                      "name": null,
                      "type": 99,
                      "typeName": "v0::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "v1::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 102,
        "type": {
          "path": ["cumulus_pallet_xcm", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidFormat",
                  "fields": [
                    {
                      "name": null,
                      "type": 84,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Downward message is invalid XCM.", "\\[ id \\]"]
                },
                {
                  "name": "UnsupportedVersion",
                  "fields": [
                    {
                      "name": null,
                      "type": 84,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Downward message is unsupported version of XCM.",
                    "\\[ id \\]"
                  ]
                },
                {
                  "name": "ExecutedDownward",
                  "fields": [
                    {
                      "name": null,
                      "type": 84,
                      "typeName": "[u8; 8]",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 66,
                      "typeName": "Outcome",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Downward message executed with the given outcome.",
                    "\\[ id, outcome \\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 103,
        "type": {
          "path": ["cumulus_pallet_dmp_queue", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidFormat",
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Downward message is invalid XCM.", "\\[ id \\]"]
                },
                {
                  "name": "UnsupportedVersion",
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Downward message is unsupported version of XCM.",
                    "\\[ id \\]"
                  ]
                },
                {
                  "name": "ExecutedDownward",
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 66,
                      "typeName": "Outcome",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Downward message executed with the given outcome.",
                    "\\[ id, outcome \\]"
                  ]
                },
                {
                  "name": "WeightExhausted",
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []},
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "The weight limit for handling downward messages was reached.",
                    "\\[ id, remaining, required \\]"
                  ]
                },
                {
                  "name": "OverweightEnqueued",
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []}
                  ],
                  "index": 4,
                  "docs": [
                    "Downward message is overweight and was placed in the overweight queue.",
                    "\\[ id, index, required \\]"
                  ]
                },
                {
                  "name": "OverweightServiced",
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []}
                  ],
                  "index": 5,
                  "docs": [
                    "Downward message from the overweight queue was executed.",
                    "\\[ index, used \\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 104,
        "type": {
          "path": ["orml_xtokens", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Transferred",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transferred. \\[sender, currency_id, amount, dest\\]"
                  ]
                },
                {
                  "name": "TransferredMultiAsset",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 80,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Transferred `MultiAsset`. \\[sender, asset, dest\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 105,
        "type": {
          "path": ["orml_unknown_tokens", "module", "Event"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Deposited",
                  "fields": [
                    {
                      "name": null,
                      "type": 80,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Deposit success. [asset, to]"]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": null,
                      "type": 80,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Withdraw success. [asset, from]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 106,
        "type": {
          "path": ["orml_xcm", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Sent",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["XCM message sent. \\[to, message\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 107,
        "type": {
          "path": ["orml_authority", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Dispatched",
                  "fields": [
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A call is dispatched. [result]"]
                },
                {
                  "name": "Scheduled",
                  "fields": [
                    {
                      "name": null,
                      "type": 108,
                      "typeName": "T::PalletsOrigin",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ScheduleTaskIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A call is scheduled. [origin, index]"]
                },
                {
                  "name": "FastTracked",
                  "fields": [
                    {
                      "name": null,
                      "type": 108,
                      "typeName": "T::PalletsOrigin",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ScheduleTaskIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A scheduled call is fast tracked. [origin, index, when]"
                  ]
                },
                {
                  "name": "Delayed",
                  "fields": [
                    {
                      "name": null,
                      "type": 108,
                      "typeName": "T::PalletsOrigin",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ScheduleTaskIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A scheduled call is delayed. [origin, index, when]"]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": null,
                      "type": 108,
                      "typeName": "T::PalletsOrigin",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ScheduleTaskIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["A scheduled call is cancelled. [origin, index]"]
                },
                {
                  "name": "AuthorizedCall",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 119,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["A call is authorized. \\[hash, caller\\]"]
                },
                {
                  "name": "RemovedAuthorizedCall",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 6,
                  "docs": ["An authorized call was removed. \\[hash\\]"]
                },
                {
                  "name": "TriggeredCallBy",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "An authorized call was triggered. \\[hash, caller\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 108,
        "type": {
          "path": ["acala_runtime", "OriginCaller"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "system",
                  "fields": [
                    {
                      "name": null,
                      "type": 109,
                      "typeName": "frame_system::Origin<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PolkadotXcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 110,
                      "typeName": "pallet_xcm::Origin",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "CumulusXcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 111,
                      "typeName": "cumulus_pallet_xcm::Origin",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Authority",
                  "fields": [
                    {
                      "name": null,
                      "type": 113,
                      "typeName": "orml_authority::Origin<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "GeneralCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 114,
                      "typeName":
                          "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "FinancialCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 115,
                      "typeName":
                          "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "HomaCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 116,
                      "typeName":
                          "pallet_collective::Origin<Runtime, pallet_collective::Instance3>",
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "TechnicalCommittee",
                  "fields": [
                    {
                      "name": null,
                      "type": 117,
                      "typeName":
                          "pallet_collective::Origin<Runtime, pallet_collective::Instance4>",
                      "docs": []
                    }
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "Void",
                  "fields": [
                    {
                      "name": null,
                      "type": 118,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 109,
        "type": {
          "path": ["frame_system", "RawOrigin"],
          "params": [
            {"name": "AccountId", "type": 0}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Root", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Signed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {"name": "None", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 110,
        "type": {
          "path": ["pallet_xcm", "pallet", "Origin"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Xcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Response",
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 111,
        "type": {
          "path": ["cumulus_pallet_xcm", "pallet", "Origin"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Relay", "fields": [], "index": 0, "docs": []},
                {
                  "name": "SiblingParachain",
                  "fields": [
                    {
                      "name": null,
                      "type": 112,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 112,
        "type": {
          "path": ["polkadot_parachain", "primitives", "Id"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 4, "typeName": "u32", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 113,
        "type": {
          "path": ["orml_authority", "DelayedOrigin"],
          "params": [
            {"name": "BlockNumber", "type": 4},
            {"name": "PalletsOrigin", "type": 108}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 108,
                  "typeName": "Box<PalletsOrigin>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 114,
        "type": {
          "path": ["pallet_collective", "RawOrigin"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {"name": "_Phantom", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 115,
        "type": {
          "path": ["pallet_collective", "RawOrigin"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {"name": "_Phantom", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 116,
        "type": {
          "path": ["pallet_collective", "RawOrigin"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {"name": "_Phantom", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 117,
        "type": {
          "path": ["pallet_collective", "RawOrigin"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {"name": "_Phantom", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 118,
        "type": {
          "path": ["sp_core", "Void"],
          "params": [],
          "def": {
            "Variant": {"variants": []}
          },
          "docs": []
        }
      },
      {
        "id": 119,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 0}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 0, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 120,
        "type": {
          "path": ["pallet_collective", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`).",
                    "\\[account, proposal_index, proposal_hash, threshold\\]"
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {"name": null, "type": 121, "typeName": "bool", "docs": []},
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`).",
                    "\\[account, proposal_hash, voted, yes, no\\]"
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up.",
                    "\\[proposal_hash, yes, no\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 121,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "Bool"},
          "docs": []
        }
      },
      {
        "id": 122,
        "type": {
          "path": ["pallet_membership", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MemberAdded",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The given member was added; see the transaction for who."
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given member was removed; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersSwapped",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Two members were swapped; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersReset",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The membership was reset; see the transaction for who the new set is."
                  ]
                },
                {
                  "name": "KeyChanged",
                  "fields": [],
                  "index": 4,
                  "docs": ["One of the members' keys changed."]
                },
                {
                  "name": "Dummy",
                  "fields": [],
                  "index": 5,
                  "docs": ["Phantom member, never used."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 123,
        "type": {
          "path": ["pallet_collective", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`).",
                    "\\[account, proposal_index, proposal_hash, threshold\\]"
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {"name": null, "type": 121, "typeName": "bool", "docs": []},
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`).",
                    "\\[account, proposal_hash, voted, yes, no\\]"
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up.",
                    "\\[proposal_hash, yes, no\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 124,
        "type": {
          "path": ["pallet_membership", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MemberAdded",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The given member was added; see the transaction for who."
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given member was removed; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersSwapped",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Two members were swapped; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersReset",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The membership was reset; see the transaction for who the new set is."
                  ]
                },
                {
                  "name": "KeyChanged",
                  "fields": [],
                  "index": 4,
                  "docs": ["One of the members' keys changed."]
                },
                {
                  "name": "Dummy",
                  "fields": [],
                  "index": 5,
                  "docs": ["Phantom member, never used."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 125,
        "type": {
          "path": ["pallet_collective", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`).",
                    "\\[account, proposal_index, proposal_hash, threshold\\]"
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {"name": null, "type": 121, "typeName": "bool", "docs": []},
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`).",
                    "\\[account, proposal_hash, voted, yes, no\\]"
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up.",
                    "\\[proposal_hash, yes, no\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 126,
        "type": {
          "path": ["pallet_membership", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MemberAdded",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The given member was added; see the transaction for who."
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given member was removed; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersSwapped",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Two members were swapped; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersReset",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The membership was reset; see the transaction for who the new set is."
                  ]
                },
                {
                  "name": "KeyChanged",
                  "fields": [],
                  "index": 4,
                  "docs": ["One of the members' keys changed."]
                },
                {
                  "name": "Dummy",
                  "fields": [],
                  "index": 5,
                  "docs": ["Phantom member, never used."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 127,
        "type": {
          "path": ["pallet_collective", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`).",
                    "\\[account, proposal_index, proposal_hash, threshold\\]"
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {"name": null, "type": 121, "typeName": "bool", "docs": []},
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`).",
                    "\\[account, proposal_hash, voted, yes, no\\]"
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold.",
                    "\\[proposal_hash\\]"
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error.",
                    "\\[proposal_hash, result\\]"
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up.",
                    "\\[proposal_hash, yes, no\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 128,
        "type": {
          "path": ["pallet_membership", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MemberAdded",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The given member was added; see the transaction for who."
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given member was removed; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersSwapped",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Two members were swapped; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersReset",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The membership was reset; see the transaction for who the new set is."
                  ]
                },
                {
                  "name": "KeyChanged",
                  "fields": [],
                  "index": 4,
                  "docs": ["One of the members' keys changed."]
                },
                {
                  "name": "Dummy",
                  "fields": [],
                  "index": 5,
                  "docs": ["Phantom member, never used."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 129,
        "type": {
          "path": ["pallet_democracy", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion has been proposed by a public account. \\[proposal_index, deposit\\]"
                  ]
                },
                {
                  "name": "Tabled",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A public proposal has been tabled for referendum vote. \\[proposal_index, deposit,",
                    "depositors\\]"
                  ]
                },
                {
                  "name": "ExternalTabled",
                  "fields": [],
                  "index": 2,
                  "docs": ["An external proposal has been tabled."]
                },
                {
                  "name": "Started",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 130,
                      "typeName": "VoteThreshold",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A referendum has begun. \\[ref_index, threshold\\]"]
                },
                {
                  "name": "Passed",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A proposal has been approved by referendum. \\[ref_index\\]"
                  ]
                },
                {
                  "name": "NotPassed",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A proposal has been rejected by referendum. \\[ref_index\\]"
                  ]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["A referendum has been cancelled. \\[ref_index\\]"]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A proposal has been enacted. \\[ref_index, result\\]"
                  ]
                },
                {
                  "name": "Delegated",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "An account has delegated their vote to another account. \\[who, target\\]"
                  ]
                },
                {
                  "name": "Undelegated",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "An \\[account\\] has cancelled a previous delegation operation."
                  ]
                },
                {
                  "name": "Vetoed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "An external proposal has been vetoed. \\[who, proposal_hash, until\\]"
                  ]
                },
                {
                  "name": "PreimageNoted",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"
                  ]
                },
                {
                  "name": "PreimageUsed",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "A proposal preimage was removed and used (the deposit was returned).",
                    "\\[proposal_hash, provider, deposit\\]"
                  ]
                },
                {
                  "name": "PreimageInvalid",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "A proposal could not be executed because its preimage was invalid.",
                    "\\[proposal_hash, ref_index\\]"
                  ]
                },
                {
                  "name": "PreimageMissing",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "A proposal could not be executed because its preimage was missing.",
                    "\\[proposal_hash, ref_index\\]"
                  ]
                },
                {
                  "name": "PreimageReaped",
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "A registered preimage was removed and the deposit collected by the reaper.",
                    "\\[proposal_hash, provider, deposit, reaper\\]"
                  ]
                },
                {
                  "name": "Blacklisted",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 16,
                  "docs": [
                    "A proposal \\[hash\\] has been blacklisted permanently."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 130,
        "type": {
          "path": ["pallet_democracy", "vote_threshold", "VoteThreshold"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "SuperMajorityApprove",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SuperMajorityAgainst",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {"name": "SimpleMajority", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 131,
        "type": {
          "path": ["orml_oracle", "module", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NewFeedData",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 132,
                      "typeName": "Vec<(T::OracleKey, T::OracleValue)>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["New feed data is submitted. [sender, values]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 132,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 133}
          },
          "docs": []
        }
      },
      {
        "id": 133,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [44, 134]
          },
          "docs": []
        }
      },
      {
        "id": 134,
        "type": {
          "path": ["sp_arithmetic", "fixed_point", "FixedU128"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 6, "typeName": "u128", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 135,
        "type": {
          "path": ["pallet_membership", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MemberAdded",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The given member was added; see the transaction for who."
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given member was removed; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersSwapped",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Two members were swapped; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersReset",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The membership was reset; see the transaction for who the new set is."
                  ]
                },
                {
                  "name": "KeyChanged",
                  "fields": [],
                  "index": 4,
                  "docs": ["One of the members' keys changed."]
                },
                {
                  "name": "Dummy",
                  "fields": [],
                  "index": 5,
                  "docs": ["Phantom member, never used."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 136,
        "type": {
          "path": ["orml_auction", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Bid",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::AuctionId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A bid is placed. [auction_id, bidder, bidding_amount]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 137,
        "type": {
          "path": ["module_prices", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "LockPrice",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {"name": null, "type": 134, "typeName": "Price", "docs": []}
                  ],
                  "index": 0,
                  "docs": ["Lock price. \\[currency_id, locked_price\\]"]
                },
                {
                  "name": "UnlockPrice",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Unlock price. \\[currency_id\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 138,
        "type": {
          "path": ["module_dex", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AddProvision",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "add provision success \\[who, currency_id_0, contribution_0,",
                    "currency_id_1, contribution_1\\]"
                  ]
                },
                {
                  "name": "AddLiquidity",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "Add liquidity success. \\[who, currency_id_0, pool_0_increment,",
                    "currency_id_1, pool_1_increment, share_increment\\]"
                  ]
                },
                {
                  "name": "RemoveLiquidity",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "Remove liquidity from the trading pool success. \\[who,",
                    "currency_id_0, pool_0_decrement, currency_id_1, pool_1_decrement,",
                    "share_decrement\\]"
                  ]
                },
                {
                  "name": "Swap",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 139,
                      "typeName": "Vec<CurrencyId>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 140,
                      "typeName": "Vec<Balance>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Use supply currency to swap target currency. \\[trader, trading_path,",
                    "liquidity_change_list\\]"
                  ]
                },
                {
                  "name": "EnableTradingPair",
                  "fields": [
                    {
                      "name": null,
                      "type": 141,
                      "typeName": "TradingPair",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["Enable trading pair. \\[trading_pair\\]"]
                },
                {
                  "name": "ListProvisioning",
                  "fields": [
                    {
                      "name": null,
                      "type": 141,
                      "typeName": "TradingPair",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["List provisioning trading pair. \\[trading_pair\\]"]
                },
                {
                  "name": "DisableTradingPair",
                  "fields": [
                    {
                      "name": null,
                      "type": 141,
                      "typeName": "TradingPair",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["Disable trading pair. \\[trading_pair\\]"]
                },
                {
                  "name": "ProvisioningToEnabled",
                  "fields": [
                    {
                      "name": null,
                      "type": 141,
                      "typeName": "TradingPair",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 7,
                  "docs": [
                    "Provisioning trading pair convert to Enabled. \\[trading_pair,",
                    "pool_0_amount, pool_1_amount, total_share_amount\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 139,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 44}
          },
          "docs": []
        }
      },
      {
        "id": 140,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 6}
          },
          "docs": []
        }
      },
      {
        "id": 141,
        "type": {
          "path": ["acala_primitives", "TradingPair"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "CurrencyId",
                  "docs": []
                },
                {"name": null, "type": 44, "typeName": "CurrencyId", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 142,
        "type": {
          "path": ["module_auction_manager", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NewCollateralAuction",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "AuctionId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "Collateral auction created. \\[auction_id, collateral_type,",
                    "collateral_amount, target_bid_price\\]"
                  ]
                },
                {
                  "name": "CancelAuction",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "AuctionId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Active auction cancelled. \\[auction_id\\]"]
                },
                {
                  "name": "CollateralAuctionDealt",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "AuctionId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "Collateral auction dealt. \\[auction_id, collateral_type,",
                    "collateral_amount, winner, payment_amount\\]"
                  ]
                },
                {
                  "name": "DEXTakeCollateralAuction",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "AuctionId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "Dex take collateral auction. \\[auction_id, collateral_type,",
                    "collateral_amount, turnover\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 143,
        "type": {
          "path": ["module_loans", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "PositionUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 50,
                      "typeName": "Amount",
                      "docs": []
                    },
                    {"name": null, "type": 50, "typeName": "Amount", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "Position updated. \\[owner, collateral_type, collateral_adjustment,",
                    "debit_adjustment\\]"
                  ]
                },
                {
                  "name": "ConfiscateCollateralAndDebit",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "Confiscate CDP's collateral assets and eliminate its debit. \\[owner,",
                    "collateral_type, confiscated_collateral_amount,",
                    "deduct_debit_amount\\]"
                  ]
                },
                {
                  "name": "TransferLoan",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Transfer loan. \\[from, to, currency_id\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 144,
        "type": {
          "path": ["module_honzon", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Authorization",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Authorize someone to operate the loan of specific collateral.",
                    "\\[authorizer, authorizee, collateral_type\\]"
                  ]
                },
                {
                  "name": "UnAuthorization",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Cancel the authorization of specific collateral for someone.",
                    "\\[authorizer, authorizee, collateral_type\\]"
                  ]
                },
                {
                  "name": "UnAuthorizationAll",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Cancel all authorization. \\[authorizer\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 145,
        "type": {
          "path": ["module_cdp_treasury", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ExpectedCollateralAuctionSizeUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "The expected amount size for per lot collateral auction of specific",
                    "collateral type updated. \\[collateral_type, new_size\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 146,
        "type": {
          "path": ["module_cdp_engine", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "LiquidateUnsafeCDP",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 147,
                      "typeName": "LiquidationStrategy",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Liquidate the unsafe CDP. \\[collateral_type, owner,",
                    "collateral_amount, bad_debt_value, liquidation_strategy\\]"
                  ]
                },
                {
                  "name": "SettleCDPInDebit",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Settle the CDP has debit. [collateral_type, owner]"]
                },
                {
                  "name": "CloseCDPInDebitByDEX",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "Directly close CDP has debit by handle debit with DEX.",
                    "\\[collateral_type, owner, sold_collateral_amount,",
                    "refund_collateral_amount, debit_value\\]"
                  ]
                },
                {
                  "name": "InterestRatePerSecUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 148,
                      "typeName": "Option<Rate>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The interest rate per sec for specific collateral type updated.",
                    "\\[collateral_type, new_interest_rate_per_sec\\]"
                  ]
                },
                {
                  "name": "LiquidationRatioUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 148,
                      "typeName": "Option<Ratio>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "The liquidation fee for specific collateral type updated.",
                    "\\[collateral_type, new_liquidation_ratio\\]"
                  ]
                },
                {
                  "name": "LiquidationPenaltyUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 148,
                      "typeName": "Option<Rate>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The liquidation penalty rate for specific collateral type updated.",
                    "\\[collateral_type, new_liquidation_panelty\\]"
                  ]
                },
                {
                  "name": "RequiredCollateralRatioUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 148,
                      "typeName": "Option<Ratio>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The required collateral penalty rate for specific collateral type",
                    "updated. \\[collateral_type, new_required_collateral_ratio\\]"
                  ]
                },
                {
                  "name": "MaximumTotalDebitValueUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 7,
                  "docs": [
                    "The hard cap of total debit value for specific collateral type",
                    "updated. \\[collateral_type, new_total_debit_value\\]"
                  ]
                },
                {
                  "name": "GlobalInterestRatePerSecUpdated",
                  "fields": [
                    {"name": null, "type": 134, "typeName": "Rate", "docs": []}
                  ],
                  "index": 8,
                  "docs": [
                    "The global interest rate per sec for all types of collateral",
                    "updated. \\[new_global_interest_rate_per_sec\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 147,
        "type": {
          "path": ["module_cdp_engine", "LiquidationStrategy"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Auction", "fields": [], "index": 0, "docs": []},
                {"name": "Exchange", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 148,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 134}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 134, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 149,
        "type": {
          "path": ["module_emergency_shutdown", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Shutdown",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Emergency shutdown occurs. \\[block_number\\]"]
                },
                {
                  "name": "OpenRefund",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["The final redemption opened. \\[block_number\\]"]
                },
                {
                  "name": "Refund",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 150,
                      "typeName": "Vec<(CurrencyId, Balance)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Refund info. \\[caller, stable_coin_amount, refund_list\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 150,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 151}
          },
          "docs": []
        }
      },
      {
        "id": 151,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [44, 6]
          },
          "docs": []
        }
      },
      {
        "id": 152,
        "type": {
          "path": ["module_homa_lite", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Minted",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "The user has Staked some currencies to mint Liquid Currency.",
                    "\\[user, amount_staked, amount_minted\\]"
                  ]
                },
                {
                  "name": "TotalStakingCurrencySet",
                  "fields": [
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "The total amount of the staking currency on the relaychain has been",
                    "set.\\[total_staking_currency\\]"
                  ]
                },
                {
                  "name": "StakingCurrencyMintCapUpdated",
                  "fields": [
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "The mint cap for Staking currency is updated.\\[new_cap\\]"
                  ]
                },
                {
                  "name": "XcmDestWeightSet",
                  "fields": [
                    {"name": null, "type": 8, "typeName": "Weight", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "A new weight for XCM transfers has been set.\\[new_weight\\]"
                  ]
                },
                {
                  "name": "RedeemRequestCancelled",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 4,
                  "docs": [
                    "The redeem request has been cancelled, and funds un-reserved.",
                    "\\[who, liquid_amount_unreserved\\]"
                  ]
                },
                {
                  "name": "RedeemRequested",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 153,
                      "typeName": "Permill",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A new Redeem request has been registered.",
                    "\\[who, liquid_amount, extra_fee\\]"
                  ]
                },
                {
                  "name": "Redeemed",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 6,
                  "docs": [
                    "The user has redeemed some Liquid currency back to Staking currency.",
                    "\\[user, staking_amount_redeemed, liquid_amount_deducted\\]"
                  ]
                },
                {
                  "name": "ScheduledUnbondAdded",
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "RelayChainBlockNumberOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A new Unbond request added to the schedule.",
                    "\\[staking_amount, relaychain_blocknumber\\]"
                  ]
                },
                {
                  "name": "ScheduledUnbondReplaced",
                  "fields": [],
                  "index": 8,
                  "docs": ["The ScheduledUnbond has been replaced."]
                },
                {
                  "name": "ScheduledUnbondWithdrew",
                  "fields": [
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 9,
                  "docs": [
                    "The scheduled Unbond has been withdrew from the RelayChain.",
                    "\\[staking_amount_added\\]"
                  ]
                },
                {
                  "name": "AvailableStakingBalanceSet",
                  "fields": [
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 10,
                  "docs": [
                    "The amount of the staking currency available to be redeemed is set.",
                    "\\[total_available_staking_balance\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 153,
        "type": {
          "path": ["sp_arithmetic", "per_things", "Permill"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 4, "typeName": "u32", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 154,
        "type": {
          "path": ["module_incentives", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "DepositDexShare",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 0,
                  "docs": [
                    "Deposit DEX share. \\[who, dex_share_type, deposit_amount\\]"
                  ]
                },
                {
                  "name": "WithdrawDexShare",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "Withdraw DEX share. \\[who, dex_share_type, withdraw_amount\\]"
                  ]
                },
                {
                  "name": "ClaimRewards",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 155,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "Claim rewards. \\[who, pool_id, reward_currency_id, actual_amount, deduction_amount\\]"
                  ]
                },
                {
                  "name": "IncentiveRewardAmountUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 155,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {"name": null, "type": 6, "typeName": "Balance", "docs": []}
                  ],
                  "index": 3,
                  "docs": [
                    "Incentive reward amount updated. \\[pool_id, reward_currency_id,",
                    "reward_amount_per_period\\]"
                  ]
                },
                {
                  "name": "SavingRewardRateUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 155,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {"name": null, "type": 134, "typeName": "Rate", "docs": []}
                  ],
                  "index": 4,
                  "docs": [
                    "Saving reward rate updated. \\[pool_id, reward_rate_per_period\\]"
                  ]
                },
                {
                  "name": "ClaimRewardDeductionRateUpdated",
                  "fields": [
                    {
                      "name": null,
                      "type": 155,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {"name": null, "type": 134, "typeName": "Rate", "docs": []}
                  ],
                  "index": 5,
                  "docs": [
                    "Payout deduction rate updated. \\[pool_id, deduction_rate\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 155,
        "type": {
          "path": ["module_incentives", "PoolId"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Loans",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Dex",
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 156,
        "type": {
          "path": ["module_nft", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "CreatedClass",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Created NFT class. \\[owner, class_id\\]"]
                },
                {
                  "name": "MintedToken",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    },
                    {"name": null, "type": 4, "typeName": "u32", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "Minted NFT token. \\[from, to, class_id, quantity\\]"
                  ]
                },
                {
                  "name": "TransferredToken",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "TokenIdOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transferred NFT token. \\[from, to, class_id, token_id\\]"
                  ]
                },
                {
                  "name": "BurnedToken",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "TokenIdOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["Burned NFT token. \\[owner, class_id, token_id\\]"]
                },
                {
                  "name": "BurnedTokenWithRemark",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "TokenIdOf<T>",
                      "docs": []
                    },
                    {"name": null, "type": 9, "typeName": "T::Hash", "docs": []}
                  ],
                  "index": 4,
                  "docs": [
                    "Burned NFT token with remark. \\[owner, class_id, token_id, remark_hash\\]"
                  ]
                },
                {
                  "name": "DestroyedClass",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["Destroyed NFT class. \\[owner, class_id\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 157,
        "type": {
          "path": ["module_evm", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 158,
                      "typeName": "Vec<Log>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A contract has been created at given \\[from, address, logs\\]."
                  ]
                },
                {
                  "name": "CreatedFailed",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 161,
                      "typeName": "ExitReason",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 158,
                      "typeName": "Vec<Log>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A contract was attempted to be created, but the execution failed.",
                    "\\[from, contract, exit_reason, logs\\]"
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 158,
                      "typeName": "Vec<Log>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A contract has been executed successfully with states applied. \\[from, contract, logs]\\"
                  ]
                },
                {
                  "name": "ExecutedFailed",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 161,
                      "typeName": "ExitReason",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 158,
                      "typeName": "Vec<Log>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A contract has been executed with errors. States are reverted with",
                    "only gas fees applied. \\[from, contract, exit_reason, output, logs\\]"
                  ]
                },
                {
                  "name": "TransferredMaintainer",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["Transferred maintainer. \\[contract, address\\]"]
                },
                {
                  "name": "ContractDevelopmentEnabled",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["Enabled contract development. \\[who\\]"]
                },
                {
                  "name": "ContractDevelopmentDisabled",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["Disabled contract development. \\[who\\]"]
                },
                {
                  "name": "ContractDeployed",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["Deployed contract. \\[contract\\]"]
                },
                {
                  "name": "ContractSetCode",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["Set contract code. \\[contract\\]"]
                },
                {
                  "name": "ContractSelfdestructed",
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["Selfdestructed contract code. \\[contract\\]"]
                }
              ]
            }
          },
          "docs": ["EVM events"]
        }
      },
      {
        "id": 158,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 159}
          },
          "docs": []
        }
      },
      {
        "id": 159,
        "type": {
          "path": ["ethereum", "log", "Log"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": "address", "type": 47, "typeName": "H160", "docs": []},
                {
                  "name": "topics",
                  "type": 160,
                  "typeName": "Vec<H256>",
                  "docs": []
                },
                {"name": "data", "type": 10, "typeName": "Bytes", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 160,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 9}
          },
          "docs": []
        }
      },
      {
        "id": 161,
        "type": {
          "path": ["evm_core", "error", "ExitReason"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Succeed",
                  "fields": [
                    {
                      "name": null,
                      "type": 162,
                      "typeName": "ExitSucceed",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "name": null,
                      "type": 163,
                      "typeName": "ExitError",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Revert",
                  "fields": [
                    {
                      "name": null,
                      "type": 166,
                      "typeName": "ExitRevert",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Fatal",
                  "fields": [
                    {
                      "name": null,
                      "type": 167,
                      "typeName": "ExitFatal",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 162,
        "type": {
          "path": ["evm_core", "error", "ExitSucceed"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Stopped", "fields": [], "index": 0, "docs": []},
                {"name": "Returned", "fields": [], "index": 1, "docs": []},
                {"name": "Suicided", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 163,
        "type": {
          "path": ["evm_core", "error", "ExitError"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "StackUnderflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {"name": "StackOverflow", "fields": [], "index": 1, "docs": []},
                {"name": "InvalidJump", "fields": [], "index": 2, "docs": []},
                {"name": "InvalidRange", "fields": [], "index": 3, "docs": []},
                {
                  "name": "DesignatedInvalid",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {"name": "CallTooDeep", "fields": [], "index": 5, "docs": []},
                {
                  "name": "CreateCollision",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "CreateContractLimit",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {"name": "OutOfOffset", "fields": [], "index": 8, "docs": []},
                {"name": "OutOfGas", "fields": [], "index": 9, "docs": []},
                {"name": "OutOfFund", "fields": [], "index": 10, "docs": []},
                {"name": "PCUnderflow", "fields": [], "index": 11, "docs": []},
                {"name": "CreateEmpty", "fields": [], "index": 12, "docs": []},
                {
                  "name": "Other",
                  "fields": [
                    {
                      "name": null,
                      "type": 164,
                      "typeName": "Cow<'static, str>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 164,
        "type": {
          "path": ["Cow"],
          "params": [
            {"name": "T", "type": 165}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 165, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 165,
        "type": {
          "path": [],
          "params": [],
          "def": {"Primitive": "Str"},
          "docs": []
        }
      },
      {
        "id": 166,
        "type": {
          "path": ["evm_core", "error", "ExitRevert"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Reverted", "fields": [], "index": 0, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 167,
        "type": {
          "path": ["evm_core", "error", "ExitFatal"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "NotSupported", "fields": [], "index": 0, "docs": []},
                {
                  "name": "UnhandledInterrupt",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "CallErrorAsFatal",
                  "fields": [
                    {
                      "name": null,
                      "type": 163,
                      "typeName": "ExitError",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "name": null,
                      "type": 164,
                      "typeName": "Cow<'static, str>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 168,
        "type": {
          "path": ["module_evm_accounts", "module", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ClaimAccount",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Mapping between Substrate accounts and EVM accounts",
                    "claim account. \\[account_id, evm_address\\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 169,
        "type": {
          "path": ["pallet_sudo", "pallet", "Event"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Sudid",
                  "fields": [
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A sudo just took place. \\[result\\]"]
                },
                {
                  "name": "KeyChanged",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The \\[sudoer\\] just switched identity; the old key is supplied."
                  ]
                },
                {
                  "name": "SudoAsDone",
                  "fields": [
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A sudo just took place. \\[result\\]"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 170,
        "type": {
          "path": ["frame_system", "Phase"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ApplyExtrinsic",
                  "fields": [
                    {"name": null, "type": 4, "typeName": "u32", "docs": []}
                  ],
                  "index": 0,
                  "docs": []
                },
                {"name": "Finalization", "fields": [], "index": 1, "docs": []},
                {"name": "Initialization", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 171,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 29}
          },
          "docs": []
        }
      },
      {
        "id": 172,
        "type": {
          "path": ["frame_system", "LastRuntimeUpgradeInfo"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "spec_version",
                  "type": 70,
                  "typeName": "codec::Compact<u32>",
                  "docs": []
                },
                {
                  "name": "spec_name",
                  "type": 165,
                  "typeName": "sp_runtime::RuntimeString",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 173,
        "type": {
          "path": ["frame_system", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "fill_block",
                  "fields": [
                    {
                      "name": "ratio",
                      "type": 174,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A dispatch that will fill the block weight up to the given ratio."
                  ]
                },
                {
                  "name": "remark",
                  "fields": [
                    {
                      "name": "remark",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Make some on-chain remark.",
                    "",
                    "# <weight>",
                    "- `O(1)`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "set_heap_pages",
                  "fields": [
                    {"name": "pages", "type": 8, "typeName": "u64", "docs": []}
                  ],
                  "index": 2,
                  "docs": [
                    "Set the number of pages in the WebAssembly environment's heap.",
                    "",
                    "# <weight>",
                    "- `O(1)`",
                    "- 1 storage write.",
                    "- Base Weight: 1.405 µs",
                    "- 1 write to HEAP_PAGES",
                    "- 1 digest item",
                    "# </weight>"
                  ]
                },
                {
                  "name": "set_code",
                  "fields": [
                    {
                      "name": "code",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Set the new runtime code.",
                    "",
                    "# <weight>",
                    "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                    "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                    "  expensive).",
                    "- 1 storage write (codec `O(C)`).",
                    "- 1 digest item.",
                    "- 1 event.",
                    "The weight of this function is dependent on the runtime, but generally this is very",
                    "expensive. We will treat this as a full block.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "set_code_without_checks",
                  "fields": [
                    {
                      "name": "code",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Set the new runtime code without doing any checks of the given `code`.",
                    "",
                    "# <weight>",
                    "- `O(C)` where `C` length of `code`",
                    "- 1 storage write (codec `O(C)`).",
                    "- 1 digest item.",
                    "- 1 event.",
                    "The weight of this function is dependent on the runtime. We will treat this as a full",
                    "block. # </weight>"
                  ]
                },
                {
                  "name": "set_changes_trie_config",
                  "fields": [
                    {
                      "name": "changes_trie_config",
                      "type": 16,
                      "typeName": "Option<ChangesTrieConfiguration>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the new changes trie configuration.",
                    "",
                    "# <weight>",
                    "- `O(1)`",
                    "- 1 storage write or delete (codec `O(1)`).",
                    "- 1 call to `deposit_log`: Uses `append` API, so O(1)",
                    "- Base Weight: 7.218 µs",
                    "- DB Weight:",
                    "    - Writes: Changes Trie, System Digest",
                    "# </weight>"
                  ]
                },
                {
                  "name": "set_storage",
                  "fields": [
                    {
                      "name": "items",
                      "type": 175,
                      "typeName": "Vec<KeyValue>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Set some items of storage.",
                    "",
                    "# <weight>",
                    "- `O(I)` where `I` length of `items`",
                    "- `I` storage writes (`O(1)`).",
                    "- Base Weight: 0.568 * i µs",
                    "- Writes: Number of items",
                    "# </weight>"
                  ]
                },
                {
                  "name": "kill_storage",
                  "fields": [
                    {
                      "name": "keys",
                      "type": 177,
                      "typeName": "Vec<Key>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Kill some items from storage.",
                    "",
                    "# <weight>",
                    "- `O(IK)` where `I` length of `keys` and `K` length of one key",
                    "- `I` storage deletions.",
                    "- Base Weight: .378 * i µs",
                    "- Writes: Number of items",
                    "# </weight>"
                  ]
                },
                {
                  "name": "kill_prefix",
                  "fields": [
                    {
                      "name": "prefix",
                      "type": 10,
                      "typeName": "Key",
                      "docs": []
                    },
                    {
                      "name": "subkeys",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Kill all storage items with a key that starts with the given prefix.",
                    "",
                    "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                    "the prefix we are removing to accurately calculate the weight of this function.",
                    "",
                    "# <weight>",
                    "- `O(P)` where `P` amount of keys with prefix `prefix`",
                    "- `P` storage deletions.",
                    "- Base Weight: 0.834 * P µs",
                    "- Writes: Number of subkeys + 1",
                    "# </weight>"
                  ]
                },
                {
                  "name": "remark_with_event",
                  "fields": [
                    {
                      "name": "remark",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Make some on-chain remark and emit event.",
                    "",
                    "# <weight>",
                    "- `O(b)` where b is the length of the remark.",
                    "- 1 event.",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 174,
        "type": {
          "path": ["sp_arithmetic", "per_things", "Perbill"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 4, "typeName": "u32", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 175,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 176}
          },
          "docs": []
        }
      },
      {
        "id": 176,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [10, 10]
          },
          "docs": []
        }
      },
      {
        "id": 177,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 10}
          },
          "docs": []
        }
      },
      {
        "id": 178,
        "type": {
          "path": ["frame_system", "limits", "BlockWeights"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "base_block",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_block",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "per_class",
                  "type": 179,
                  "typeName": "PerDispatchClass<WeightsPerClass>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 179,
        "type": {
          "path": ["frame_support", "weights", "PerDispatchClass"],
          "params": [
            {"name": "T", "type": 180}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "normal", "type": 180, "typeName": "T", "docs": []},
                {
                  "name": "operational",
                  "type": 180,
                  "typeName": "T",
                  "docs": []
                },
                {"name": "mandatory", "type": 180, "typeName": "T", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 180,
        "type": {
          "path": ["frame_system", "limits", "WeightsPerClass"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "base_extrinsic",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_extrinsic",
                  "type": 181,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "max_total",
                  "type": 181,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "type": 181,
                  "typeName": "Option<Weight>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 181,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 8}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 8, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 182,
        "type": {
          "path": ["frame_system", "limits", "BlockLength"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "max",
                  "type": 183,
                  "typeName": "PerDispatchClass<u32>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 183,
        "type": {
          "path": ["frame_support", "weights", "PerDispatchClass"],
          "params": [
            {"name": "T", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "normal", "type": 4, "typeName": "T", "docs": []},
                {"name": "operational", "type": 4, "typeName": "T", "docs": []},
                {"name": "mandatory", "type": 4, "typeName": "T", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 184,
        "type": {
          "path": ["frame_support", "weights", "RuntimeDbWeight"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": "read", "type": 8, "typeName": "Weight", "docs": []},
                {"name": "write", "type": 8, "typeName": "Weight", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 185,
        "type": {
          "path": ["sp_version", "RuntimeVersion"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "spec_name",
                  "type": 165,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "impl_name",
                  "type": 165,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "authoring_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "spec_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "impl_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "apis",
                  "type": 186,
                  "typeName": "ApisVec",
                  "docs": []
                },
                {
                  "name": "transaction_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 186,
        "type": {
          "path": ["Cow"],
          "params": [
            {"name": "T", "type": 187}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 187, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 187,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 188}
          },
          "docs": []
        }
      },
      {
        "id": 188,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [84, 4]
          },
          "docs": []
        }
      },
      {
        "id": 189,
        "type": {
          "path": ["frame_system", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidSpecName",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The name of specification does not match between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "SpecVersionNeedsToIncrease",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The specification version is not allowed to decrease between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "FailedToExtractRuntimeVersion",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Failed to extract the runtime version from the new runtime.",
                    "",
                    "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                  ]
                },
                {
                  "name": "NonDefaultComposite",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Suicide called when the account has non-default composite data."
                  ]
                },
                {
                  "name": "NonZeroRefCount",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There is a non-zero reference count preventing the account from being purged."
                  ]
                }
              ]
            }
          },
          "docs": ["Error for the System pallet"]
        }
      },
      {
        "id": 190,
        "type": {
          "path": ["pallet_timestamp", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set",
                  "fields": [
                    {
                      "name": "now",
                      "type": 72,
                      "typeName": "T::Moment",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the current time.",
                    "",
                    "This call should be invoked exactly once per block. It will panic at the finalization",
                    "phase, if this call hasn't been invoked by that time.",
                    "",
                    "The timestamp should be greater than the previous one by the amount specified by",
                    "`MinimumPeriod`.",
                    "",
                    "The dispatch origin for this call must be `Inherent`.",
                    "",
                    "# <weight>",
                    "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                    "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                    "  `on_finalize`)",
                    "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 191,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 192}
          },
          "docs": []
        }
      },
      {
        "id": 192,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 193}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 193, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 193,
        "type": {
          "path": ["pallet_scheduler", "ScheduledV2"],
          "params": [
            {"name": "Call", "type": 194},
            {"name": "BlockNumber", "type": 4},
            {"name": "PalletsOrigin", "type": 108},
            {"name": "AccountId", "type": 0}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "maybe_id",
                  "type": 30,
                  "typeName": "Option<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {"name": "call", "type": 194, "typeName": "Call", "docs": []},
                {
                  "name": "maybe_periodic",
                  "type": 196,
                  "typeName": "Option<schedule::Period<BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 108,
                  "typeName": "PalletsOrigin",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 194,
        "type": {
          "path": ["acala_runtime", "Call"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "name": null,
                      "type": 173,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Timestamp",
                  "fields": [
                    {
                      "name": null,
                      "type": 190,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "name": null,
                      "type": 195,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "name": null,
                      "type": 197,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "name": null,
                      "type": 199,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "name": null,
                      "type": 201,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TransactionPause",
                  "fields": [
                    {
                      "name": null,
                      "type": 203,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionPause, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "IdleScheduler",
                  "fields": [
                    {
                      "name": null,
                      "type": 204,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<IdleScheduler, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "name": null,
                      "type": 206,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Currencies",
                  "fields": [
                    {
                      "name": null,
                      "type": 208,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "name": null,
                      "type": 209,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "TransactionPayment",
                  "fields": [
                    {
                      "name": null,
                      "type": 211,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionPayment, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "name": null,
                      "type": 213,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "name": null,
                      "type": 214,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Tips",
                  "fields": [
                    {
                      "name": null,
                      "type": 215,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ParachainSystem",
                  "fields": [
                    {
                      "name": null,
                      "type": 216,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "CollatorSelection",
                  "fields": [
                    {
                      "name": null,
                      "type": 228,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "name": null,
                      "type": 229,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SessionManager",
                  "fields": [
                    {
                      "name": null,
                      "type": 233,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SessionManager, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "PolkadotXcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 234,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "DmpQueue",
                  "fields": [
                    {
                      "name": null,
                      "type": 260,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "XTokens",
                  "fields": [
                    {
                      "name": null,
                      "type": 261,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "OrmlXcm",
                  "fields": [
                    {
                      "name": null,
                      "type": 263,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OrmlXcm, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Authority",
                  "fields": [
                    {
                      "name": null,
                      "type": 264,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authority, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "GeneralCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 267,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GeneralCouncil, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "GeneralCouncilMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 268,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GeneralCouncilMembership, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "FinancialCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 269,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FinancialCouncil, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "FinancialCouncilMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 270,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FinancialCouncilMembership, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "HomaCouncil",
                  "fields": [
                    {
                      "name": null,
                      "type": 271,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<HomaCouncil, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "HomaCouncilMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 272,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<HomaCouncilMembership, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "TechnicalCommittee",
                  "fields": [
                    {
                      "name": null,
                      "type": 273,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "TechnicalCommitteeMembership",
                  "fields": [
                    {
                      "name": null,
                      "type": 274,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommitteeMembership, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 68,
                  "docs": []
                },
                {
                  "name": "Democracy",
                  "fields": [
                    {
                      "name": null,
                      "type": 275,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 69,
                  "docs": []
                },
                {
                  "name": "AcalaOracle",
                  "fields": [
                    {
                      "name": null,
                      "type": 279,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AcalaOracle, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "OperatorMembershipAcala",
                  "fields": [
                    {
                      "name": null,
                      "type": 280,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OperatorMembershipAcala, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Auction",
                  "fields": [
                    {
                      "name": null,
                      "type": 281,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auction, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "Rewards",
                  "fields": [
                    {
                      "name": null,
                      "type": 282,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Rewards, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 81,
                  "docs": []
                },
                {
                  "name": "Prices",
                  "fields": [
                    {
                      "name": null,
                      "type": 283,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Prices, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "Dex",
                  "fields": [
                    {
                      "name": null,
                      "type": 284,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Dex, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 91,
                  "docs": []
                },
                {
                  "name": "AuctionManager",
                  "fields": [
                    {
                      "name": null,
                      "type": 285,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuctionManager, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "Loans",
                  "fields": [
                    {
                      "name": null,
                      "type": 286,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Loans, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "Honzon",
                  "fields": [
                    {
                      "name": null,
                      "type": 287,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Honzon, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "CdpTreasury",
                  "fields": [
                    {
                      "name": null,
                      "type": 288,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CdpTreasury, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "CdpEngine",
                  "fields": [
                    {
                      "name": null,
                      "type": 289,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CdpEngine, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "EmergencyShutdown",
                  "fields": [
                    {
                      "name": null,
                      "type": 292,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EmergencyShutdown, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "HomaLite",
                  "fields": [
                    {
                      "name": null,
                      "type": 293,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<HomaLite, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 115,
                  "docs": []
                },
                {
                  "name": "Incentives",
                  "fields": [
                    {
                      "name": null,
                      "type": 296,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Incentives, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                },
                {
                  "name": "NFT",
                  "fields": [
                    {
                      "name": null,
                      "type": 301,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NFT, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 121,
                  "docs": []
                },
                {
                  "name": "EVM",
                  "fields": [
                    {
                      "name": null,
                      "type": 306,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 130,
                  "docs": []
                },
                {
                  "name": "EvmAccounts",
                  "fields": [
                    {
                      "name": null,
                      "type": 308,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EvmAccounts, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 132,
                  "docs": []
                },
                {
                  "name": "Sudo",
                  "fields": [
                    {
                      "name": null,
                      "type": 311,
                      "typeName":
                          "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 195,
        "type": {
          "path": ["pallet_scheduler", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "schedule",
                  "fields": [
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 196,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Anonymously schedule a task.",
                    "",
                    "# <weight>",
                    "- S = Number of already scheduled calls",
                    "- Base Weight: 22.29 + .126 * S µs",
                    "- DB Weight:",
                    "    - Read: Agenda",
                    "    - Write: Agenda",
                    "- Will use base weight of 25 which should be good for up to 30 scheduled calls",
                    "# </weight>"
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {"name": "index", "type": 4, "typeName": "u32", "docs": []}
                  ],
                  "index": 1,
                  "docs": [
                    "Cancel an anonymously scheduled task.",
                    "",
                    "# <weight>",
                    "- S = Number of already scheduled calls",
                    "- Base Weight: 22.15 + 2.869 * S µs",
                    "- DB Weight:",
                    "    - Read: Agenda",
                    "    - Write: Agenda, Lookup",
                    "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                    "# </weight>"
                  ]
                },
                {
                  "name": "schedule_named",
                  "fields": [
                    {
                      "name": "id",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 196,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Schedule a named task.",
                    "",
                    "# <weight>",
                    "- S = Number of already scheduled calls",
                    "- Base Weight: 29.6 + .159 * S µs",
                    "- DB Weight:",
                    "    - Read: Agenda, Lookup",
                    "    - Write: Agenda, Lookup",
                    "- Will use base weight of 35 which should be good for more than 30 scheduled calls",
                    "# </weight>"
                  ]
                },
                {
                  "name": "cancel_named",
                  "fields": [
                    {
                      "name": "id",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a named scheduled task.",
                    "",
                    "# <weight>",
                    "- S = Number of already scheduled calls",
                    "- Base Weight: 24.91 + 2.907 * S µs",
                    "- DB Weight:",
                    "    - Read: Agenda, Lookup",
                    "    - Write: Agenda, Lookup",
                    "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                    "# </weight>"
                  ]
                },
                {
                  "name": "schedule_after",
                  "fields": [
                    {
                      "name": "after",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 196,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Anonymously schedule a task after a delay.",
                    "",
                    "# <weight>",
                    "Same as [`schedule`].",
                    "# </weight>"
                  ]
                },
                {
                  "name": "schedule_named_after",
                  "fields": [
                    {
                      "name": "id",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "after",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 196,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Schedule a named task after a delay.",
                    "",
                    "# <weight>",
                    "Same as [`schedule_named`](Self::schedule_named).",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 196,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 29}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 29, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 197,
        "type": {
          "path": ["pallet_utility", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "batch",
                  "fields": [
                    {
                      "name": "calls",
                      "type": 198,
                      "typeName": "Vec<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Send a batch of dispatch calls.",
                    "",
                    "May be called from any origin.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then call are dispatch without checking origin filter. (This includes",
                    "bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "# <weight>",
                    "- Complexity: O(C) where C is the number of calls to be batched.",
                    "# </weight>",
                    "",
                    "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                    "event is deposited. If a call failed and the batch was interrupted, then the",
                    "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                    "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                    "event is deposited."
                  ]
                },
                {
                  "name": "as_derivative",
                  "fields": [
                    {
                      "name": "index",
                      "type": 38,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Send a call through an indexed pseudonym of the sender.",
                    "",
                    "Filter from origin are passed along. The call will be dispatched with an origin which",
                    "use the same filter as the origin of this call.",
                    "",
                    "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                    "because you expect `proxy` to have been used prior in the call stack and you do not want",
                    "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                    "in the Multisig pallet instead.",
                    "",
                    "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                    "",
                    "The dispatch origin for this call must be _Signed_."
                  ]
                },
                {
                  "name": "batch_all",
                  "fields": [
                    {
                      "name": "calls",
                      "type": 198,
                      "typeName": "Vec<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Send a batch of dispatch calls and atomically execute them.",
                    "The whole transaction will rollback and fail if any of the calls failed.",
                    "",
                    "May be called from any origin.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then call are dispatch without checking origin filter. (This includes",
                    "bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "# <weight>",
                    "- Complexity: O(C) where C is the number of calls to be batched.",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 198,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 194}
          },
          "docs": []
        }
      },
      {
        "id": 199,
        "type": {
          "path": ["pallet_multisig", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "as_multi_threshold_1",
                  "fields": [
                    {
                      "name": "other_signatories",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Immediately dispatch a multi-signature call using a single approval from the caller.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `other_signatories`: The accounts (other than the sender) who are part of the",
                    "multi-signature, but do not participate in the approval process.",
                    "- `call`: The call to be executed.",
                    "",
                    "Result is equivalent to the dispatched result.",
                    "",
                    "# <weight>",
                    "O(Z + C) where Z is the length of the call and C its execution weight.",
                    "-------------------------------",
                    "- DB Weight: None",
                    "- Plus Call Weight",
                    "# </weight>"
                  ]
                },
                {
                  "name": "as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 38,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "type": 200,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 10,
                      "typeName": "OpaqueCall",
                      "docs": []
                    },
                    {
                      "name": "store_call",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "If there are enough, then dispatch the call.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call`: The call to be executed.",
                    "",
                    "NOTE: Unless this is the final approval, you will generally want to use",
                    "`approve_as_multi` instead, since it only requires a hash of the call.",
                    "",
                    "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                    "on success, result is `Ok` and the result from the interior call, if it was executed,",
                    "may be found in the deposited `MultisigExecuted` event.",
                    "",
                    "# <weight>",
                    "- `O(S + Z + Call)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- The weight of the `call`.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                    "-------------------------------",
                    "- DB Weight:",
                    "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                    "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                    "- Plus Call Weight",
                    "# </weight>"
                  ]
                },
                {
                  "name": "approve_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 38,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "type": 200,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                    "",
                    "# <weight>",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                    "----------------------------------",
                    "- DB Weight:",
                    "    - Read: Multisig Storage, [Caller Account]",
                    "    - Write: Multisig Storage, [Caller Account]",
                    "# </weight>"
                  ]
                },
                {
                  "name": "cancel_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 38,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "type": 35,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                    "for this operation will be unreserved on success.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                    "transaction for this dispatch.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "# <weight>",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- One event.",
                    "- I/O: 1 read `O(S)`, one remove.",
                    "- Storage: removes one item.",
                    "----------------------------------",
                    "- DB Weight:",
                    "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                    "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 200,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 35}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 35, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 201,
        "type": {
          "path": ["pallet_proxy", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "proxy",
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "type": 202,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorised for through",
                    "`add_proxy`.",
                    "",
                    "Removes any corresponding announcement(s).",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account.",
                    "",
                    "# <weight>",
                    "Weight is a function of the number of proxies the user has (P).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "add_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 37,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register a proxy account for the sender that is able to make calls on its behalf.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to make a proxy.",
                    "- `proxy_type`: The permissions allowed for this proxy account.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero.",
                    "",
                    "# <weight>",
                    "Weight is a function of the number of proxies the user has (P).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "remove_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 37,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Unregister a proxy account for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                    "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                    "",
                    "# <weight>",
                    "Weight is a function of the number of proxies the user has (P).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "remove_proxies",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Unregister all proxy accounts for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                    "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                    "",
                    "# <weight>",
                    "Weight is a function of the number of proxies the user has (P).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "anonymous",
                  "fields": [
                    {
                      "name": "proxy_type",
                      "type": 37,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {"name": "index", "type": 38, "typeName": "u16", "docs": []}
                  ],
                  "index": 4,
                  "docs": [
                    "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                    "initialize it with a proxy of `proxy_type` for `origin` sender.",
                    "",
                    "Requires a `Signed` origin.",
                    "",
                    "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                    "new account. This will almost always be the most permissive `ProxyType` possible to",
                    "allow for maximum flexibility.",
                    "- `index`: A disambiguation index, in case this is called multiple times in the same",
                    "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                    "want to use `0`.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero.",
                    "",
                    "Fails with `Duplicate` if this has already been called in this transaction, from the",
                    "same sender, with the same parameters.",
                    "",
                    "Fails if there are insufficient funds to pay for deposit.",
                    "",
                    "# <weight>",
                    "Weight is a function of the number of proxies the user has (P).",
                    "# </weight>",
                    "TODO: Might be over counting 1 read"
                  ]
                },
                {
                  "name": "kill_anonymous",
                  "fields": [
                    {
                      "name": "spawner",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 37,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 38,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "type": 70,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "ext_index",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Removes a previously spawned anonymous proxy.",
                    "",
                    "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                    "inaccessible.",
                    "",
                    "Requires a `Signed` origin, and the sender account must have been created by a call to",
                    "`anonymous` with corresponding parameters.",
                    "",
                    "- `spawner`: The account that originally called `anonymous` to create this account.",
                    "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                    "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                    "- `height`: The height of the chain when the call to `anonymous` was processed.",
                    "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                    "",
                    "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                    "account whose `anonymous` call has corresponding parameters.",
                    "",
                    "# <weight>",
                    "Weight is a function of the number of proxies the user has (P).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "announce",
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Publish the hash of a proxy-call that will be made in the future.",
                    "",
                    "This must be called some number of blocks before the corresponding `proxy` is attempted",
                    "if the delay associated with the proxy relationship is greater than zero.",
                    "",
                    "No more than `MaxPending` announcements may be made at any one time.",
                    "",
                    "This will take a deposit of `AnnouncementDepositFactor` as well as",
                    "`AnnouncementDepositBase` if there are no other pending announcements.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account.",
                    "",
                    "# <weight>",
                    "Weight is a function of:",
                    "- A: the number of announcements made.",
                    "- P: the number of proxies the user has.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "remove_announcement",
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Remove a given announcement.",
                    "",
                    "May be called by a proxy account to remove a call they previously announced and return",
                    "the deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account.",
                    "",
                    "# <weight>",
                    "Weight is a function of:",
                    "- A: the number of announcements made.",
                    "- P: the number of proxies the user has.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "reject_announcement",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Remove the given announcement of a delegate.",
                    "",
                    "May be called by a target (proxied) account to remove a call that one of their delegates",
                    "(`delegate`) has announced they want to execute. The deposit is returned.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `delegate`: The account that previously announced the call.",
                    "- `call_hash`: The hash of the call to be made.",
                    "",
                    "# <weight>",
                    "Weight is a function of:",
                    "- A: the number of announcements made.",
                    "- P: the number of proxies the user has.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "proxy_announced",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "type": 202,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorized for through",
                    "`add_proxy`.",
                    "",
                    "Removes any corresponding announcement(s).",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account.",
                    "",
                    "# <weight>",
                    "Weight is a function of:",
                    "- A: the number of announcements made.",
                    "- P: the number of proxies the user has.",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 202,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 37}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 37, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 203,
        "type": {
          "path": ["module_transaction_pause", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "pause_transaction",
                  "fields": [
                    {
                      "name": "pallet_name",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "function_name",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "unpause_transaction",
                  "fields": [
                    {
                      "name": "pallet_name",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "function_name",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 204,
        "type": {
          "path": ["module_idle_scheduler", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "schedule_task",
                  "fields": [
                    {
                      "name": "task",
                      "type": 205,
                      "typeName": "T::Task",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 205,
        "type": {
          "path": ["acala_runtime", "ScheduledTasks"],
          "params": [],
          "def": {
            "Variant": {"variants": []}
          },
          "docs": []
        }
      },
      {
        "id": 206,
        "type": {
          "path": ["pallet_balances", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transfer some liquid free balance to another account.",
                    "",
                    "`transfer` will set the `FreeBalance` of the sender and receiver.",
                    "It will decrease the total issuance of the system by the `TransferFee`.",
                    "If the sender's account is below the existential deposit as a result",
                    "of the transfer, the account will be reaped.",
                    "",
                    "The dispatch origin for this call must be `Signed` by the transactor.",
                    "",
                    "# <weight>",
                    "- Dependent on arguments but not critical, given proper implementations for input config",
                    "  types. See related functions below.",
                    "- It contains a limited number of reads and writes internally and no complex",
                    "  computation.",
                    "",
                    "Related functions:",
                    "",
                    "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                    "  - Transferring balances to accounts that did not exist before will cause",
                    "    `T::OnNewAccount::on_new_account` to be called.",
                    "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                    "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                    "    that the transfer will not kill the origin account.",
                    "---------------------------------",
                    "- Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                    "- DB Weight: 1 Read and 1 Write to destination account",
                    "- Origin account is already in memory, so no DB operations for them.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "set_balance",
                  "fields": [
                    {
                      "name": "who",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "type": 53,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "new_reserved",
                      "type": 53,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the balances of a given account.",
                    "",
                    "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                    "also decrease the total issuance of the system (`TotalIssuance`).",
                    "If the new free or reserved balance is below the existential deposit,",
                    "it will reset the account nonce (`frame_system::AccountNonce`).",
                    "",
                    "The dispatch origin for this call is `root`.",
                    "",
                    "# <weight>",
                    "- Independent of the arguments.",
                    "- Contains a limited number of reads and writes.",
                    "---------------------",
                    "- Base Weight:",
                    "    - Creating: 27.56 µs",
                    "    - Killing: 35.11 µs",
                    "- DB Weight: 1 Read, 1 Write to `who`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Exactly as `transfer`, except the origin must be root and the source account may be",
                    "specified.",
                    "# <weight>",
                    "- Same as transfer, but additional read and write because the source account is not",
                    "  assumed to be in the overlay.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "transfer_keep_alive",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                    "origin account.",
                    "",
                    "99% of the time you want [`transfer`] instead.",
                    "",
                    "[`transfer`]: struct.Pallet.html#method.transfer",
                    "# <weight>",
                    "- Cheaper than transfer because account cannot be killed.",
                    "- Base Weight: 51.4 µs",
                    "- DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                    "#</weight>"
                  ]
                },
                {
                  "name": "transfer_all",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "keep_alive",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Transfer the entire transferable balance from the caller account.",
                    "",
                    "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                    "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                    "transferred by this function. To ensure that this function results in a killed account,",
                    "you might need to prepare the account by removing any reference counters, storage",
                    "deposits, etc...",
                    "",
                    "The dispatch origin of this call must be Signed.",
                    "",
                    "- `dest`: The recipient of the transfer.",
                    "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                    "  of the funds the account has, causing the sender account to be killed (false), or",
                    "  transfer everything except at least the existential deposit, which will guarantee to",
                    "  keep the sender account alive (true). # <weight>",
                    "- O(1). Just like transfer, but reading the user's transferable balance first.",
                    "  #</weight>"
                  ]
                },
                {
                  "name": "force_unreserve",
                  "fields": [
                    {
                      "name": "who",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Unreserve some balance from a user by force.",
                    "",
                    "Can only be called by ROOT."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 207,
        "type": {
          "path": ["sp_runtime", "multiaddress", "MultiAddress"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "AccountIndex", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Id",
                  "fields": [
                    {
                      "name": null,
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "name": null,
                      "type": 70,
                      "typeName": "AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw",
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Address32",
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Address20",
                  "fields": [
                    {
                      "name": null,
                      "type": 48,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 208,
        "type": {
          "path": ["module_currencies", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transfer some balance to another account under `currency_id`.",
                    "",
                    "The dispatch origin for this call must be `Signed` by the",
                    "transactor."
                  ]
                },
                {
                  "name": "transfer_native_currency",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Transfer some native currency to another account.",
                    "",
                    "The dispatch origin for this call must be `Signed` by the",
                    "transactor."
                  ]
                },
                {
                  "name": "update_balance",
                  "fields": [
                    {
                      "name": "who",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 50,
                      "typeName": "AmountOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "update amount of account `who` under `currency_id`.",
                    "",
                    "The dispatch origin of this call must be _Root_."
                  ]
                },
                {
                  "name": "sweep_dust",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "accounts",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 209,
        "type": {
          "path": ["orml_vesting", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "claim", "fields": [], "index": 0, "docs": []},
                {
                  "name": "vested_transfer",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "schedule",
                      "type": 52,
                      "typeName": "VestingScheduleOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "update_vesting_schedules",
                  "fields": [
                    {
                      "name": "who",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "vesting_schedules",
                      "type": 210,
                      "typeName": "Vec<VestingScheduleOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "claim_for",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 210,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 52}
          },
          "docs": []
        }
      },
      {
        "id": 211,
        "type": {
          "path": ["module_transaction_payment", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_alternative_fee_swap_path",
                  "fields": [
                    {
                      "name": "fee_swap_path",
                      "type": 212,
                      "typeName": "Option<Vec<CurrencyId>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Set fee swap path"]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 212,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 139}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 139, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 213,
        "type": {
          "path": ["pallet_treasury", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "propose_spend",
                  "fields": [
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Put forward a suggestion for spending. A deposit proportional to the value",
                    "is reserved and slashed if the proposal is rejected. It is returned once the",
                    "proposal is awarded.",
                    "",
                    "# <weight>",
                    "- Complexity: O(1)",
                    "- DbReads: `ProposalCount`, `origin account`",
                    "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "reject_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Reject a proposed spend. The original deposit will be slashed.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "",
                    "# <weight>",
                    "- Complexity: O(1)",
                    "- DbReads: `Proposals`, `rejected proposer account`",
                    "- DbWrites: `Proposals`, `rejected proposer account`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "approve_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                    "and the original deposit will be returned.",
                    "",
                    "May only be called from `T::ApproveOrigin`.",
                    "",
                    "# <weight>",
                    "- Complexity: O(1).",
                    "- DbReads: `Proposals`, `Approvals`",
                    "- DbWrite: `Approvals`",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 214,
        "type": {
          "path": ["pallet_bounties", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "propose_bounty",
                  "fields": [
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a new bounty.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                    "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                    "or slashed when rejected.",
                    "",
                    "- `curator`: The curator account whom will manage this bounty.",
                    "- `fee`: The curator fee.",
                    "- `value`: The total payment amount of this bounty, curator fee included.",
                    "- `description`: The description of this bounty."
                  ]
                },
                {
                  "name": "approve_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                    "and the original deposit will be returned.",
                    "",
                    "May only be called from `T::ApproveOrigin`.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "propose_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "curator",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Assign a curator to a funded bounty.",
                    "",
                    "May only be called from `T::ApproveOrigin`.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "unassign_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Unassign curator from a bounty.",
                    "",
                    "This function can only be called by the `RejectOrigin` a signed origin.",
                    "",
                    "If this function is called by the `RejectOrigin`, we assume that the curator is",
                    "malicious or inactive. As a result, we will slash the curator when possible.",
                    "",
                    "If the origin is the curator, we take this as a sign they are unable to do their job and",
                    "they willingly give up. We could slash them, but for now we allow them to recover their",
                    "deposit and exit without issue. (We may want to change this if it is abused.)",
                    "",
                    "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                    "anyone in the community to call out that a curator is not doing their due diligence, and",
                    "we should pick a new curator. In this case the curator should also be slashed.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "accept_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Accept the curator role for a bounty.",
                    "A deposit will be reserved from curator and refund upon successful payout.",
                    "",
                    "May only be called from the curator.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "award_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                    "after a delay.",
                    "",
                    "The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to award.",
                    "- `beneficiary`: The beneficiary account whom will receive the payout.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "claim_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Claim the payout from an awarded bounty after payout delay.",
                    "",
                    "The dispatch origin for this call must be the beneficiary of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to claim.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "close_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                    "the curator deposit will be unreserved if possible.",
                    "",
                    "Only `T::RejectOrigin` is able to cancel a bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to cancel.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                },
                {
                  "name": "extend_bounty_expiry",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 70,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "remark",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Extend the expiry time of an active bounty.",
                    "",
                    "The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to extend.",
                    "- `remark`: additional information.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 215,
        "type": {
          "path": ["pallet_tips", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "report_awesome",
                  "fields": [
                    {
                      "name": "reason",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                    "`DataDepositPerByte` for each byte in `reason`.",
                    "",
                    "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                    "  a UTF-8-encoded URL.",
                    "- `who`: The account which should be credited for the tip.",
                    "",
                    "Emits `NewTip` if successful.",
                    "",
                    "# <weight>",
                    "- Complexity: `O(R)` where `R` length of `reason`.",
                    "  - encoding and hashing of 'reason'",
                    "- DbReads: `Reasons`, `Tips`",
                    "- DbWrites: `Reasons`, `Tips`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "retract_tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                    "",
                    "If successful, the original deposit will be unreserved.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                    "must have been reported by the signing account through `report_awesome` (and not",
                    "through `tip_new`).",
                    "",
                    "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                    "",
                    "Emits `TipRetracted` if successful.",
                    "",
                    "# <weight>",
                    "- Complexity: `O(1)`",
                    "  - Depends on the length of `T::Hash` which is fixed.",
                    "- DbReads: `Tips`, `origin account`",
                    "- DbWrites: `Reasons`, `Tips`, `origin account`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "tip_new",
                  "fields": [
                    {
                      "name": "reason",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "tip_value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Give a tip for something new; no finder's fee will be taken.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                    "member of the `Tippers` set.",
                    "",
                    "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                    "  a UTF-8-encoded URL.",
                    "- `who`: The account which should be credited for the tip.",
                    "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                    "  value of active tippers will be given to the `who`.",
                    "",
                    "Emits `NewTip` if successful.",
                    "",
                    "# <weight>",
                    "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                    "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                    "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                    "    `T::Tippers`.",
                    "  - `O(R)`: hashing and encoding of reason of length `R`",
                    "- DbReads: `Tippers`, `Reasons`",
                    "- DbWrites: `Reasons`, `Tips`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "tip_value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Declare a tip value for an already-open tip.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                    "member of the `Tippers` set.",
                    "",
                    "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                    "  account ID.",
                    "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                    "  value of active tippers will be given to the `who`.",
                    "",
                    "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                    "has started.",
                    "",
                    "# <weight>",
                    "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                    "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                    "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                    "",
                    "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                    "  is weighted as if almost full i.e of length `T-1`.",
                    "- DbReads: `Tippers`, `Tips`",
                    "- DbWrites: `Tips`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "close_tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Close and payout a tip.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "The tip identified by `hash` must have finished its countdown period.",
                    "",
                    "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                    "",
                    "# <weight>",
                    "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                    "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                    "  depends on the implementation of `T::Tippers`.",
                    "- DbReads: `Tips`, `Tippers`, `tip finder`",
                    "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "slash_tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove and slash an already-open tip.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "",
                    "As a result, the finder is slashed and the deposits are lost.",
                    "",
                    "Emits `TipSlashed` if successful.",
                    "",
                    "# <weight>",
                    "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                    "  The actual cost depends on the implementation of `T::Tippers`.",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 216,
        "type": {
          "path": ["cumulus_pallet_parachain_system", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_validation_data",
                  "fields": [
                    {
                      "name": "data",
                      "type": 217,
                      "typeName": "ParachainInherentData",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the current validation data.",
                    "",
                    "This should be invoked exactly once per block. It will panic at the finalization",
                    "phase if the call was not invoked.",
                    "",
                    "The dispatch origin for this call must be `Inherent`",
                    "",
                    "As a side effect, this function upgrades the current validation function",
                    "if the appropriate time has come."
                  ]
                },
                {
                  "name": "sudo_send_upward_message",
                  "fields": [
                    {
                      "name": "message",
                      "type": 10,
                      "typeName": "UpwardMessage",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "authorize_upgrade",
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "enact_authorized_upgrade",
                  "fields": [
                    {
                      "name": "code",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 217,
        "type": {
          "path": [
            "cumulus_primitives_parachain_inherent",
            "ParachainInherentData"
          ],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "validation_data",
                  "type": 218,
                  "typeName": "PersistedValidationData",
                  "docs": []
                },
                {
                  "name": "relay_chain_state",
                  "type": 220,
                  "typeName": "sp_trie::StorageProof",
                  "docs": []
                },
                {
                  "name": "downward_messages",
                  "type": 221,
                  "typeName": "Vec<InboundDownwardMessage>",
                  "docs": []
                },
                {
                  "name": "horizontal_messages",
                  "type": 223,
                  "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 218,
        "type": {
          "path": ["polkadot_primitives", "v1", "PersistedValidationData"],
          "params": [
            {"name": "H", "type": 9},
            {"name": "N", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "parent_head",
                  "type": 219,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "relay_parent_number",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "relay_parent_storage_root",
                  "type": 9,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "max_pov_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 219,
        "type": {
          "path": ["polkadot_parachain", "primitives", "HeadData"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 10, "typeName": "Vec<u8>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 220,
        "type": {
          "path": ["sp_trie", "storage_proof", "StorageProof"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "trie_nodes",
                  "type": 177,
                  "typeName": "Vec<Vec<u8>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 221,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 222}
          },
          "docs": []
        }
      },
      {
        "id": 222,
        "type": {
          "path": ["polkadot_core_primitives", "InboundDownwardMessage"],
          "params": [
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "sent_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "msg",
                  "type": 10,
                  "typeName": "DownwardMessage",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 223,
        "type": {
          "path": ["BTreeMap"],
          "params": [
            {"name": "K", "type": 112},
            {"name": "V", "type": 224}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 226, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 224,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 225}
          },
          "docs": []
        }
      },
      {
        "id": 225,
        "type": {
          "path": ["polkadot_core_primitives", "InboundHrmpMessage"],
          "params": [
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "sent_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 226,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 227}
          },
          "docs": []
        }
      },
      {
        "id": 227,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [112, 224]
          },
          "docs": []
        }
      },
      {
        "id": 228,
        "type": {
          "path": ["module_collator_selection", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_invulnerables",
                  "fields": [
                    {
                      "name": "new",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "set_desired_candidates",
                  "fields": [
                    {"name": "max", "type": 70, "typeName": "u32", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "set_candidacy_bond",
                  "fields": [
                    {
                      "name": "bond",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "register_as_candidate",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "register_candidate",
                  "fields": [
                    {
                      "name": "new_candidate",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {"name": "leave_intent", "fields": [], "index": 5, "docs": []},
                {"name": "withdraw_bond", "fields": [], "index": 6, "docs": []}
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 229,
        "type": {
          "path": ["pallet_session", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_keys",
                  "fields": [
                    {
                      "name": "keys",
                      "type": 230,
                      "typeName": "T::Keys",
                      "docs": []
                    },
                    {
                      "name": "proof",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Sets the session key(s) of the function caller to `keys`.",
                    "Allows an account to set its session key prior to becoming a validator.",
                    "This doesn't take effect until the next session.",
                    "",
                    "The dispatch origin of this function must be signed.",
                    "",
                    "# <weight>",
                    "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                    "  `T::Keys::key_ids()` which is fixed.",
                    "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                    "- DbWrites: `origin account`, `NextKeys`",
                    "- DbReads per key id: `KeyOwner`",
                    "- DbWrites per key id: `KeyOwner`",
                    "# </weight>"
                  ]
                },
                {
                  "name": "purge_keys",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Removes any session key(s) of the function caller.",
                    "",
                    "This doesn't take effect until the next session.",
                    "",
                    "The dispatch origin of this function must be Signed and the account must be either be",
                    "convertible to a validator ID using the chain's typical addressing system (this usually",
                    "means being a controller account) or directly convertible into a validator ID (which",
                    "usually means being a stash account).",
                    "",
                    "# <weight>",
                    "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                    "  of `T::Keys::key_ids()` which is fixed.",
                    "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                    "- DbWrites: `NextKeys`, `origin account`",
                    "- DbWrites per key id: `KeyOwner`",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 230,
        "type": {
          "path": ["acala_runtime", "SessionKeys"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "aura",
                  "type": 231,
                  "typeName":
                      "<Aura as \$crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 231,
        "type": {
          "path": ["sp_consensus_aura", "sr25519", "app_sr25519", "Public"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 232,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 232,
        "type": {
          "path": ["sp_core", "sr25519", "Public"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 1, "typeName": "[u8; 32]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 233,
        "type": {
          "path": ["module_session_manager", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "schedule_session_duration",
                  "fields": [
                    {
                      "name": "start_session",
                      "type": 70,
                      "typeName": "SessionIndex",
                      "docs": []
                    },
                    {
                      "name": "duration",
                      "type": 70,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Schedule a new session duration in the specified session index.",
                    "",
                    "- `start_session`: the session index that the new change become effective.",
                    "- `duration`:  new session duration."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 234,
        "type": {
          "path": ["pallet_xcm", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "send",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": 235,
                      "typeName": "Box<VersionedXcm<()>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 96,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Teleport some assets from the local chain to some destination chain.",
                    "",
                    "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
                    "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
                    "local weights.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                    "  `dest` side. May not be empty.",
                    "- `dest_weight`: Equal to the total weight on `dest` of the XCM message",
                    "  `Teleport { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`."
                  ]
                },
                {
                  "name": "reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 96,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
                    "a notification XCM.",
                    "",
                    "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
                    "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
                    "local weights.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                    "  `dest` side.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees."
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "message",
                      "type": 246,
                      "typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Execute an XCM message from a local, signed, origin.",
                    "",
                    "An event is deposited indicating whether `msg` could be executed completely or only",
                    "partially.",
                    "",
                    "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                    "maximum amount of weight that the message could take to be executed, then no execution",
                    "attempt will be made.",
                    "",
                    "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                    "to completion; only that *some* of it was executed."
                  ]
                },
                {
                  "name": "force_xcm_version",
                  "fields": [
                    {
                      "name": "location",
                      "type": 67,
                      "typeName": "Box<MultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "xcm_version",
                      "type": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Extoll that a particular destination can be communicated with through a particular",
                    "version of XCM.",
                    "",
                    "- `origin`: Must be Root.",
                    "- `location`: The destination that is being described.",
                    "- `xcm_version`: The latest version of XCM that `location` supports."
                  ]
                },
                {
                  "name": "force_default_xcm_version",
                  "fields": [
                    {
                      "name": "maybe_xcm_version",
                      "type": 259,
                      "typeName": "Option<XcmVersion>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                    "version a destination can accept is unknown).",
                    "",
                    "- `origin`: Must be Root.",
                    "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                  ]
                },
                {
                  "name": "force_subscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Ask a location to notify us regarding their XCM version and any changes to it.",
                    "",
                    "- `origin`: Must be Root.",
                    "- `location`: The location to which we should subscribe for XCM version notifications."
                  ]
                },
                {
                  "name": "force_unsubscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Require that a particular destination should no longer notify us regarding any XCM",
                    "version changes.",
                    "",
                    "- `origin`: Must be Root.",
                    "- `location`: The location to which we are currently subscribed for XCM version",
                    "  notifications which we no longer desire."
                  ]
                },
                {
                  "name": "limited_reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 96,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 94,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
                    "a notification XCM.",
                    "",
                    "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                    "  `dest` side.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees.",
                    "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                  ]
                },
                {
                  "name": "limited_teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 96,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 94,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Teleport some assets from the local chain to some destination chain.",
                    "",
                    "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                    "  `dest` side. May not be empty.",
                    "- `dest_weight`: Equal to the total weight on `dest` of the XCM message",
                    "  `Teleport { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`.",
                    "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 235,
        "type": {
          "path": ["xcm", "VersionedXcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "V0",
                  "fields": [
                    {
                      "name": null,
                      "type": 236,
                      "typeName": "v0::Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": null,
                      "type": 241,
                      "typeName": "v1::Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [
                    {
                      "name": null,
                      "type": 75,
                      "typeName": "v2::Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 236,
        "type": {
          "path": ["xcm", "v0", "Xcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposit",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "TeleportAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 240,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 89,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 90,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "RelayedFrom",
                  "fields": [
                    {
                      "name": "who",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": 236,
                      "typeName": "alloc::boxed::Box<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 237,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 238}
          },
          "docs": []
        }
      },
      {
        "id": 238,
        "type": {
          "path": ["xcm", "v0", "order", "Order"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Null", "fields": [], "index": 0, "docs": []},
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 98,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {"name": "debt", "type": 8, "typeName": "u64", "docs": []},
                    {
                      "name": "halt_on_error",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 239,
                      "typeName": "Vec<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 239,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 236}
          },
          "docs": []
        }
      },
      {
        "id": 240,
        "type": {
          "path": ["xcm", "v0", "Response"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "name": null,
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 241,
        "type": {
          "path": ["xcm", "v1", "Xcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 245,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 89,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 90,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "RelayedFrom",
                  "fields": [
                    {
                      "name": "who",
                      "type": 68,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": 241,
                      "typeName": "alloc::boxed::Box<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 12,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 242,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 243}
          },
          "docs": []
        }
      },
      {
        "id": 243,
        "type": {
          "path": ["xcm", "v1", "order", "Order"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Noop", "fields": [], "index": 0, "docs": []},
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 80,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {"name": "debt", "type": 8, "typeName": "u64", "docs": []},
                    {
                      "name": "halt_on_error",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "instructions",
                      "type": 244,
                      "typeName": "Vec<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 244,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 241}
          },
          "docs": []
        }
      },
      {
        "id": 245,
        "type": {
          "path": ["xcm", "v1", "Response"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 246,
        "type": {
          "path": ["xcm", "VersionedXcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "V0",
                  "fields": [
                    {
                      "name": null,
                      "type": 247,
                      "typeName": "v0::Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": null,
                      "type": 252,
                      "typeName": "v1::Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [
                    {
                      "name": null,
                      "type": 256,
                      "typeName": "v2::Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 247,
        "type": {
          "path": ["xcm", "v0", "Xcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 248,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposit",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 248,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "TeleportAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 248,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 240,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 89,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 251,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "RelayedFrom",
                  "fields": [
                    {
                      "name": "who",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": 247,
                      "typeName": "alloc::boxed::Box<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 248,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 249}
          },
          "docs": []
        }
      },
      {
        "id": 249,
        "type": {
          "path": ["xcm", "v0", "order", "Order"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Null", "fields": [], "index": 0, "docs": []},
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 237,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 99,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 97,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 98,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {"name": "debt", "type": 8, "typeName": "u64", "docs": []},
                    {
                      "name": "halt_on_error",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 250,
                      "typeName": "Vec<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 250,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 247}
          },
          "docs": []
        }
      },
      {
        "id": 251,
        "type": {
          "path": ["xcm", "double_encoded", "DoubleEncoded"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "encoded",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 252,
        "type": {
          "path": ["xcm", "v1", "Xcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 253,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 253,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 253,
                      "typeName": "Vec<Order<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 245,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 89,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 251,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "RelayedFrom",
                  "fields": [
                    {
                      "name": "who",
                      "type": 68,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": 252,
                      "typeName": "alloc::boxed::Box<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 12,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 253,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 254}
          },
          "docs": []
        }
      },
      {
        "id": 254,
        "type": {
          "path": ["xcm", "v1", "order", "Order"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Noop", "fields": [], "index": 0, "docs": []},
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "effects",
                      "type": 242,
                      "typeName": "Vec<Order<()>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 80,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {"name": "debt", "type": 8, "typeName": "u64", "docs": []},
                    {
                      "name": "halt_on_error",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "instructions",
                      "type": 255,
                      "typeName": "Vec<Xcm<Call>>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 255,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 252}
          },
          "docs": []
        }
      },
      {
        "id": 256,
        "type": {
          "path": ["xcm", "v2", "Xcm"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 257,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 257,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 258}
          },
          "docs": []
        }
      },
      {
        "id": 258,
        "type": {
          "path": ["xcm", "v2", "Instruction"],
          "params": [
            {"name": "Call", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 86,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 89,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 251,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {"name": "ClearOrigin", "fields": [], "index": 10, "docs": []},
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "name": null,
                      "type": 68,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 75,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 91,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 80,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 94,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "name": null,
                      "type": 256,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "name": null,
                      "type": 256,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {"name": "ClearError", "fields": [], "index": 23, "docs": []},
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 78,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "type": 67,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {"name": null, "type": 72, "typeName": "u64", "docs": []}
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 72,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 259,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 4, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 260,
        "type": {
          "path": ["cumulus_pallet_dmp_queue", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "service_overweight",
                  "fields": [
                    {
                      "name": "index",
                      "type": 8,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Service a single overweight message.",
                    "",
                    "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                    "- `index`: The index of the overweight message to service.",
                    "- `weight_limit`: The amount of weight that message execution may take.",
                    "",
                    "Errors:",
                    "- `Unknown`: Message of `index` is unknown.",
                    "- `OverLimit`: Message execution may use greater than `weight_limit`.",
                    "",
                    "Events:",
                    "- `OverweightServiced`: On success."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 261,
        "type": {
          "path": ["orml_xtokens", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transfer native currencies.",
                    "",
                    "`dest_weight` is the weight for XCM execution on the dest chain, and",
                    "it would be charged from the transferred assets. If set below",
                    "requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                },
                {
                  "name": "transfer_multiasset",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 262,
                      "typeName": "Box<VersionedMultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 101,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Transfer `MultiAsset`.",
                    "",
                    "`dest_weight` is the weight for XCM execution on the dest chain, and",
                    "it would be charged from the transferred assets. If set below",
                    "requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 262,
        "type": {
          "path": ["xcm", "VersionedMultiAsset"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "V0",
                  "fields": [
                    {
                      "name": null,
                      "type": 98,
                      "typeName": "v0::MultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": null,
                      "type": 80,
                      "typeName": "v1::MultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 263,
        "type": {
          "path": ["orml_xcm", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "send_as_sovereign",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 67,
                      "typeName": "Box<MultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": 75,
                      "typeName": "Box<Xcm<()>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Send an XCM message as parachain sovereign."]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 264,
        "type": {
          "path": ["orml_authority", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "dispatch_as",
                  "fields": [
                    {
                      "name": "as_origin",
                      "type": 265,
                      "typeName": "T::AsOriginId",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<CallOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Dispatch a dispatchable on behalf of other origin"]
                },
                {
                  "name": "schedule_dispatch",
                  "fields": [
                    {
                      "name": "when",
                      "type": 266,
                      "typeName": "DispatchTime<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "Priority",
                      "docs": []
                    },
                    {
                      "name": "with_delayed_origin",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<CallOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Schedule a dispatchable to be dispatched at later block.",
                    "This is the only way to dispatch a call with `DelayedOrigin`."
                  ]
                },
                {
                  "name": "fast_track_scheduled_dispatch",
                  "fields": [
                    {
                      "name": "initial_origin",
                      "type": 108,
                      "typeName": "Box<T::PalletsOrigin>",
                      "docs": []
                    },
                    {
                      "name": "task_id",
                      "type": 4,
                      "typeName": "ScheduleTaskIndex",
                      "docs": []
                    },
                    {
                      "name": "when",
                      "type": 266,
                      "typeName": "DispatchTime<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Fast track a scheduled dispatchable."]
                },
                {
                  "name": "delay_scheduled_dispatch",
                  "fields": [
                    {
                      "name": "initial_origin",
                      "type": 108,
                      "typeName": "Box<T::PalletsOrigin>",
                      "docs": []
                    },
                    {
                      "name": "task_id",
                      "type": 4,
                      "typeName": "ScheduleTaskIndex",
                      "docs": []
                    },
                    {
                      "name": "additional_delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["Delay a scheduled dispatchable."]
                },
                {
                  "name": "cancel_scheduled_dispatch",
                  "fields": [
                    {
                      "name": "initial_origin",
                      "type": 108,
                      "typeName": "Box<T::PalletsOrigin>",
                      "docs": []
                    },
                    {
                      "name": "task_id",
                      "type": 4,
                      "typeName": "ScheduleTaskIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["Cancel a scheduled dispatchable."]
                },
                {
                  "name": "authorize_call",
                  "fields": [
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<CallOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "caller",
                      "type": 119,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "remove_authorized_call",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "trigger_call",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "call_weight_bound",
                      "type": 72,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 265,
        "type": {
          "path": ["acala_primitives", "AuthoritysOriginId"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Root", "fields": [], "index": 0, "docs": []},
                {"name": "Treasury", "fields": [], "index": 1, "docs": []},
                {
                  "name": "HonzonTreasury",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {"name": "HomaTreasury", "fields": [], "index": 3, "docs": []},
                {
                  "name": "TreasuryReserve",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 266,
        "type": {
          "path": ["frame_support", "traits", "schedule", "DispatchTime"],
          "params": [
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "At",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "After",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 267,
        "type": {
          "path": ["pallet_collective", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "type": 119,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "Requires root origin.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)",
                    "- DB:",
                    "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                    "    members",
                    "  - 1 storage read (codec `O(P)`) for reading the proposals",
                    "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                    "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                    "# </weight>"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                    "  `proposal`",
                    "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 70,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                    "- DB:",
                    "  - 1 storage read `is_member` (codec `O(M)`)",
                    "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                    "  - DB accesses influenced by `threshold`:",
                    "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                    "    - OR proposal insertion (`threshold <= 2`)",
                    "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                    "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                    "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                    "      - 1 storage write `Voting` (codec `O(M)`)",
                    "  - 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "# <weight>",
                    "## Weight",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                    "- DB:",
                    "  - 1 storage read `Members` (codec `O(M)`)",
                    "  - 1 storage mutation `Voting` (codec `O(M)`)",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "type": 72,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)",
                    "- DB:",
                    " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                    " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                    "   `O(P2)`)",
                    " - any mutations done while executing `proposal` (`P1`)",
                    "- up to 3 events",
                    "# </weight>"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "# <weight>",
                    "Complexity: O(P) where P is the number of max proposals",
                    "DB Weight:",
                    "* Reads: Proposals",
                    "* Writes: Voting, Proposals, ProposalOf",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 268,
        "type": {
          "path": ["pallet_membership", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "add_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a member `who` to the set.",
                    "",
                    "May only be called from `T::AddOrigin`."
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Remove a member `who` from the set.",
                    "",
                    "May only be called from `T::RemoveOrigin`."
                  ]
                },
                {
                  "name": "swap_member",
                  "fields": [
                    {
                      "name": "remove",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "add",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Swap out one member `remove` for another `add`.",
                    "",
                    "May only be called from `T::SwapOrigin`.",
                    "",
                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                  ]
                },
                {
                  "name": "reset_members",
                  "fields": [
                    {
                      "name": "members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                    "pass `members` pre-sorted.",
                    "",
                    "May only be called from `T::ResetOrigin`."
                  ]
                },
                {
                  "name": "change_key",
                  "fields": [
                    {
                      "name": "new",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Swap out the sending member for some other key `new`.",
                    "",
                    "May only be called from `Signed` origin of a current member.",
                    "",
                    "Prime membership is passed from the origin account to `new`, if extant."
                  ]
                },
                {
                  "name": "set_prime",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the prime member. Must be a current member.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                },
                {
                  "name": "clear_prime",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Remove the prime member if it exists.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 269,
        "type": {
          "path": ["pallet_collective", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "type": 119,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "Requires root origin.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)",
                    "- DB:",
                    "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                    "    members",
                    "  - 1 storage read (codec `O(P)`) for reading the proposals",
                    "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                    "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                    "# </weight>"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                    "  `proposal`",
                    "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 70,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                    "- DB:",
                    "  - 1 storage read `is_member` (codec `O(M)`)",
                    "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                    "  - DB accesses influenced by `threshold`:",
                    "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                    "    - OR proposal insertion (`threshold <= 2`)",
                    "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                    "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                    "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                    "      - 1 storage write `Voting` (codec `O(M)`)",
                    "  - 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "# <weight>",
                    "## Weight",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                    "- DB:",
                    "  - 1 storage read `Members` (codec `O(M)`)",
                    "  - 1 storage mutation `Voting` (codec `O(M)`)",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "type": 72,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)",
                    "- DB:",
                    " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                    " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                    "   `O(P2)`)",
                    " - any mutations done while executing `proposal` (`P1`)",
                    "- up to 3 events",
                    "# </weight>"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "# <weight>",
                    "Complexity: O(P) where P is the number of max proposals",
                    "DB Weight:",
                    "* Reads: Proposals",
                    "* Writes: Voting, Proposals, ProposalOf",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 270,
        "type": {
          "path": ["pallet_membership", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "add_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a member `who` to the set.",
                    "",
                    "May only be called from `T::AddOrigin`."
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Remove a member `who` from the set.",
                    "",
                    "May only be called from `T::RemoveOrigin`."
                  ]
                },
                {
                  "name": "swap_member",
                  "fields": [
                    {
                      "name": "remove",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "add",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Swap out one member `remove` for another `add`.",
                    "",
                    "May only be called from `T::SwapOrigin`.",
                    "",
                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                  ]
                },
                {
                  "name": "reset_members",
                  "fields": [
                    {
                      "name": "members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                    "pass `members` pre-sorted.",
                    "",
                    "May only be called from `T::ResetOrigin`."
                  ]
                },
                {
                  "name": "change_key",
                  "fields": [
                    {
                      "name": "new",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Swap out the sending member for some other key `new`.",
                    "",
                    "May only be called from `Signed` origin of a current member.",
                    "",
                    "Prime membership is passed from the origin account to `new`, if extant."
                  ]
                },
                {
                  "name": "set_prime",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the prime member. Must be a current member.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                },
                {
                  "name": "clear_prime",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Remove the prime member if it exists.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 271,
        "type": {
          "path": ["pallet_collective", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "type": 119,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "Requires root origin.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)",
                    "- DB:",
                    "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                    "    members",
                    "  - 1 storage read (codec `O(P)`) for reading the proposals",
                    "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                    "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                    "# </weight>"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                    "  `proposal`",
                    "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 70,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                    "- DB:",
                    "  - 1 storage read `is_member` (codec `O(M)`)",
                    "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                    "  - DB accesses influenced by `threshold`:",
                    "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                    "    - OR proposal insertion (`threshold <= 2`)",
                    "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                    "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                    "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                    "      - 1 storage write `Voting` (codec `O(M)`)",
                    "  - 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "# <weight>",
                    "## Weight",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                    "- DB:",
                    "  - 1 storage read `Members` (codec `O(M)`)",
                    "  - 1 storage mutation `Voting` (codec `O(M)`)",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "type": 72,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)",
                    "- DB:",
                    " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                    " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                    "   `O(P2)`)",
                    " - any mutations done while executing `proposal` (`P1`)",
                    "- up to 3 events",
                    "# </weight>"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "# <weight>",
                    "Complexity: O(P) where P is the number of max proposals",
                    "DB Weight:",
                    "* Reads: Proposals",
                    "* Writes: Voting, Proposals, ProposalOf",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 272,
        "type": {
          "path": ["pallet_membership", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "add_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a member `who` to the set.",
                    "",
                    "May only be called from `T::AddOrigin`."
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Remove a member `who` from the set.",
                    "",
                    "May only be called from `T::RemoveOrigin`."
                  ]
                },
                {
                  "name": "swap_member",
                  "fields": [
                    {
                      "name": "remove",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "add",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Swap out one member `remove` for another `add`.",
                    "",
                    "May only be called from `T::SwapOrigin`.",
                    "",
                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                  ]
                },
                {
                  "name": "reset_members",
                  "fields": [
                    {
                      "name": "members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                    "pass `members` pre-sorted.",
                    "",
                    "May only be called from `T::ResetOrigin`."
                  ]
                },
                {
                  "name": "change_key",
                  "fields": [
                    {
                      "name": "new",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Swap out the sending member for some other key `new`.",
                    "",
                    "May only be called from `Signed` origin of a current member.",
                    "",
                    "Prime membership is passed from the origin account to `new`, if extant."
                  ]
                },
                {
                  "name": "set_prime",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the prime member. Must be a current member.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                },
                {
                  "name": "clear_prime",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Remove the prime member if it exists.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 273,
        "type": {
          "path": ["pallet_collective", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "type": 119,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "Requires root origin.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)",
                    "- DB:",
                    "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                    "    members",
                    "  - 1 storage read (codec `O(P)`) for reading the proposals",
                    "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                    "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                    "# </weight>"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                    "  `proposal`",
                    "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 70,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "type": 194,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                    "- DB:",
                    "  - 1 storage read `is_member` (codec `O(M)`)",
                    "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                    "  - DB accesses influenced by `threshold`:",
                    "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                    "    - OR proposal insertion (`threshold <= 2`)",
                    "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                    "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                    "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                    "      - 1 storage write `Voting` (codec `O(M)`)",
                    "  - 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "# <weight>",
                    "## Weight",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                    "- DB:",
                    "  - 1 storage read `Members` (codec `O(M)`)",
                    "  - 1 storage mutation `Voting` (codec `O(M)`)",
                    "- 1 event",
                    "# </weight>"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 70,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "type": 72,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "# <weight>",
                    "## Weight",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)",
                    "- DB:",
                    " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                    " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                    "   `O(P2)`)",
                    " - any mutations done while executing `proposal` (`P1`)",
                    "- up to 3 events",
                    "# </weight>"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "# <weight>",
                    "Complexity: O(P) where P is the number of max proposals",
                    "DB Weight:",
                    "* Reads: Proposals",
                    "* Writes: Voting, Proposals, ProposalOf",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 274,
        "type": {
          "path": ["pallet_membership", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "add_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a member `who` to the set.",
                    "",
                    "May only be called from `T::AddOrigin`."
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Remove a member `who` from the set.",
                    "",
                    "May only be called from `T::RemoveOrigin`."
                  ]
                },
                {
                  "name": "swap_member",
                  "fields": [
                    {
                      "name": "remove",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "add",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Swap out one member `remove` for another `add`.",
                    "",
                    "May only be called from `T::SwapOrigin`.",
                    "",
                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                  ]
                },
                {
                  "name": "reset_members",
                  "fields": [
                    {
                      "name": "members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                    "pass `members` pre-sorted.",
                    "",
                    "May only be called from `T::ResetOrigin`."
                  ]
                },
                {
                  "name": "change_key",
                  "fields": [
                    {
                      "name": "new",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Swap out the sending member for some other key `new`.",
                    "",
                    "May only be called from `Signed` origin of a current member.",
                    "",
                    "Prime membership is passed from the origin account to `new`, if extant."
                  ]
                },
                {
                  "name": "set_prime",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the prime member. Must be a current member.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                },
                {
                  "name": "clear_prime",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Remove the prime member if it exists.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 275,
        "type": {
          "path": ["pallet_democracy", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a sensitive action to be taken.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the sender must",
                    "have funds to cover the deposit.",
                    "",
                    "- `proposal_hash`: The hash of the proposal preimage.",
                    "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                    "",
                    "Emits `Proposed`.",
                    "",
                    "Weight: `O(p)`"
                  ]
                },
                {
                  "name": "second",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 70,
                      "typeName": "PropIndex",
                      "docs": []
                    },
                    {
                      "name": "seconds_upper_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Signals agreement with a particular proposal.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the sender",
                    "must have funds to cover the deposit, equal to the original deposit.",
                    "",
                    "- `proposal`: The index of the proposal to second.",
                    "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                    "  proposal. Extrinsic is weighted according to this value with no refund.",
                    "",
                    "Weight: `O(S)` where S is the number of seconds a proposal already has."
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 70,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "type": 276,
                      "typeName": "AccountVote<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                    "otherwise it is a vote to keep the status quo.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `ref_index`: The index of the referendum to vote for.",
                    "- `vote`: The vote configuration.",
                    "",
                    "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                  ]
                },
                {
                  "name": "emergency_cancel",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                    "referendum.",
                    "",
                    "The dispatch origin of this call must be `CancellationOrigin`.",
                    "",
                    "-`ref_index`: The index of the referendum to cancel.",
                    "",
                    "Weight: `O(1)`."
                  ]
                },
                {
                  "name": "external_propose",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Schedule a referendum to be tabled once it is legal to schedule an external",
                    "referendum.",
                    "",
                    "The dispatch origin of this call must be `ExternalOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal.",
                    "",
                    "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                    "  Decoding vec of length V. Charged as maximum"
                  ]
                },
                {
                  "name": "external_propose_majority",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                    "an external referendum.",
                    "",
                    "The dispatch of this call must be `ExternalMajorityOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal.",
                    "",
                    "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                    "pre-scheduled `external_propose` call.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "external_propose_default",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                    "schedule an external referendum.",
                    "",
                    "The dispatch of this call must be `ExternalDefaultOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal.",
                    "",
                    "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                    "pre-scheduled `external_propose` call.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "fast_track",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "voting_period",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                    "immediately. If there is no externally-proposed referendum currently, or if there is one",
                    "but it is not a majority-carries referendum then it fails.",
                    "",
                    "The dispatch of this call must be `FastTrackOrigin`.",
                    "",
                    "- `proposal_hash`: The hash of the current external proposal.",
                    "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                    "  `FastTrackVotingPeriod` if too low.",
                    "- `delay`: The number of block after voting has ended in approval and this should be",
                    "  enacted. This doesn't have a minimum amount.",
                    "",
                    "Emits `Started`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "veto_external",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Veto and blacklist the external proposal hash.",
                    "",
                    "The dispatch origin of this call must be `VetoOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                    "",
                    "Emits `Vetoed`.",
                    "",
                    "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                  ]
                },
                {
                  "name": "cancel_referendum",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 70,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Remove a referendum.",
                    "",
                    "The dispatch origin of this call must be _Root_.",
                    "",
                    "- `ref_index`: The index of the referendum to cancel.",
                    "",
                    "# Weight: `O(1)`."
                  ]
                },
                {
                  "name": "cancel_queued",
                  "fields": [
                    {
                      "name": "which",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Cancel a proposal queued for enactment.",
                    "",
                    "The dispatch origin of this call must be _Root_.",
                    "",
                    "- `which`: The index of the referendum to cancel.",
                    "",
                    "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                  ]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "to",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "type": 278,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Delegate the voting power (with some given conviction) of the sending account.",
                    "",
                    "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                    "time appropriate for the conviction's lock period.",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                    "  - be delegating already; or",
                    "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                    "    through `reap_vote` or `unvote`).",
                    "",
                    "- `to`: The account whose voting the `target` account's voting power will follow.",
                    "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                    "  account is undelegated, the funds will be locked for the corresponding period.",
                    "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                    "  be more than the account's current balance.",
                    "",
                    "Emits `Delegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                    "  voted on. Weight is charged as if maximum votes."
                  ]
                },
                {
                  "name": "undelegate",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Undelegate the voting power of the sending account.",
                    "",
                    "Tokens may be unlocked following once an amount of time consistent with the lock period",
                    "of the conviction with which the delegation was issued.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the signing account must be",
                    "currently delegating.",
                    "",
                    "Emits `Undelegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                    "  voted on. Weight is charged as if maximum votes."
                  ]
                },
                {
                  "name": "clear_public_proposals",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Clears all public proposals.",
                    "",
                    "The dispatch origin of this call must be _Root_.",
                    "",
                    "Weight: `O(1)`."
                  ]
                },
                {
                  "name": "note_preimage",
                  "fields": [
                    {
                      "name": "encoded_proposal",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                    "in the dispatch queue but does require a deposit, returned once enacted.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `encoded_proposal`: The preimage of a proposal.",
                    "",
                    "Emits `PreimageNoted`.",
                    "",
                    "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                  ]
                },
                {
                  "name": "note_preimage_operational",
                  "fields": [
                    {
                      "name": "encoded_proposal",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                  ]
                },
                {
                  "name": "note_imminent_preimage",
                  "fields": [
                    {
                      "name": "encoded_proposal",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Register the preimage for an upcoming proposal. This requires the proposal to be",
                    "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                    "the preimage has not been uploaded before and matches some imminent proposal,",
                    "no fee is paid.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `encoded_proposal`: The preimage of a proposal.",
                    "",
                    "Emits `PreimageNoted`.",
                    "",
                    "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                  ]
                },
                {
                  "name": "note_imminent_preimage_operational",
                  "fields": [
                    {
                      "name": "encoded_proposal",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                  ]
                },
                {
                  "name": "reap_preimage",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "proposal_len_upper_bound",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Remove an expired proposal preimage and collect the deposit.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `proposal_hash`: The preimage hash of a proposal.",
                    "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                    "  weighted according to this value with no refund.",
                    "",
                    "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                    "noted, if it's the same account doing it. If it's a different account, then it'll only",
                    "work an additional `EnactmentPeriod` later.",
                    "",
                    "Emits `PreimageReaped`.",
                    "",
                    "Weight: `O(D)` where D is length of proposal."
                  ]
                },
                {
                  "name": "unlock",
                  "fields": [
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Unlock tokens that have an expired lock.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account to remove the lock on.",
                    "",
                    "Weight: `O(R)` with R number of vote of target."
                  ]
                },
                {
                  "name": "remove_vote",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Remove a vote for a referendum.",
                    "",
                    "If:",
                    "- the referendum was cancelled, or",
                    "- the referendum is ongoing, or",
                    "- the referendum has ended such that",
                    "  - the vote of the account was in opposition to the result; or",
                    "  - there was no conviction to the account's vote; or",
                    "  - the account made a split vote",
                    "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                    "funds being available.",
                    "",
                    "If, however, the referendum has ended and:",
                    "- it finished corresponding to the vote of the account, and",
                    "- the account made a standard vote with conviction, and",
                    "- the lock period of the conviction is not over",
                    "...then the lock will be aggregated into the overall account's lock, which may involve",
                    "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                    "of both the amount locked and the time is it locked for).",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                    "registered for referendum `index`.",
                    "",
                    "- `index`: The index of referendum of the vote to be removed.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "remove_other_vote",
                  "fields": [
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Remove a vote for a referendum.",
                    "",
                    "If the `target` is equal to the signer, then this function is exactly equivalent to",
                    "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                    "either because the referendum was cancelled, because the voter lost the referendum or",
                    "because the conviction period is over.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account of the vote to be removed; this account must have voted for",
                    "  referendum `index`.",
                    "- `index`: The index of referendum of the vote to be removed.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "enact_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                  ]
                },
                {
                  "name": "blacklist",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "maybe_ref_index",
                      "type": 259,
                      "typeName": "Option<ReferendumIndex>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Permanently place a proposal into the blacklist. This prevents it from ever being",
                    "proposed again.",
                    "",
                    "If called on a queued public or external proposal, then this will result in it being",
                    "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                    "then it will be cancelled.",
                    "",
                    "The dispatch origin of this call must be `BlacklistOrigin`.",
                    "",
                    "- `proposal_hash`: The proposal hash to blacklist permanently.",
                    "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                    "cancelled.",
                    "",
                    "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                    "  reasonable value)."
                  ]
                },
                {
                  "name": "cancel_proposal",
                  "fields": [
                    {
                      "name": "prop_index",
                      "type": 70,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Remove a proposal.",
                    "",
                    "The dispatch origin of this call must be `CancelProposalOrigin`.",
                    "",
                    "- `prop_index`: The index of the proposal to cancel.",
                    "",
                    "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 276,
        "type": {
          "path": ["pallet_democracy", "vote", "AccountVote"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Standard",
                  "fields": [
                    {
                      "name": "vote",
                      "type": 277,
                      "typeName": "Vote",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Split",
                  "fields": [
                    {
                      "name": "aye",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 277,
        "type": {
          "path": ["pallet_democracy", "vote", "Vote"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 2, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 278,
        "type": {
          "path": ["pallet_democracy", "conviction", "Conviction"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {"name": "Locked1x", "fields": [], "index": 1, "docs": []},
                {"name": "Locked2x", "fields": [], "index": 2, "docs": []},
                {"name": "Locked3x", "fields": [], "index": 3, "docs": []},
                {"name": "Locked4x", "fields": [], "index": 4, "docs": []},
                {"name": "Locked5x", "fields": [], "index": 5, "docs": []},
                {"name": "Locked6x", "fields": [], "index": 6, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 279,
        "type": {
          "path": ["orml_oracle", "module", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "feed_values",
                  "fields": [
                    {
                      "name": "values",
                      "type": 132,
                      "typeName": "Vec<(T::OracleKey, T::OracleValue)>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Feed the external value.",
                    "",
                    "Require authorized operator."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 280,
        "type": {
          "path": ["pallet_membership", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "add_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a member `who` to the set.",
                    "",
                    "May only be called from `T::AddOrigin`."
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Remove a member `who` from the set.",
                    "",
                    "May only be called from `T::RemoveOrigin`."
                  ]
                },
                {
                  "name": "swap_member",
                  "fields": [
                    {
                      "name": "remove",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "add",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Swap out one member `remove` for another `add`.",
                    "",
                    "May only be called from `T::SwapOrigin`.",
                    "",
                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                  ]
                },
                {
                  "name": "reset_members",
                  "fields": [
                    {
                      "name": "members",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                    "pass `members` pre-sorted.",
                    "",
                    "May only be called from `T::ResetOrigin`."
                  ]
                },
                {
                  "name": "change_key",
                  "fields": [
                    {
                      "name": "new",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Swap out the sending member for some other key `new`.",
                    "",
                    "May only be called from `Signed` origin of a current member.",
                    "",
                    "Prime membership is passed from the origin account to `new`, if extant."
                  ]
                },
                {
                  "name": "set_prime",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the prime member. Must be a current member.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                },
                {
                  "name": "clear_prime",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Remove the prime member if it exists.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 281,
        "type": {
          "path": ["orml_auction", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "bid",
                  "fields": [
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "T::AuctionId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Bid an auction.",
                    "",
                    "The dispatch origin for this call must be `Signed` by the",
                    "transactor."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 282,
        "type": {
          "path": ["orml_rewards", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {"variants": []}
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 283,
        "type": {
          "path": ["module_prices", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "lock_price",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Lock the price and feed it to system.",
                    "",
                    "The dispatch origin of this call must be `LockOrigin`.",
                    "",
                    "- `currency_id`: currency type."
                  ]
                },
                {
                  "name": "unlock_price",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Unlock the price and get the price from `PriceProvider` again",
                    "",
                    "The dispatch origin of this call must be `LockOrigin`.",
                    "",
                    "- `currency_id`: currency type."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 284,
        "type": {
          "path": ["module_dex", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "swap_with_exact_supply",
                  "fields": [
                    {
                      "name": "path",
                      "type": 139,
                      "typeName": "Vec<CurrencyId>",
                      "docs": []
                    },
                    {
                      "name": "supply_amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "min_target_amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Trading with DEX, swap with exact supply amount",
                    "",
                    "- `path`: trading path.",
                    "- `supply_amount`: exact supply amount.",
                    "- `min_target_amount`: acceptable minimum target amount."
                  ]
                },
                {
                  "name": "swap_with_exact_target",
                  "fields": [
                    {
                      "name": "path",
                      "type": 139,
                      "typeName": "Vec<CurrencyId>",
                      "docs": []
                    },
                    {
                      "name": "target_amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "max_supply_amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Trading with DEX, swap with exact target amount",
                    "",
                    "- `path`: trading path.",
                    "- `target_amount`: exact target amount.",
                    "- `max_supply_amount`: acceptable maximum supply amount."
                  ]
                },
                {
                  "name": "add_liquidity",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "max_amount_a",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "max_amount_b",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "min_share_increment",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "stake_increment_share",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add liquidity to Enabled trading pair.",
                    "- Add provision success will record the provision, issue shares to caller in the initial",
                    "  exchange rate when trading pair convert to Enabled.",
                    "",
                    "- `currency_id_a`: currency id A.",
                    "- `currency_id_b`: currency id B.",
                    "- `max_amount_a`: maximum amount of currency_id_a is allowed to inject to liquidity",
                    "  pool.",
                    "- `max_amount_b`: maximum amount of currency_id_b is allowed to inject to liquidity",
                    "  pool.",
                    "- `min_share_increment`: minimum acceptable share amount.",
                    "- `stake_increment_share`: indicates whether to stake increased dex share to earn",
                    "  incentives"
                  ]
                },
                {
                  "name": "add_provision",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "amount_a",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "amount_b",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add provision to Provisioning trading pair.",
                    "If succecced, will record the provision, but shares issuing will happen after the",
                    "trading pair convert to Enabled status.",
                    "",
                    "- `currency_id_a`: currency id A.",
                    "- `currency_id_b`: currency id B.",
                    "- `amount_a`: provision amount for currency_id_a.",
                    "- `amount_b`: provision amount for currency_id_b."
                  ]
                },
                {
                  "name": "claim_dex_share",
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Claim dex share for founders who have participated in trading pair provision.",
                    "",
                    "- `owner`: founder account.",
                    "- `currency_id_a`: currency id A.",
                    "- `currency_id_b`: currency id B."
                  ]
                },
                {
                  "name": "remove_liquidity",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "remove_share",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "min_withdrawn_a",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "min_withdrawn_b",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "by_unstake",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove liquidity from specific liquidity pool in the form of burning",
                    "shares, and withdrawing currencies in trading pairs from liquidity",
                    "pool in proportion, and withdraw liquidity incentive interest.",
                    "",
                    "- `currency_id_a`: currency id A.",
                    "- `currency_id_b`: currency id B.",
                    "- `remove_share`: liquidity amount to remove.",
                    "- `min_withdrawn_a`: minimum acceptable withrawn for currency_id_a.",
                    "- `min_withdrawn_b`: minimum acceptable withrawn for currency_id_b.",
                    "- `by_unstake`: this flag indicates whether to withdraw share which is on incentives."
                  ]
                },
                {
                  "name": "list_provisioning",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "min_contribution_a",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "min_contribution_b",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target_provision_a",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target_provision_b",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "not_before",
                      "type": 70,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["List a new provisioning trading pair."]
                },
                {
                  "name": "update_provisioning_parameters",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "min_contribution_a",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "min_contribution_b",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target_provision_a",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target_provision_b",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "not_before",
                      "type": 70,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "List a new trading pair, trading pair will become Enabled status",
                    "after provision process."
                  ]
                },
                {
                  "name": "end_provisioning",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Enable a Provisioning trading pair if meet the condition."
                  ]
                },
                {
                  "name": "enable_trading_pair",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Enable a trading pair",
                    "if the status of trading pair is `Disabled`, or `Provisioning` without any accumulated",
                    "provision, enable it directly."
                  ]
                },
                {
                  "name": "disable_trading_pair",
                  "fields": [
                    {
                      "name": "currency_id_a",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "currency_id_b",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["Disable a `Enabled` trading pair."]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 285,
        "type": {
          "path": ["module_auction_manager", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "AuctionId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Cancel active auction after system shutdown",
                    "",
                    "The dispatch origin of this call must be _None_."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 286,
        "type": {
          "path": ["module_loans", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {"variants": []}
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 287,
        "type": {
          "path": ["module_honzon", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "adjust_loan",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "collateral_adjustment",
                      "type": 50,
                      "typeName": "Amount",
                      "docs": []
                    },
                    {
                      "name": "debit_adjustment",
                      "type": 50,
                      "typeName": "Amount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Adjust the loans of `currency_id` by specific",
                    "`collateral_adjustment` and `debit_adjustment`",
                    "",
                    "- `currency_id`: collateral currency id.",
                    "- `collateral_adjustment`: signed amount, positive means to deposit collateral currency",
                    "  into CDP, negative means withdraw collateral currency from CDP.",
                    "- `debit_adjustment`: signed amount, positive means to issue some amount of stablecoin",
                    "  to caller according to the debit adjustment, negative means caller will payback some",
                    "  amount of stablecoin to CDP according to to the debit adjustment."
                  ]
                },
                {
                  "name": "close_loan_has_debit_by_dex",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "max_collateral_amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "maybe_path",
                      "type": 212,
                      "typeName": "Option<Vec<CurrencyId>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Close caller's CDP which has debit but still in safe by use collateral to swap",
                    "stable token on DEX for clearing debit.",
                    "",
                    "- `currency_id`: collateral currency id.",
                    "- `max_collateral_amount`: the max collateral amount which is used to swap enough",
                    "\tstable token to clear debit.",
                    "- `maybe_path`: the custom swap path."
                  ]
                },
                {
                  "name": "transfer_loan_from",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer the whole CDP of `from` under `currency_id` to caller's CDP",
                    "under the same `currency_id`, caller must have the authorization of",
                    "`from` for the specific collateral type",
                    "",
                    "- `currency_id`: collateral currency id.",
                    "- `from`: authorizer account"
                  ]
                },
                {
                  "name": "authorize",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Authorize `to` to manipulate the loan under `currency_id`",
                    "",
                    "- `currency_id`: collateral currency id.",
                    "- `to`: authorizee account"
                  ]
                },
                {
                  "name": "unauthorize",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Cancel the authorization for `to` under `currency_id`",
                    "",
                    "- `currency_id`: collateral currency id.",
                    "- `to`: authorizee account"
                  ]
                },
                {
                  "name": "unauthorize_all",
                  "fields": [],
                  "index": 5,
                  "docs": ["Cancel all authorization of caller"]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 288,
        "type": {
          "path": ["module_cdp_treasury", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "extract_surplus_to_treasury",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "auction_collateral",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "splited",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "set_expected_collateral_auction_size",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "size",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Update parameters related to collateral auction under specific",
                    "collateral type",
                    "",
                    "The dispatch origin of this call must be `UpdateOrigin`.",
                    "",
                    "- `currency_id`: collateral type",
                    "- `amount`: expected size of per lot collateral auction"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 289,
        "type": {
          "path": ["module_cdp_engine", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "liquidate",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Liquidate unsafe CDP",
                    "",
                    "The dispatch origin of this call must be _None_.",
                    "",
                    "- `currency_id`: CDP's collateral type.",
                    "- `who`: CDP's owner."
                  ]
                },
                {
                  "name": "settle",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Settle CDP has debit after system shutdown",
                    "",
                    "The dispatch origin of this call must be _None_.",
                    "",
                    "- `currency_id`: CDP's collateral type.",
                    "- `who`: CDP's owner."
                  ]
                },
                {
                  "name": "set_global_params",
                  "fields": [
                    {
                      "name": "global_interest_rate_per_sec",
                      "type": 134,
                      "typeName": "Rate",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Update global parameters related to risk management of CDP",
                    "",
                    "The dispatch origin of this call must be `UpdateOrigin`.",
                    "",
                    "- `global_interest_rate_per_sec`: global interest rate per sec."
                  ]
                },
                {
                  "name": "set_collateral_params",
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "interest_rate_per_sec",
                      "type": 290,
                      "typeName": "ChangeOptionRate",
                      "docs": []
                    },
                    {
                      "name": "liquidation_ratio",
                      "type": 290,
                      "typeName": "ChangeOptionRatio",
                      "docs": []
                    },
                    {
                      "name": "liquidation_penalty",
                      "type": 290,
                      "typeName": "ChangeOptionRate",
                      "docs": []
                    },
                    {
                      "name": "required_collateral_ratio",
                      "type": 290,
                      "typeName": "ChangeOptionRatio",
                      "docs": []
                    },
                    {
                      "name": "maximum_total_debit_value",
                      "type": 291,
                      "typeName": "ChangeBalance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Update parameters related to risk management of CDP under specific",
                    "collateral type",
                    "",
                    "The dispatch origin of this call must be `UpdateOrigin`.",
                    "",
                    "- `currency_id`: collateral type.",
                    "- `interest_rate_per_sec`: extra interest rate per sec, `None` means do not update,",
                    "  `Some(None)` means update it to `None`.",
                    "- `liquidation_ratio`: liquidation ratio, `None` means do not update, `Some(None)` means",
                    "  update it to `None`.",
                    "- `liquidation_penalty`: liquidation penalty, `None` means do not update, `Some(None)`",
                    "  means update it to `None`.",
                    "- `required_collateral_ratio`: required collateral ratio, `None` means do not update,",
                    "  `Some(None)` means update it to `None`.",
                    "- `maximum_total_debit_value`: maximum total debit value."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 290,
        "type": {
          "path": ["orml_traits", "Change"],
          "params": [
            {"name": "Value", "type": 148}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "NoChange", "fields": [], "index": 0, "docs": []},
                {
                  "name": "NewValue",
                  "fields": [
                    {"name": null, "type": 148, "typeName": "Value", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 291,
        "type": {
          "path": ["orml_traits", "Change"],
          "params": [
            {"name": "Value", "type": 6}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "NoChange", "fields": [], "index": 0, "docs": []},
                {
                  "name": "NewValue",
                  "fields": [
                    {"name": null, "type": 6, "typeName": "Value", "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 292,
        "type": {
          "path": ["module_emergency_shutdown", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "emergency_shutdown",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Start emergency shutdown",
                    "",
                    "The dispatch origin of this call must be `ShutdownOrigin`."
                  ]
                },
                {
                  "name": "open_collateral_refund",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Open final redemption if settlement is completed.",
                    "",
                    "The dispatch origin of this call must be `ShutdownOrigin`."
                  ]
                },
                {
                  "name": "refund_collaterals",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Refund a basket of remaining collateral assets to caller",
                    "",
                    "- `amount`: stable currency amount used to refund."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 293,
        "type": {
          "path": ["module_homa_lite", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "mint",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Mint some Liquid currency, by locking up the given amount of Staking currency.",
                    "Will try to match Redeem Requests if available. Remaining amount is minted via XCM.",
                    "",
                    "The exchange rate is calculated using the ratio of the total amount of the staking and",
                    "liquid currency.",
                    "",
                    "If any amount is minted through XCM, a portion of that amount (T::MintFee and",
                    "T::MaxRewardPerEra) is reducted as fee.",
                    "",
                    "Parameters:",
                    "- `amount`: The amount of Staking currency to be exchanged."
                  ]
                },
                {
                  "name": "set_total_staking_currency",
                  "fields": [
                    {
                      "name": "staking_total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Sets the total amount of the Staking currency that are currently on the relaychain.",
                    "Requires `T::GovernanceOrigin`",
                    "",
                    "Parameters:",
                    "- `staking_total`: The current amount of the Staking currency. Used to calculate",
                    "  conversion rate."
                  ]
                },
                {
                  "name": "adjust_total_staking_currency",
                  "fields": [
                    {
                      "name": "by_amount",
                      "type": 50,
                      "typeName": "AmountOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Adjusts the total_staking_currency by the given difference.",
                    "Requires `T::GovernanceOrigin`",
                    "",
                    "Parameters:",
                    "- `adjustment`: The difference in amount the total_staking_currency should be adjusted",
                    "  by."
                  ]
                },
                {
                  "name": "set_minting_cap",
                  "fields": [
                    {
                      "name": "new_cap",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Updates the cap for how much Staking currency can be used to Mint liquid currency.",
                    "Requires `T::GovernanceOrigin`",
                    "",
                    "Parameters:",
                    "- `new_cap`: The new cap for staking currency."
                  ]
                },
                {
                  "name": "set_xcm_dest_weight",
                  "fields": [
                    {
                      "name": "xcm_dest_weight",
                      "type": 72,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Sets the xcm_dest_weight for XCM transfers.",
                    "Requires `T::GovernanceOrigin`",
                    "",
                    "Parameters:",
                    "- `xcm_dest_weight`: The new weight for XCM transfers."
                  ]
                },
                {
                  "name": "mint_for_requests",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "requests",
                      "type": 59,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Mint some Liquid currency, by locking up the given amount of Staking currency.",
                    "This is similar with the mint() extrinsic, except that the given Redeem Requests are",
                    "matched with priority.",
                    "",
                    "Parameters:",
                    "- `amount`: The amount of Staking currency to be exchanged.",
                    "- `requests`: The redeem requests that are prioritized to match."
                  ]
                },
                {
                  "name": "request_redeem",
                  "fields": [
                    {
                      "name": "liquid_amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "additional_fee",
                      "type": 153,
                      "typeName": "Permill",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Put in an request to redeem Staking currencies used to mint Liquid currency.",
                    "The redemption will happen after the currencies are unbonded on the relaychain.",
                    "",
                    "Parameters:",
                    "- `liquid_amount`: The amount of liquid currency to be redeemed into Staking currency.",
                    "- `additional_fee`: Percentage of the fee to be awarded to the minter."
                  ]
                },
                {
                  "name": "schedule_unbond",
                  "fields": [
                    {
                      "name": "staking_amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "unbond_block",
                      "type": 4,
                      "typeName": "RelayChainBlockNumberOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Request staking currencies to be unbonded from the RelayChain.",
                    "",
                    "Requires `T::GovernanceOrigin`",
                    "",
                    "Parameters:",
                    "- `staking_amount`: The amount of staking currency to be unbonded.",
                    "- `unbond_block`: The relaychain block number to unbond."
                  ]
                },
                {
                  "name": "replace_schedule_unbond",
                  "fields": [
                    {
                      "name": "new_unbonds",
                      "type": 294,
                      "typeName": "Vec<(Balance, RelayChainBlockNumberOf<T>)>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Replace the current storage for `ScheduledUnbond`.",
                    "This should only be used to correct mistaken call of schedule_unbond or if something",
                    "unexpected happened on relaychain.",
                    "",
                    "Requires `T::GovernanceOrigin`",
                    "",
                    "Parameters:",
                    "- `new_unbonds`: The new ScheduledUnbond storage to replace the currrent storage."
                  ]
                },
                {
                  "name": "adjust_available_staking_balance",
                  "fields": [
                    {
                      "name": "by_amount",
                      "type": 50,
                      "typeName": "AmountOf<T>",
                      "docs": []
                    },
                    {
                      "name": "max_num_matches",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Adjusts the AvailableStakingBalance by the given difference.",
                    "Also attempt to process queued redeem request with the new Staking Balance.",
                    "Requires `T::GovernanceOrigin`",
                    "",
                    "Parameters:",
                    "- `adjustment`: The difference in amount the AvailableStakingBalance should be adjusted",
                    "  by.",
                    "",
                    "Weight: Weight(xcm unbond) + n * Weight(match redeem requests), where n is number of",
                    "redeem requests matched."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 294,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 295}
          },
          "docs": []
        }
      },
      {
        "id": 295,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [6, 4]
          },
          "docs": []
        }
      },
      {
        "id": 296,
        "type": {
          "path": ["module_incentives", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "deposit_dex_share",
                  "fields": [
                    {
                      "name": "lp_currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Stake LP token to add shares of Pool::Dex",
                    "",
                    "The dispatch origin of this call must be `Signed` by the transactor.",
                    "",
                    "- `lp_currency_id`: LP token type",
                    "- `amount`: amount to stake"
                  ]
                },
                {
                  "name": "withdraw_dex_share",
                  "fields": [
                    {
                      "name": "lp_currency_id",
                      "type": 44,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 53,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Unstake LP token to remove shares of Pool::Dex",
                    "",
                    "The dispatch origin of this call must be `Signed` by the transactor.",
                    "",
                    "- `lp_currency_id`: LP token type",
                    "- `amount`: amount to unstake"
                  ]
                },
                {
                  "name": "claim_rewards",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 155,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Claim all avalible multi currencies rewards for specific PoolId.",
                    "",
                    "The dispatch origin of this call must be `Signed` by the transactor.",
                    "",
                    "- `pool_id`: pool type"
                  ]
                },
                {
                  "name": "update_incentive_rewards",
                  "fields": [
                    {
                      "name": "updates",
                      "type": 297,
                      "typeName": "Vec<(PoolId, Vec<(CurrencyId, Balance)>)>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Update incentive reward amount for specific PoolId",
                    "",
                    "The dispatch origin of this call must be `UpdateOrigin`.",
                    "",
                    "- `updates`: Vec<(PoolId, Vec<(RewardCurrencyId, FixedAmountPerPeriod)>)>"
                  ]
                },
                {
                  "name": "update_dex_saving_rewards",
                  "fields": [
                    {
                      "name": "updates",
                      "type": 299,
                      "typeName": "Vec<(PoolId, Rate)>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Update DEX saving reward rate for specific PoolId",
                    "",
                    "The dispatch origin of this call must be `UpdateOrigin`.",
                    "",
                    "- `updates`: Vec<(PoolId, Rate)>"
                  ]
                },
                {
                  "name": "update_claim_reward_deduction_rates",
                  "fields": [
                    {
                      "name": "updates",
                      "type": 299,
                      "typeName": "Vec<(PoolId, Rate)>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Update claim rewards deduction rates for all rewards currencies of specific PoolId",
                    "",
                    "The dispatch origin of this call must be `UpdateOrigin`.",
                    "",
                    "- `updates`: Vec<(PoolId, DecutionRate>)>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 297,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 298}
          },
          "docs": []
        }
      },
      {
        "id": 298,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [155, 150]
          },
          "docs": []
        }
      },
      {
        "id": 299,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 300}
          },
          "docs": []
        }
      },
      {
        "id": 300,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [155, 134]
          },
          "docs": []
        }
      },
      {
        "id": 301,
        "type": {
          "path": ["module_nft", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "create_class",
                  "fields": [
                    {
                      "name": "metadata",
                      "type": 10,
                      "typeName": "CID",
                      "docs": []
                    },
                    {
                      "name": "properties",
                      "type": 302,
                      "typeName": "Properties",
                      "docs": []
                    },
                    {
                      "name": "attributes",
                      "type": 304,
                      "typeName": "Attributes",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Create NFT class, tokens belong to the class.",
                    "",
                    "- `metadata`: external metadata",
                    "- `properties`: class property, include `Transferable` `Burnable`"
                  ]
                },
                {
                  "name": "mint",
                  "fields": [
                    {
                      "name": "to",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "class_id",
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "metadata",
                      "type": 10,
                      "typeName": "CID",
                      "docs": []
                    },
                    {
                      "name": "attributes",
                      "type": 304,
                      "typeName": "Attributes",
                      "docs": []
                    },
                    {
                      "name": "quantity",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Mint NFT token",
                    "",
                    "- `to`: the token owner's account",
                    "- `class_id`: token belong to the class id",
                    "- `metadata`: external metadata",
                    "- `quantity`: token quantity"
                  ]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "to",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "token",
                      "type": 305,
                      "typeName": "(ClassIdOf<T>, TokenIdOf<T>)",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer NFT token to another account",
                    "",
                    "- `to`: the token owner's account",
                    "- `token`: (class_id, token_id)"
                  ]
                },
                {
                  "name": "burn",
                  "fields": [
                    {
                      "name": "token",
                      "type": 305,
                      "typeName": "(ClassIdOf<T>, TokenIdOf<T>)",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Burn NFT token",
                    "",
                    "- `token`: (class_id, token_id)"
                  ]
                },
                {
                  "name": "burn_with_remark",
                  "fields": [
                    {
                      "name": "token",
                      "type": 305,
                      "typeName": "(ClassIdOf<T>, TokenIdOf<T>)",
                      "docs": []
                    },
                    {
                      "name": "remark",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Burn NFT token",
                    "",
                    "- `token`: (class_id, token_id)",
                    "- `remark`: Vec<u8>"
                  ]
                },
                {
                  "name": "destroy_class",
                  "fields": [
                    {
                      "name": "class_id",
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Destroy NFT class, remove dest from proxy, and send all the free",
                    "balance to dest",
                    "",
                    "- `class_id`: The class ID to destroy",
                    "- `dest`: The proxy account that will receive free balance"
                  ]
                },
                {
                  "name": "update_class_properties",
                  "fields": [
                    {
                      "name": "class_id",
                      "type": 4,
                      "typeName": "ClassIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "properties",
                      "type": 302,
                      "typeName": "Properties",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Update NFT class properties. The current class properties must contains",
                    "ClassPropertiesMutable.",
                    "",
                    "- `class_id`: The class ID to update",
                    "- `properties`: The new properties"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 302,
        "type": {
          "path": ["module_nft", "BitFlags"],
          "params": [
            {"name": "T", "type": 303}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "ClassProperty",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 303,
        "type": {
          "path": ["module_nft", "ClassProperty"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Transferable", "fields": [], "index": 1, "docs": []},
                {"name": "Burnable", "fields": [], "index": 2, "docs": []},
                {"name": "Mintable", "fields": [], "index": 4, "docs": []},
                {
                  "name": "ClassPropertiesMutable",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 304,
        "type": {
          "path": ["BTreeMap"],
          "params": [
            {"name": "K", "type": 10},
            {"name": "V", "type": 10}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 175, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 305,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 8]
          },
          "docs": []
        }
      },
      {
        "id": 306,
        "type": {
          "path": ["module_evm", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "eth_call",
                  "fields": [
                    {
                      "name": "action",
                      "type": 307,
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "storage_limit",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "valid_until",
                      "type": 70,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "call",
                  "fields": [
                    {
                      "name": "target",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "storage_limit",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Issue an EVM call operation. This is similar to a message call",
                    "transaction in Ethereum.",
                    "",
                    "- `target`: the contract address to call",
                    "- `input`: the data supplied for the call",
                    "- `value`: the amount sent for payable calls",
                    "- `gas_limit`: the maximum gas the call can use",
                    "- `storage_limit`: the total bytes the contract's storage can increase by"
                  ]
                },
                {
                  "name": "scheduled_call",
                  "fields": [
                    {
                      "name": "from",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "storage_limit",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Issue an EVM call operation on a scheduled contract call, and",
                    "refund the unused gas reserved when the call was scheduled.",
                    "",
                    "- `from`: the address the scheduled call originates from",
                    "- `target`: the contract address to call",
                    "- `input`: the data supplied for the call",
                    "- `value`: the amount sent for payable calls",
                    "- `gas_limit`: the maximum gas the call can use",
                    "- `storage_limit`: the total bytes the contract's storage can increase by"
                  ]
                },
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "init",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "storage_limit",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Issue an EVM create operation. This is similar to a contract",
                    "creation transaction in Ethereum.",
                    "",
                    "- `init`: the data supplied for the contract's constructor",
                    "- `value`: the amount sent to the contract upon creation",
                    "- `gas_limit`: the maximum gas the call can use",
                    "- `storage_limit`: the total bytes the contract's storage can increase by"
                  ]
                },
                {
                  "name": "create2",
                  "fields": [
                    {
                      "name": "init",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {"name": "salt", "type": 9, "typeName": "H256", "docs": []},
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "storage_limit",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Issue an EVM create2 operation.",
                    "",
                    "- `target`: the contract address to call",
                    "- `init`: the data supplied for the contract's constructor",
                    "- `salt`: used for generating the new contract's address",
                    "- `value`: the amount sent for payable calls",
                    "- `gas_limit`: the maximum gas the call can use",
                    "- `storage_limit`: the total bytes the contract's storage can increase by"
                  ]
                },
                {
                  "name": "create_network_contract",
                  "fields": [
                    {
                      "name": "init",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "storage_limit",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Issue an EVM create operation. The next available system contract",
                    "address will be used as created contract address.",
                    "",
                    "- `init`: the data supplied for the contract's constructor",
                    "- `value`: the amount sent for payable calls",
                    "- `gas_limit`: the maximum gas the call can use",
                    "- `storage_limit`: the total bytes the contract's storage can increase by"
                  ]
                },
                {
                  "name": "create_predeploy_contract",
                  "fields": [
                    {
                      "name": "target",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "init",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 53,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 72,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "storage_limit",
                      "type": 70,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Issue an EVM create operation. The address specified",
                    "will be used as created contract address.",
                    "",
                    "- `target`: the address specified by the contract",
                    "- `init`: the data supplied for the contract's constructor",
                    "- `value`: the amount sent for payable calls",
                    "- `gas_limit`: the maximum gas the call can use",
                    "- `storage_limit`: the total bytes the contract's storage can increase by"
                  ]
                },
                {
                  "name": "transfer_maintainer",
                  "fields": [
                    {
                      "name": "contract",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "new_maintainer",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Transfers Contract maintainership to a new EVM Address.",
                    "",
                    "- `contract`: the contract whose maintainership is being transferred, the caller must be",
                    "  the contract's maintainer",
                    "- `new_maintainer`: the address of the new maintainer"
                  ]
                },
                {
                  "name": "deploy",
                  "fields": [
                    {
                      "name": "contract",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Mark a given contract as deployed.",
                    "",
                    "- `contract`: The contract to mark as deployed, the caller must the contract's",
                    "  maintainer"
                  ]
                },
                {
                  "name": "deploy_free",
                  "fields": [
                    {
                      "name": "contract",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Mark a given contract as deployed without paying the deployment fee",
                    "",
                    "- `contract`: The contract to mark as deployed, the caller must be the contract's",
                    "  maintainer."
                  ]
                },
                {
                  "name": "enable_contract_development",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Mark the caller's address to allow contract development.",
                    "This allows the address to interact with non-deployed contracts."
                  ]
                },
                {
                  "name": "disable_contract_development",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Mark the caller's address to disable contract development.",
                    "This disallows the address to interact with non-deployed contracts."
                  ]
                },
                {
                  "name": "set_code",
                  "fields": [
                    {
                      "name": "contract",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "code",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Set the code of a contract at a given address.",
                    "",
                    "- `contract`: The contract whose code is being set, must not be marked as deployed",
                    "- `code`: The new ABI bundle for the contract"
                  ]
                },
                {
                  "name": "selfdestruct",
                  "fields": [
                    {
                      "name": "contract",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Remove a contract at a given address.",
                    "",
                    "- `contract`: The contract to remove, must not be marked as deployed"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 307,
        "type": {
          "path": ["ethereum", "transaction", "TransactionAction"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Call",
                  "fields": [
                    {"name": null, "type": 47, "typeName": "H160", "docs": []}
                  ],
                  "index": 0,
                  "docs": []
                },
                {"name": "Create", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 308,
        "type": {
          "path": ["module_evm_accounts", "module", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "claim_account",
                  "fields": [
                    {
                      "name": "eth_address",
                      "type": 47,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "eth_signature",
                      "type": 309,
                      "typeName": "EcdsaSignature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Claim account mapping between Substrate accounts and EVM accounts.",
                    "Ensure eth_address has not been mapped.",
                    "",
                    "- `eth_address`: The address to bind to the caller's account",
                    "- `eth_signature`: A signature generated by the address to prove ownership"
                  ]
                },
                {
                  "name": "claim_default_account",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Claim account mapping between Substrate accounts and a generated EVM",
                    "address based off of those accounts.",
                    "Ensure eth_address has not been mapped"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 309,
        "type": {
          "path": ["sp_core", "ecdsa", "Signature"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 310, "typeName": "[u8; 65]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 310,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Array": {"len": 65, "type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 311,
        "type": {
          "path": ["pallet_sudo", "pallet", "Call"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "sudo",
                  "fields": [
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "- Limited storage reads.",
                    "- One DB write (event).",
                    "- Weight of derivative `call` execution + 10,000.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "sudo_unchecked_weight",
                  "fields": [
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                    "This function does not check the weight of the call, and instead allows the",
                    "Sudo user to specify the weight of the call.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "- The weight of this call is defined by the caller.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "set_key",
                  "fields": [
                    {
                      "name": "new",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                    "key.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "- Limited storage reads.",
                    "- One DB change.",
                    "# </weight>"
                  ]
                },
                {
                  "name": "sudo_as",
                  "fields": [
                    {
                      "name": "who",
                      "type": 207,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 194,
                      "typeName": "Box<<T as Config>::Call>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                    "a given account.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "# <weight>",
                    "- O(1).",
                    "- Limited storage reads.",
                    "- One DB write (event).",
                    "- Weight of derivative `call` execution + 10,000.",
                    "# </weight>"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        }
      },
      {
        "id": 312,
        "type": {
          "path": ["pallet_scheduler", "Releases"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "V1", "fields": [], "index": 0, "docs": []},
                {"name": "V2", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 313,
        "type": {
          "path": ["pallet_scheduler", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "FailedToSchedule",
                  "fields": [],
                  "index": 0,
                  "docs": ["Failed to schedule a call"]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["Cannot find the scheduled call."]
                },
                {
                  "name": "TargetBlockNumberInPast",
                  "fields": [],
                  "index": 2,
                  "docs": ["Given target block number is in the past."]
                },
                {
                  "name": "RescheduleNoChange",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Reschedule failed because it does not change scheduled time."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 314,
        "type": {
          "path": ["pallet_utility", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "TooManyCalls",
                  "fields": [],
                  "index": 0,
                  "docs": ["Too many calls batched."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 315,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [0, 1]
          },
          "docs": []
        }
      },
      {
        "id": 316,
        "type": {
          "path": ["pallet_multisig", "Multisig"],
          "params": [
            {"name": "BlockNumber", "type": 4},
            {"name": "Balance", "type": 6},
            {"name": "AccountId", "type": 0}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "when",
                  "type": 35,
                  "typeName": "Timepoint<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "approvals",
                  "type": 59,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 317,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [10, 0, 6]
          },
          "docs": []
        }
      },
      {
        "id": 318,
        "type": {
          "path": ["pallet_multisig", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MinimumThreshold",
                  "fields": [],
                  "index": 0,
                  "docs": ["Threshold must be 2 or greater."]
                },
                {
                  "name": "AlreadyApproved",
                  "fields": [],
                  "index": 1,
                  "docs": ["Call is already approved by this signatory."]
                },
                {
                  "name": "NoApprovalsNeeded",
                  "fields": [],
                  "index": 2,
                  "docs": ["Call doesn't need any (more) approvals."]
                },
                {
                  "name": "TooFewSignatories",
                  "fields": [],
                  "index": 3,
                  "docs": ["There are too few signatories in the list."]
                },
                {
                  "name": "TooManySignatories",
                  "fields": [],
                  "index": 4,
                  "docs": ["There are too many signatories in the list."]
                },
                {
                  "name": "SignatoriesOutOfOrder",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The signatories were provided out of order; they should be ordered."
                  ]
                },
                {
                  "name": "SenderInSignatories",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The sender was contained in the other signatories; it shouldn't be."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Multisig operation not found when attempting to cancel."
                  ]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Only the account that originally created the multisig is able to cancel it."
                  ]
                },
                {
                  "name": "NoTimepoint",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "No timepoint was given, yet the multisig operation is already underway."
                  ]
                },
                {
                  "name": "WrongTimepoint",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "A different timepoint was given to the multisig operation that is underway."
                  ]
                },
                {
                  "name": "UnexpectedTimepoint",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "A timepoint was given, yet no multisig operation is underway."
                  ]
                },
                {
                  "name": "MaxWeightTooLow",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The maximum weight information provided was too low."
                  ]
                },
                {
                  "name": "AlreadyStored",
                  "fields": [],
                  "index": 13,
                  "docs": ["The data to be stored is already stored."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 319,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [320, 6]
          },
          "docs": []
        }
      },
      {
        "id": 320,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 321},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 322, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 321,
        "type": {
          "path": ["pallet_proxy", "ProxyDefinition"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "ProxyType", "type": 37},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 37,
                  "typeName": "ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 322,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 321}
          },
          "docs": []
        }
      },
      {
        "id": 323,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [324, 6]
          },
          "docs": []
        }
      },
      {
        "id": 324,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 325},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 326, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 325,
        "type": {
          "path": ["pallet_proxy", "Announcement"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "Hash", "type": 9},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "height",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 326,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 325}
          },
          "docs": []
        }
      },
      {
        "id": 327,
        "type": {
          "path": ["pallet_proxy", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "TooMany",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "There are too many proxies registered or too many announcements pending."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["Proxy registration not found."]
                },
                {
                  "name": "NotProxy",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Sender is not a proxy of the account to be proxied."
                  ]
                },
                {
                  "name": "Unproxyable",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A call which is incompatible with the proxy type's filter was attempted."
                  ]
                },
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 4,
                  "docs": ["Account is already a proxy."]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Call may not be made by proxy because it may escalate its privileges."
                  ]
                },
                {
                  "name": "Unannounced",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Announcement, if made at all, was made too recently."
                  ]
                },
                {
                  "name": "NoSelfProxy",
                  "fields": [],
                  "index": 7,
                  "docs": ["Cannot add self as proxy."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 328,
        "type": {
          "path": ["module_transaction_pause", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "CannotPause",
                  "fields": [],
                  "index": 0,
                  "docs": ["can not pause"]
                },
                {
                  "name": "InvalidCharacter",
                  "fields": [],
                  "index": 1,
                  "docs": ["invalid character encoding"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 329,
        "type": {
          "path": [
            "frame_support",
            "storage",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {"name": "T", "type": 330},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 332, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 330,
        "type": {
          "path": ["pallet_balances", "BalanceLock"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "id",
                  "type": 84,
                  "typeName": "LockIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reasons",
                  "type": 331,
                  "typeName": "Reasons",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 331,
        "type": {
          "path": ["pallet_balances", "Reasons"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Fee", "fields": [], "index": 0, "docs": []},
                {"name": "Misc", "fields": [], "index": 1, "docs": []},
                {"name": "All", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 332,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 330}
          },
          "docs": []
        }
      },
      {
        "id": 333,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 334},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 336, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 334,
        "type": {
          "path": ["pallet_balances", "ReserveData"],
          "params": [
            {"name": "ReserveIdentifier", "type": 335},
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "id",
                  "type": 335,
                  "typeName": "ReserveIdentifier",
                  "docs": []
                },
                {"name": "amount", "type": 6, "typeName": "Balance", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 335,
        "type": {
          "path": ["acala_primitives", "ReserveIdentifier"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "CollatorSelection",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "EvmStorageDeposit",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "EvmDeveloperDeposit",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {"name": "Honzon", "fields": [], "index": 3, "docs": []},
                {"name": "Nft", "fields": [], "index": 4, "docs": []},
                {
                  "name": "TransactionPayment",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {"name": "Count", "fields": [], "index": 6, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 336,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 334}
          },
          "docs": []
        }
      },
      {
        "id": 337,
        "type": {
          "path": ["pallet_balances", "Releases"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "V1_0_0", "fields": [], "index": 0, "docs": []},
                {"name": "V2_0_0", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 338,
        "type": {
          "path": ["pallet_balances", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "VestingBalance",
                  "fields": [],
                  "index": 0,
                  "docs": ["Vesting balance too high to send value"]
                },
                {
                  "name": "LiquidityRestrictions",
                  "fields": [],
                  "index": 1,
                  "docs": ["Account liquidity restrictions prevent withdrawal"]
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 2,
                  "docs": ["Balance too low to send value"]
                },
                {
                  "name": "ExistentialDeposit",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Value too low to create account due to existential deposit"
                  ]
                },
                {
                  "name": "KeepAlive",
                  "fields": [],
                  "index": 4,
                  "docs": ["Transfer/payment would kill account"]
                },
                {
                  "name": "ExistingVestingSchedule",
                  "fields": [],
                  "index": 5,
                  "docs": ["A vesting schedule already exists for this account"]
                },
                {
                  "name": "DeadAccount",
                  "fields": [],
                  "index": 6,
                  "docs": ["Beneficiary account must pre-exist"]
                },
                {
                  "name": "TooManyReserves",
                  "fields": [],
                  "index": 7,
                  "docs": ["Number of named reserves exceed MaxReserves"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 339,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [0, 44]
          },
          "docs": []
        }
      },
      {
        "id": 340,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 341},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 342, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 341,
        "type": {
          "path": ["orml_tokens", "BalanceLock"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "id",
                  "type": 84,
                  "typeName": "LockIdentifier",
                  "docs": []
                },
                {"name": "amount", "type": 6, "typeName": "Balance", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 342,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 341}
          },
          "docs": []
        }
      },
      {
        "id": 343,
        "type": {
          "path": ["orml_tokens", "AccountData"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "free", "type": 6, "typeName": "Balance", "docs": []},
                {
                  "name": "reserved",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {"name": "frozen", "type": 6, "typeName": "Balance", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 344,
        "type": {
          "path": ["orml_tokens", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "BalanceTooLow",
                  "fields": [],
                  "index": 0,
                  "docs": ["The balance is too low"]
                },
                {
                  "name": "AmountIntoBalanceFailed",
                  "fields": [],
                  "index": 1,
                  "docs": ["Cannot convert Amount into Balance type"]
                },
                {
                  "name": "LiquidityRestrictions",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Failed because liquidity restrictions due to locking"
                  ]
                },
                {
                  "name": "MaxLocksExceeded",
                  "fields": [],
                  "index": 3,
                  "docs": ["Failed because the maximum locks was exceeded"]
                },
                {
                  "name": "KeepAlive",
                  "fields": [],
                  "index": 4,
                  "docs": ["Transfer/payment would kill account"]
                },
                {
                  "name": "ExistentialDeposit",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Value too low to create account due to existential deposit"
                  ]
                },
                {
                  "name": "DeadAccount",
                  "fields": [],
                  "index": 6,
                  "docs": ["Beneficiary account must pre-exist"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 345,
        "type": {
          "path": ["module_currencies", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AmountIntoBalanceFailed",
                  "fields": [],
                  "index": 0,
                  "docs": ["Unable to convert the Amount type into Balance."]
                },
                {
                  "name": "BalanceTooLow",
                  "fields": [],
                  "index": 1,
                  "docs": ["Balance is too low."]
                },
                {
                  "name": "Erc20InvalidOperation",
                  "fields": [],
                  "index": 2,
                  "docs": ["Erc20 invalid operation"]
                },
                {
                  "name": "EvmAccountNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": ["EVM account not found"]
                },
                {
                  "name": "RealOriginNotFound",
                  "fields": [],
                  "index": 4,
                  "docs": ["Real origin not found"]
                },
                {
                  "name": "DepositFailed",
                  "fields": [],
                  "index": 5,
                  "docs": ["Deposit result is not expected"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 346,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 52},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 210, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 347,
        "type": {
          "path": ["orml_vesting", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ZeroVestingPeriod",
                  "fields": [],
                  "index": 0,
                  "docs": ["Vesting period is zero"]
                },
                {
                  "name": "ZeroVestingPeriodCount",
                  "fields": [],
                  "index": 1,
                  "docs": ["Number of vests is zero"]
                },
                {
                  "name": "InsufficientBalanceToLock",
                  "fields": [],
                  "index": 2,
                  "docs": ["Insufficient amount of balance to lock"]
                },
                {
                  "name": "TooManyVestingSchedules",
                  "fields": [],
                  "index": 3,
                  "docs": ["This account have too many vesting schedules"]
                },
                {
                  "name": "AmountLow",
                  "fields": [],
                  "index": 4,
                  "docs": ["The vested transfer amount is too low"]
                },
                {
                  "name": "MaxVestingSchedulesExceeded",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Failed because the maximum vesting schedules was exceeded"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 348,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 44},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 139, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 349,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 139}
          },
          "docs": []
        }
      },
      {
        "id": 350,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 351}
          },
          "docs": []
        }
      },
      {
        "id": 351,
        "type": {
          "path": ["frame_support", "weights", "WeightToFeeCoefficient"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "coeff_integer",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "coeff_frac",
                  "type": 174,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "negative",
                  "type": 121,
                  "typeName": "bool",
                  "docs": []
                },
                {"name": "degree", "type": 2, "typeName": "u8", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 352,
        "type": {
          "path": ["module_transaction_payment", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidSwapPath",
                  "fields": [],
                  "index": 0,
                  "docs": ["The swap path is invalid"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 353,
        "type": {
          "path": ["pallet_treasury", "Proposal"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "proposer",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {"name": "value", "type": 6, "typeName": "Balance", "docs": []},
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {"name": "bond", "type": 6, "typeName": "Balance", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 354,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 4},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 355, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 355,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 4}
          },
          "docs": []
        }
      },
      {
        "id": 356,
        "type": {
          "path": ["frame_support", "PalletId"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 84, "typeName": "[u8; 8]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 357,
        "type": {
          "path": ["pallet_treasury", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": ["Proposer's balance is too low."]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": ["No proposal or bounty at that index."]
                },
                {
                  "name": "TooManyApprovals",
                  "fields": [],
                  "index": 2,
                  "docs": ["Too many approvals in the queue."]
                }
              ]
            }
          },
          "docs": ["Error for the treasury pallet."]
        }
      },
      {
        "id": 358,
        "type": {
          "path": ["pallet_bounties", "Bounty"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "Balance", "type": 6},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "proposer",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {"name": "value", "type": 6, "typeName": "Balance", "docs": []},
                {"name": "fee", "type": 6, "typeName": "Balance", "docs": []},
                {
                  "name": "curator_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {"name": "bond", "type": 6, "typeName": "Balance", "docs": []},
                {
                  "name": "status",
                  "type": 359,
                  "typeName": "BountyStatus<AccountId, BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 359,
        "type": {
          "path": ["pallet_bounties", "BountyStatus"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Proposed", "fields": [], "index": 0, "docs": []},
                {"name": "Approved", "fields": [], "index": 1, "docs": []},
                {"name": "Funded", "fields": [], "index": 2, "docs": []},
                {
                  "name": "CuratorProposed",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "update_due",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "PendingPayout",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 360,
        "type": {
          "path": ["pallet_bounties", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": ["Proposer's balance is too low."]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": ["No proposal or bounty at that index."]
                },
                {
                  "name": "ReasonTooBig",
                  "fields": [],
                  "index": 2,
                  "docs": ["The reason given is just too big."]
                },
                {
                  "name": "UnexpectedStatus",
                  "fields": [],
                  "index": 3,
                  "docs": ["The bounty status is unexpected."]
                },
                {
                  "name": "RequireCurator",
                  "fields": [],
                  "index": 4,
                  "docs": ["Require bounty curator."]
                },
                {
                  "name": "InvalidValue",
                  "fields": [],
                  "index": 5,
                  "docs": ["Invalid bounty value."]
                },
                {
                  "name": "InvalidFee",
                  "fields": [],
                  "index": 6,
                  "docs": ["Invalid bounty fee."]
                },
                {
                  "name": "PendingPayout",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "A bounty payout is pending.",
                    "To cancel the bounty, you must unassign and slash the curator."
                  ]
                },
                {
                  "name": "Premature",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The bounties cannot be claimed/closed because it's still in the countdown period."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 361,
        "type": {
          "path": ["pallet_tips", "OpenTip"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "Balance", "type": 6},
            {"name": "BlockNumber", "type": 4},
            {"name": "Hash", "type": 9}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "reason", "type": 9, "typeName": "Hash", "docs": []},
                {"name": "who", "type": 0, "typeName": "AccountId", "docs": []},
                {
                  "name": "finder",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "closes",
                  "type": 259,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "tips",
                  "type": 362,
                  "typeName": "Vec<(AccountId, Balance)>",
                  "docs": []
                },
                {
                  "name": "finders_fee",
                  "type": 121,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 362,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 363}
          },
          "docs": []
        }
      },
      {
        "id": 363,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [0, 6]
          },
          "docs": []
        }
      },
      {
        "id": 364,
        "type": {
          "path": ["sp_arithmetic", "per_things", "Percent"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 2, "typeName": "u8", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 365,
        "type": {
          "path": ["pallet_tips", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ReasonTooBig",
                  "fields": [],
                  "index": 0,
                  "docs": ["The reason given is just too big."]
                },
                {
                  "name": "AlreadyKnown",
                  "fields": [],
                  "index": 1,
                  "docs": ["The tip was already found/started."]
                },
                {
                  "name": "UnknownTip",
                  "fields": [],
                  "index": 2,
                  "docs": ["The tip hash is unknown."]
                },
                {
                  "name": "NotFinder",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The account attempting to retract the tip is not the finder of the tip."
                  ]
                },
                {
                  "name": "StillOpen",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The tip cannot be claimed/closed because there are not enough tippers yet."
                  ]
                },
                {
                  "name": "Premature",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The tip cannot be claimed/closed because it's still in the countdown period."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 366,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 367}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 367, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 367,
        "type": {
          "path": ["polkadot_primitives", "v1", "UpgradeRestriction"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Present", "fields": [], "index": 0, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 368,
        "type": {
          "path": [
            "cumulus_pallet_parachain_system",
            "relay_state_snapshot",
            "MessagingStateSnapshot"
          ],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "dmq_mqc_head",
                  "type": 9,
                  "typeName": "relay_chain::Hash",
                  "docs": []
                },
                {
                  "name": "relay_dispatch_queue_size",
                  "type": 29,
                  "typeName": "(u32, u32)",
                  "docs": []
                },
                {
                  "name": "ingress_channels",
                  "type": 369,
                  "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                  "docs": []
                },
                {
                  "name": "egress_channels",
                  "type": 369,
                  "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 369,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 370}
          },
          "docs": []
        }
      },
      {
        "id": 370,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [112, 371]
          },
          "docs": []
        }
      },
      {
        "id": 371,
        "type": {
          "path": ["polkadot_primitives", "v1", "AbridgedHrmpChannel"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_total_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {"name": "msg_count", "type": 4, "typeName": "u32", "docs": []},
                {
                  "name": "total_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "mqc_head",
                  "type": 63,
                  "typeName": "Option<Hash>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 372,
        "type": {
          "path": ["polkadot_primitives", "v1", "AbridgedHostConfiguration"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "max_code_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_head_data_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_num_per_candidate",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_message_num_per_candidate",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_frequency",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 373,
        "type": {
          "path": ["cumulus_pallet_parachain_system", "MessageQueueChain"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "relay_chain::Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 374,
        "type": {
          "path": ["BTreeMap"],
          "params": [
            {"name": "K", "type": 112},
            {"name": "V", "type": 373}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 375, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 375,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 376}
          },
          "docs": []
        }
      },
      {
        "id": 376,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [112, 373]
          },
          "docs": []
        }
      },
      {
        "id": 377,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 378}
          },
          "docs": []
        }
      },
      {
        "id": 378,
        "type": {
          "path": ["polkadot_core_primitives", "OutboundHrmpMessage"],
          "params": [
            {"name": "Id", "type": 112}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "recipient",
                  "type": 112,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 379,
        "type": {
          "path": ["cumulus_pallet_parachain_system", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "OverlappingUpgrades",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Attempt to upgrade validation function while existing upgrade pending"
                  ]
                },
                {
                  "name": "ProhibitedByPolkadot",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Polkadot currently prohibits this parachain from upgrading its validation function"
                  ]
                },
                {
                  "name": "TooBig",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The supplied validation function has compiled into a blob larger than Polkadot is",
                    "willing to run"
                  ]
                },
                {
                  "name": "ValidationDataNotAvailable",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The inherent which supplies the validation data did not run this block"
                  ]
                },
                {
                  "name": "HostConfigurationNotAvailable",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The inherent which supplies the host configuration did not run this block"
                  ]
                },
                {
                  "name": "NotScheduled",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "No validation function upgrade is currently scheduled."
                  ]
                },
                {
                  "name": "NothingAuthorized",
                  "fields": [],
                  "index": 6,
                  "docs": ["No code upgrade has been authorized."]
                },
                {
                  "name": "Unauthorized",
                  "fields": [],
                  "index": 7,
                  "docs": ["The given code upgrade has not been authorized."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 380,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 381}
          },
          "docs": []
        }
      },
      {
        "id": 381,
        "type": {
          "path": ["pallet_authorship", "UncleEntryItem"],
          "params": [
            {"name": "BlockNumber", "type": 4},
            {"name": "Hash", "type": 9},
            {"name": "Author", "type": 0}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InclusionHeight",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Uncle",
                  "fields": [
                    {"name": null, "type": 9, "typeName": "Hash", "docs": []},
                    {
                      "name": null,
                      "type": 119,
                      "typeName": "Option<Author>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 382,
        "type": {
          "path": ["pallet_authorship", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidUncleParent",
                  "fields": [],
                  "index": 0,
                  "docs": ["The uncle parent not in the chain."]
                },
                {
                  "name": "UnclesAlreadySet",
                  "fields": [],
                  "index": 1,
                  "docs": ["Uncles already set in the block."]
                },
                {
                  "name": "TooManyUncles",
                  "fields": [],
                  "index": 2,
                  "docs": ["Too many uncles."]
                },
                {
                  "name": "GenesisUncle",
                  "fields": [],
                  "index": 3,
                  "docs": ["The uncle is genesis."]
                },
                {
                  "name": "TooHighUncle",
                  "fields": [],
                  "index": 4,
                  "docs": ["The uncle is too high in chain."]
                },
                {
                  "name": "UncleAlreadyIncluded",
                  "fields": [],
                  "index": 5,
                  "docs": ["The uncle is already included."]
                },
                {
                  "name": "OldUncle",
                  "fields": [],
                  "index": 6,
                  "docs": ["The uncle isn't recent enough to be included."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 383,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 0},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 59, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 384,
        "type": {
          "path": [
            "frame_support",
            "storage",
            "bounded_btree_set",
            "BoundedBTreeSet"
          ],
          "params": [
            {"name": "T", "type": 0},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 385,
                  "typeName": "BTreeSet<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 385,
        "type": {
          "path": ["BTreeSet"],
          "params": [
            {"name": "T", "type": 0}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 59, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 386,
        "type": {
          "path": ["module_collator_selection", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MaxCandidatesExceeded",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "BelowCandidatesMin",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {"name": "StillLocked", "fields": [], "index": 2, "docs": []},
                {"name": "Unknown", "fields": [], "index": 3, "docs": []},
                {"name": "Permission", "fields": [], "index": 4, "docs": []},
                {
                  "name": "AlreadyCandidate",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {"name": "NotCandidate", "fields": [], "index": 6, "docs": []},
                {
                  "name": "NotNonCandidate",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "NothingToWithdraw",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "RequireSessionKey",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "AlreadyInvulnerable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {"name": "InvalidProof", "fields": [], "index": 11, "docs": []},
                {
                  "name": "MaxInvulnerablesExceeded",
                  "fields": [],
                  "index": 12,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 387,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 388}
          },
          "docs": []
        }
      },
      {
        "id": 388,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [0, 230]
          },
          "docs": []
        }
      },
      {
        "id": 389,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [390, 10]
          },
          "docs": []
        }
      },
      {
        "id": 390,
        "type": {
          "path": ["sp_core", "crypto", "KeyTypeId"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 14, "typeName": "[u8; 4]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 391,
        "type": {
          "path": ["pallet_session", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidProof",
                  "fields": [],
                  "index": 0,
                  "docs": ["Invalid ownership proof."]
                },
                {
                  "name": "NoAssociatedValidatorId",
                  "fields": [],
                  "index": 1,
                  "docs": ["No associated validator ID for account."]
                },
                {
                  "name": "DuplicatedKey",
                  "fields": [],
                  "index": 2,
                  "docs": ["Registered duplicate key."]
                },
                {
                  "name": "NoKeys",
                  "fields": [],
                  "index": 3,
                  "docs": ["No keys are associated with this account."]
                },
                {
                  "name": "NoAccount",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Key setting account is not live, so it's impossible to associate keys."
                  ]
                }
              ]
            }
          },
          "docs": ["Error for the session pallet."]
        }
      },
      {
        "id": 392,
        "type": {
          "path": [
            "frame_support",
            "storage",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {"name": "T", "type": 231},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 393, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 393,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 231}
          },
          "docs": []
        }
      },
      {
        "id": 394,
        "type": {
          "path": ["sp_consensus_slots", "Slot"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 8, "typeName": "u64", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 395,
        "type": {
          "path": ["module_session_manager", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidSession",
                  "fields": [],
                  "index": 0,
                  "docs": ["The session is invalid."]
                },
                {
                  "name": "InvalidDuration",
                  "fields": [],
                  "index": 1,
                  "docs": ["The duration is invalid."]
                },
                {
                  "name": "EstimateNextSessionFailed",
                  "fields": [],
                  "index": 2,
                  "docs": ["Failed to estimate next session."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 396,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 397}
          },
          "docs": []
        }
      },
      {
        "id": 397,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [112, 398, 399]
          },
          "docs": []
        }
      },
      {
        "id": 398,
        "type": {
          "path": ["cumulus_pallet_xcmp_queue", "InboundStatus"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Ok", "fields": [], "index": 0, "docs": []},
                {"name": "Suspended", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 399,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 400}
          },
          "docs": []
        }
      },
      {
        "id": 400,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 401]
          },
          "docs": []
        }
      },
      {
        "id": 401,
        "type": {
          "path": ["polkadot_parachain", "primitives", "XcmpMessageFormat"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ConcatenatedVersionedXcm",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ConcatenatedEncodedBlob",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {"name": "Signals", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 402,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [112, 4]
          },
          "docs": []
        }
      },
      {
        "id": 403,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 404}
          },
          "docs": []
        }
      },
      {
        "id": 404,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [112, 405, 121, 38, 38]
          },
          "docs": []
        }
      },
      {
        "id": 405,
        "type": {
          "path": ["cumulus_pallet_xcmp_queue", "OutboundStatus"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Ok", "fields": [], "index": 0, "docs": []},
                {"name": "Suspended", "fields": [], "index": 1, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 406,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [112, 38]
          },
          "docs": []
        }
      },
      {
        "id": 407,
        "type": {
          "path": ["cumulus_pallet_xcmp_queue", "QueueConfigData"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "suspend_threshold",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "drop_threshold",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "resume_threshold",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "threshold_weight",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "weight_restrict_decay",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 408,
        "type": {
          "path": ["cumulus_pallet_xcmp_queue", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "FailedToSend",
                  "fields": [],
                  "index": 0,
                  "docs": ["Failed to send XCM message."]
                },
                {
                  "name": "BadXcmOrigin",
                  "fields": [],
                  "index": 1,
                  "docs": ["Bad XCM origin."]
                },
                {
                  "name": "BadXcm",
                  "fields": [],
                  "index": 2,
                  "docs": ["Bad XCM data."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 409,
        "type": {
          "path": ["pallet_xcm", "pallet", "QueryStatus"],
          "params": [
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Pending",
                  "fields": [
                    {
                      "name": "responder",
                      "type": 101,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "maybe_notify",
                      "type": 410,
                      "typeName": "Option<(u8, u8)>",
                      "docs": []
                    },
                    {
                      "name": "timeout",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "VersionNotifier",
                  "fields": [
                    {
                      "name": "origin",
                      "type": 101,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "is_active",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ready",
                  "fields": [
                    {
                      "name": "response",
                      "type": 412,
                      "typeName": "VersionedResponse",
                      "docs": []
                    },
                    {
                      "name": "at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 410,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 411}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 411, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 411,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [2, 2]
          },
          "docs": []
        }
      },
      {
        "id": 412,
        "type": {
          "path": ["xcm", "VersionedResponse"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "V0",
                  "fields": [
                    {
                      "name": null,
                      "type": 240,
                      "typeName": "v0::Response",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": null,
                      "type": 245,
                      "typeName": "v1::Response",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [
                    {
                      "name": null,
                      "type": 86,
                      "typeName": "v2::Response",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 413,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 101]
          },
          "docs": []
        }
      },
      {
        "id": 414,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [8, 8, 4]
          },
          "docs": []
        }
      },
      {
        "id": 415,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 416},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 417, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 416,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [101, 4]
          },
          "docs": []
        }
      },
      {
        "id": 417,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 416}
          },
          "docs": []
        }
      },
      {
        "id": 418,
        "type": {
          "path": ["pallet_xcm", "pallet", "VersionMigrationStage"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "MigrateSupportedVersion",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "MigrateVersionNotifiers",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotifyCurrentTargets",
                  "fields": [
                    {
                      "name": null,
                      "type": 30,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "MigrateAndNotifyOldTargets",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 419,
        "type": {
          "path": ["pallet_xcm", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Unreachable",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The desired destination was unreachable, generally because there is a no way of routing",
                    "to it."
                  ]
                },
                {
                  "name": "SendFailure",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                    "a lack of space for buffering the message."
                  ]
                },
                {
                  "name": "Filtered",
                  "fields": [],
                  "index": 2,
                  "docs": ["The message execution fails the filter."]
                },
                {
                  "name": "UnweighableMessage",
                  "fields": [],
                  "index": 3,
                  "docs": ["The message's weight could not be determined."]
                },
                {
                  "name": "DestinationNotInvertible",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The destination `MultiLocation` provided cannot be inverted."
                  ]
                },
                {
                  "name": "Empty",
                  "fields": [],
                  "index": 5,
                  "docs": ["The assets to be sent are empty."]
                },
                {
                  "name": "CannotReanchor",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Could not re-anchor the assets to declare the fees for the destination chain."
                  ]
                },
                {
                  "name": "TooManyAssets",
                  "fields": [],
                  "index": 7,
                  "docs": ["Too many assets have been attempted for transfer."]
                },
                {
                  "name": "InvalidOrigin",
                  "fields": [],
                  "index": 8,
                  "docs": ["Origin is invalid for sending."]
                },
                {
                  "name": "BadVersion",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The version of the `Versioned` value used is not able to be interpreted."
                  ]
                },
                {
                  "name": "BadLocation",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The given location could not be used (e.g. because it cannot be expressed in the",
                    "desired version of XCM)."
                  ]
                },
                {
                  "name": "NoSubscription",
                  "fields": [],
                  "index": 11,
                  "docs": ["The referenced subscription could not be found."]
                },
                {
                  "name": "AlreadySubscribed",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The location is invalid since it already has a subscription from us."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 420,
        "type": {
          "path": ["cumulus_pallet_xcm", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {"variants": []}
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 421,
        "type": {
          "path": ["cumulus_pallet_dmp_queue", "ConfigData"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "max_individual",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 422,
        "type": {
          "path": ["cumulus_pallet_dmp_queue", "PageIndexData"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "begin_used",
                  "type": 4,
                  "typeName": "PageCounter",
                  "docs": []
                },
                {
                  "name": "end_used",
                  "type": 4,
                  "typeName": "PageCounter",
                  "docs": []
                },
                {
                  "name": "overweight_count",
                  "type": 8,
                  "typeName": "OverweightIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 423,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 424}
          },
          "docs": []
        }
      },
      {
        "id": 424,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 10]
          },
          "docs": []
        }
      },
      {
        "id": 425,
        "type": {
          "path": ["cumulus_pallet_dmp_queue", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 0,
                  "docs": ["The message index given is unknown."]
                },
                {
                  "name": "OverLimit",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The amount of weight given is possibly not enough for executing the message."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 426,
        "type": {
          "path": ["orml_xtokens", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AssetHasNoReserve",
                  "fields": [],
                  "index": 0,
                  "docs": ["Asset has no reserve location."]
                },
                {
                  "name": "NotCrossChainTransfer",
                  "fields": [],
                  "index": 1,
                  "docs": ["Not cross-chain transfer."]
                },
                {
                  "name": "InvalidDest",
                  "fields": [],
                  "index": 2,
                  "docs": ["Invalid transfer destination."]
                },
                {
                  "name": "NotCrossChainTransferableCurrency",
                  "fields": [],
                  "index": 3,
                  "docs": ["Currency is not cross-chain transferable."]
                },
                {
                  "name": "UnweighableMessage",
                  "fields": [],
                  "index": 4,
                  "docs": ["The message's weight could not be determined."]
                },
                {
                  "name": "XcmExecutionFailed",
                  "fields": [],
                  "index": 5,
                  "docs": ["XCM execution failed."]
                },
                {
                  "name": "CannotReanchor",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Could not re-anchor the assets to declare the fees for the",
                    "destination chain."
                  ]
                },
                {
                  "name": "InvalidAncestry",
                  "fields": [],
                  "index": 7,
                  "docs": ["Could not get ancestry of asset reserve location."]
                },
                {
                  "name": "NotFungible",
                  "fields": [],
                  "index": 8,
                  "docs": ["Not fungible asset."]
                },
                {
                  "name": "DestinationNotInvertible",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The destination `MultiLocation` provided cannot be inverted."
                  ]
                },
                {
                  "name": "BadVersion",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The version of the `Versioned` value used is not able to be",
                    "interpreted."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 427,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [67, 67]
          },
          "docs": []
        }
      },
      {
        "id": 428,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [67, 10]
          },
          "docs": []
        }
      },
      {
        "id": 429,
        "type": {
          "path": ["orml_unknown_tokens", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "BalanceTooLow",
                  "fields": [],
                  "index": 0,
                  "docs": ["The balance is too low."]
                },
                {
                  "name": "BalanceOverflow",
                  "fields": [],
                  "index": 1,
                  "docs": ["The operation will cause balance to overflow."]
                },
                {
                  "name": "UnhandledAsset",
                  "fields": [],
                  "index": 2,
                  "docs": ["Unhandled asset."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 430,
        "type": {
          "path": ["orml_xcm", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Unreachable",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The message and destination combination was not recognized as being",
                    "reachable."
                  ]
                },
                {
                  "name": "SendFailure",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The message and destination was recognized as being reachable but",
                    "the operation could not be completed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 431,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [194, 119]
          },
          "docs": []
        }
      },
      {
        "id": 432,
        "type": {
          "path": ["orml_authority", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "FailedToSchedule",
                  "fields": [],
                  "index": 0,
                  "docs": ["Failed to schedule a task."]
                },
                {
                  "name": "FailedToCancel",
                  "fields": [],
                  "index": 1,
                  "docs": ["Failed to cancel a task."]
                },
                {
                  "name": "FailedToFastTrack",
                  "fields": [],
                  "index": 2,
                  "docs": ["Failed to fast track a task."]
                },
                {
                  "name": "FailedToDelay",
                  "fields": [],
                  "index": 3,
                  "docs": ["Failed to delay a task."]
                },
                {
                  "name": "CallNotAuthorized",
                  "fields": [],
                  "index": 4,
                  "docs": ["Call is not authorized."]
                },
                {
                  "name": "TriggerCallNotPermitted",
                  "fields": [],
                  "index": 5,
                  "docs": ["Triggering the call is not permitted."]
                },
                {
                  "name": "WrongCallWeightBound",
                  "fields": [],
                  "index": 6,
                  "docs": ["Call weight bound is wrong."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 433,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 9},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 160, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 434,
        "type": {
          "path": ["pallet_collective", "Votes"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "ayes",
                  "type": 59,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "nays",
                  "type": 59,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 435,
        "type": {
          "path": ["pallet_collective", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Account is not a member"]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": ["Duplicate proposals not allowed"]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": ["Proposal must exist"]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": ["Mismatched index"]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": ["Duplicate vote ignored"]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": ["Members are already initialized!"]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 436,
        "type": {
          "path": ["pallet_membership", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AlreadyMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Already a member."]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 1,
                  "docs": ["Not a member."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 437,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 9},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 160, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 438,
        "type": {
          "path": ["pallet_collective", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Account is not a member"]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": ["Duplicate proposals not allowed"]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": ["Proposal must exist"]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": ["Mismatched index"]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": ["Duplicate vote ignored"]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": ["Members are already initialized!"]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 439,
        "type": {
          "path": ["pallet_membership", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AlreadyMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Already a member."]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 1,
                  "docs": ["Not a member."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 440,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 9},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 160, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 441,
        "type": {
          "path": ["pallet_collective", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Account is not a member"]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": ["Duplicate proposals not allowed"]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": ["Proposal must exist"]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": ["Mismatched index"]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": ["Duplicate vote ignored"]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": ["Members are already initialized!"]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 442,
        "type": {
          "path": ["pallet_membership", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AlreadyMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Already a member."]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 1,
                  "docs": ["Not a member."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 443,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 9},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 160, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 444,
        "type": {
          "path": ["pallet_collective", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Account is not a member"]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": ["Duplicate proposals not allowed"]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": ["Proposal must exist"]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": ["Mismatched index"]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": ["Duplicate vote ignored"]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": ["Members are already initialized!"]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 445,
        "type": {
          "path": ["pallet_membership", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AlreadyMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Already a member."]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 1,
                  "docs": ["Not a member."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 446,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 447}
          },
          "docs": []
        }
      },
      {
        "id": 447,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 9, 0]
          },
          "docs": []
        }
      },
      {
        "id": 448,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [59, 6]
          },
          "docs": []
        }
      },
      {
        "id": 449,
        "type": {
          "path": ["pallet_democracy", "PreimageStatus"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "Balance", "type": 6},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Missing",
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Available",
                  "fields": [
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "provider",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "since",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "expiry",
                      "type": 259,
                      "typeName": "Option<BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 450,
        "type": {
          "path": ["pallet_democracy", "types", "ReferendumInfo"],
          "params": [
            {"name": "BlockNumber", "type": 4},
            {"name": "Hash", "type": 9},
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "name": null,
                      "type": 451,
                      "typeName":
                          "ReferendumStatus<BlockNumber, Hash, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Finished",
                  "fields": [
                    {
                      "name": "approved",
                      "type": 121,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 451,
        "type": {
          "path": ["pallet_democracy", "types", "ReferendumStatus"],
          "params": [
            {"name": "BlockNumber", "type": 4},
            {"name": "Hash", "type": 9},
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 130,
                  "typeName": "VoteThreshold",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "tally",
                  "type": 452,
                  "typeName": "Tally<Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 452,
        "type": {
          "path": ["pallet_democracy", "types", "Tally"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "ayes", "type": 6, "typeName": "Balance", "docs": []},
                {"name": "nays", "type": 6, "typeName": "Balance", "docs": []},
                {
                  "name": "turnout",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 453,
        "type": {
          "path": ["pallet_democracy", "vote", "Voting"],
          "params": [
            {"name": "Balance", "type": 6},
            {"name": "AccountId", "type": 0},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Direct",
                  "fields": [
                    {
                      "name": "votes",
                      "type": 454,
                      "typeName":
                          "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "type": 456,
                      "typeName": "Delegations<Balance>",
                      "docs": []
                    },
                    {
                      "name": "prior",
                      "type": 457,
                      "typeName": "PriorLock<BlockNumber, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Delegating",
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "type": 278,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "type": 456,
                      "typeName": "Delegations<Balance>",
                      "docs": []
                    },
                    {
                      "name": "prior",
                      "type": 457,
                      "typeName": "PriorLock<BlockNumber, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 454,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 455}
          },
          "docs": []
        }
      },
      {
        "id": 455,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 276]
          },
          "docs": []
        }
      },
      {
        "id": 456,
        "type": {
          "path": ["pallet_democracy", "types", "Delegations"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "votes", "type": 6, "typeName": "Balance", "docs": []},
                {
                  "name": "capital",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 457,
        "type": {
          "path": ["pallet_democracy", "vote", "PriorLock"],
          "params": [
            {"name": "BlockNumber", "type": 4},
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {"name": null, "type": 6, "typeName": "Balance", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 458,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [9, 130]
          },
          "docs": []
        }
      },
      {
        "id": 459,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [4, 59]
          },
          "docs": []
        }
      },
      {
        "id": 460,
        "type": {
          "path": ["pallet_democracy", "Releases"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "V1", "fields": [], "index": 0, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 461,
        "type": {
          "path": ["pallet_democracy", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ValueLow",
                  "fields": [],
                  "index": 0,
                  "docs": ["Value too low"]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 1,
                  "docs": ["Proposal does not exist"]
                },
                {
                  "name": "AlreadyCanceled",
                  "fields": [],
                  "index": 2,
                  "docs": ["Cannot cancel the same proposal twice"]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 3,
                  "docs": ["Proposal already made"]
                },
                {
                  "name": "ProposalBlacklisted",
                  "fields": [],
                  "index": 4,
                  "docs": ["Proposal still blacklisted"]
                },
                {
                  "name": "NotSimpleMajority",
                  "fields": [],
                  "index": 5,
                  "docs": ["Next external proposal not simple majority"]
                },
                {
                  "name": "InvalidHash",
                  "fields": [],
                  "index": 6,
                  "docs": ["Invalid hash"]
                },
                {
                  "name": "NoProposal",
                  "fields": [],
                  "index": 7,
                  "docs": ["No external proposal"]
                },
                {
                  "name": "AlreadyVetoed",
                  "fields": [],
                  "index": 8,
                  "docs": ["Identity may not veto a proposal twice"]
                },
                {
                  "name": "DuplicatePreimage",
                  "fields": [],
                  "index": 9,
                  "docs": ["Preimage already noted"]
                },
                {
                  "name": "NotImminent",
                  "fields": [],
                  "index": 10,
                  "docs": ["Not imminent"]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 11,
                  "docs": ["Too early"]
                },
                {
                  "name": "Imminent",
                  "fields": [],
                  "index": 12,
                  "docs": ["Imminent"]
                },
                {
                  "name": "PreimageMissing",
                  "fields": [],
                  "index": 13,
                  "docs": ["Preimage not found"]
                },
                {
                  "name": "ReferendumInvalid",
                  "fields": [],
                  "index": 14,
                  "docs": ["Vote given for invalid referendum"]
                },
                {
                  "name": "PreimageInvalid",
                  "fields": [],
                  "index": 15,
                  "docs": ["Invalid preimage"]
                },
                {
                  "name": "NoneWaiting",
                  "fields": [],
                  "index": 16,
                  "docs": ["No proposals waiting"]
                },
                {
                  "name": "NotVoter",
                  "fields": [],
                  "index": 17,
                  "docs": ["The given account did not vote on the referendum."]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 18,
                  "docs": ["The actor has no permission to conduct the action."]
                },
                {
                  "name": "AlreadyDelegating",
                  "fields": [],
                  "index": 19,
                  "docs": ["The account is already delegating."]
                },
                {
                  "name": "InsufficientFunds",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "Too high a balance was provided that the account cannot afford."
                  ]
                },
                {
                  "name": "NotDelegating",
                  "fields": [],
                  "index": 21,
                  "docs": ["The account is not currently delegating."]
                },
                {
                  "name": "VotesExist",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "The account currently has votes attached to it and the operation cannot succeed until",
                    "these are removed, either through `unvote` or `reap_vote`."
                  ]
                },
                {
                  "name": "InstantNotAllowed",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "The instant referendum origin is currently disallowed."
                  ]
                },
                {
                  "name": "Nonsense",
                  "fields": [],
                  "index": 24,
                  "docs": ["Delegation to oneself makes no sense."]
                },
                {
                  "name": "WrongUpperBound",
                  "fields": [],
                  "index": 25,
                  "docs": ["Invalid upper bound."]
                },
                {
                  "name": "MaxVotesReached",
                  "fields": [],
                  "index": 26,
                  "docs": ["Maximum number of votes reached."]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 27,
                  "docs": ["Maximum number of proposals reached."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 462,
        "type": {
          "path": ["orml_oracle", "module", "TimestampedValue"],
          "params": [
            {"name": "Value", "type": 134},
            {"name": "Moment", "type": 8}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "value", "type": 134, "typeName": "Value", "docs": []},
                {
                  "name": "timestamp",
                  "type": 8,
                  "typeName": "Moment",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 463,
        "type": {
          "path": ["orml_utilities", "ordered_set", "OrderedSet"],
          "params": [
            {"name": "T", "type": 0},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 464,
                  "typeName": "BoundedVec<T, S>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 464,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 0},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 59, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 465,
        "type": {
          "path": ["orml_oracle", "module", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 0,
                  "docs": ["Sender does not have permission"]
                },
                {
                  "name": "AlreadyFeeded",
                  "fields": [],
                  "index": 1,
                  "docs": ["Feeder has already feeded at this block"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 466,
        "type": {
          "path": ["pallet_membership", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null},
            {"name": "I", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AlreadyMember",
                  "fields": [],
                  "index": 0,
                  "docs": ["Already a member."]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 1,
                  "docs": ["Not a member."]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 467,
        "type": {
          "path": ["orml_traits", "auction", "AuctionInfo"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "Balance", "type": 6},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "bid",
                  "type": 468,
                  "typeName": "Option<(AccountId, Balance)>",
                  "docs": []
                },
                {
                  "name": "start",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 259,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 468,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 363}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 363, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 469,
        "type": {
          "path": ["orml_auction", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AuctionNotExist",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AuctionNotStarted",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BidNotAccepted",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "InvalidBidPrice",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "NoAvailableAuctionId",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 470,
        "type": {
          "path": ["orml_rewards", "PoolInfo"],
          "params": [
            {"name": "Share", "type": 6},
            {"name": "Balance", "type": 6},
            {"name": "CurrencyId", "type": 44}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "total_shares",
                  "type": 6,
                  "typeName": "Share",
                  "docs": []
                },
                {
                  "name": "rewards",
                  "type": 471,
                  "typeName": "BTreeMap<CurrencyId, (Balance, Balance)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 471,
        "type": {
          "path": ["BTreeMap"],
          "params": [
            {"name": "K", "type": 44},
            {"name": "V", "type": 472}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 473, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 472,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [6, 6]
          },
          "docs": []
        }
      },
      {
        "id": 473,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Sequence": {"type": 474}
          },
          "docs": []
        }
      },
      {
        "id": 474,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [44, 472]
          },
          "docs": []
        }
      },
      {
        "id": 475,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [155, 0]
          },
          "docs": []
        }
      },
      {
        "id": 476,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [6, 477]
          },
          "docs": []
        }
      },
      {
        "id": 477,
        "type": {
          "path": ["BTreeMap"],
          "params": [
            {"name": "K", "type": 44},
            {"name": "V", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 150, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 478,
        "type": {
          "path": ["orml_rewards", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "PoolDoesNotExist",
                  "fields": [],
                  "index": 0,
                  "docs": ["Pool does not exist"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 479,
        "type": {
          "path": ["orml_nft", "ClassInfo"],
          "params": [
            {"name": "TokenId", "type": 8},
            {"name": "AccountId", "type": 0},
            {"name": "Data", "type": 480},
            {"name": "ClassMetadataOf", "type": 481}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "metadata",
                  "type": 481,
                  "typeName": "ClassMetadataOf",
                  "docs": []
                },
                {
                  "name": "total_issuance",
                  "type": 8,
                  "typeName": "TokenId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {"name": "data", "type": 480, "typeName": "Data", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 480,
        "type": {
          "path": ["module_nft", "ClassData"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "properties",
                  "type": 302,
                  "typeName": "Properties",
                  "docs": []
                },
                {
                  "name": "attributes",
                  "type": 304,
                  "typeName": "Attributes",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 481,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 2},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 10, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 482,
        "type": {
          "path": ["orml_nft", "TokenInfo"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "Data", "type": 483},
            {"name": "TokenMetadataOf", "type": 484}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "metadata",
                  "type": 484,
                  "typeName": "TokenMetadataOf",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {"name": "data", "type": 483, "typeName": "Data", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 483,
        "type": {
          "path": ["module_nft", "TokenData"],
          "params": [
            {"name": "Balance", "type": 6}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "attributes",
                  "type": 304,
                  "typeName": "Attributes",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 484,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 2},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 10, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 485,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [0, 4, 8]
          },
          "docs": []
        }
      },
      {
        "id": 486,
        "type": {
          "path": ["orml_nft", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NoAvailableClassId",
                  "fields": [],
                  "index": 0,
                  "docs": ["No available class ID"]
                },
                {
                  "name": "NoAvailableTokenId",
                  "fields": [],
                  "index": 1,
                  "docs": ["No available token ID"]
                },
                {
                  "name": "TokenNotFound",
                  "fields": [],
                  "index": 2,
                  "docs": ["Token(ClassId, TokenId) not found"]
                },
                {
                  "name": "ClassNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": ["Class not found"]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The operator is not the owner of the token and has no permission"
                  ]
                },
                {
                  "name": "CannotDestroyClass",
                  "fields": [],
                  "index": 5,
                  "docs": ["Can not destroy class", "Total issuance is not 0"]
                },
                {
                  "name": "MaxMetadataExceeded",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Failed because the Maximum amount of metadata was exceeded"
                  ]
                }
              ]
            }
          },
          "docs": ["Error for non-fungible-token module."]
        }
      },
      {
        "id": 487,
        "type": {
          "path": ["module_prices", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AccessPriceFailed",
                  "fields": [],
                  "index": 0,
                  "docs": ["Failed to access price"]
                },
                {
                  "name": "NoLockedPrice",
                  "fields": [],
                  "index": 1,
                  "docs": ["There's no locked price"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 488,
        "type": {
          "path": ["module_dex", "TradingPairStatus"],
          "params": [
            {"name": "Balance", "type": 6},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Disabled", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Provisioning",
                  "fields": [
                    {
                      "name": null,
                      "type": 489,
                      "typeName":
                          "ProvisioningParameters<Balance, BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {"name": "Enabled", "fields": [], "index": 2, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 489,
        "type": {
          "path": ["module_dex", "ProvisioningParameters"],
          "params": [
            {"name": "Balance", "type": 6},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "min_contribution",
                  "type": 472,
                  "typeName": "(Balance, Balance)",
                  "docs": []
                },
                {
                  "name": "target_provision",
                  "type": 472,
                  "typeName": "(Balance, Balance)",
                  "docs": []
                },
                {
                  "name": "accumulated_provision",
                  "type": 472,
                  "typeName": "(Balance, Balance)",
                  "docs": []
                },
                {
                  "name": "not_before",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 490,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [141, 0]
          },
          "docs": []
        }
      },
      {
        "id": 491,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [134, 134]
          },
          "docs": []
        }
      },
      {
        "id": 492,
        "type": {
          "path": ["module_dex", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AlreadyEnabled",
                  "fields": [],
                  "index": 0,
                  "docs": ["Trading pair is already Enabled"]
                },
                {
                  "name": "MustBeEnabled",
                  "fields": [],
                  "index": 1,
                  "docs": ["Trading pair must be in Enabled status"]
                },
                {
                  "name": "MustBeProvisioning",
                  "fields": [],
                  "index": 2,
                  "docs": ["Trading pair must be in Provisioning status"]
                },
                {
                  "name": "MustBeDisabled",
                  "fields": [],
                  "index": 3,
                  "docs": ["Trading pair must be in Disabled status"]
                },
                {
                  "name": "NotAllowedList",
                  "fields": [],
                  "index": 4,
                  "docs": ["This trading pair is not allowed to be listed"]
                },
                {
                  "name": "InvalidContributionIncrement",
                  "fields": [],
                  "index": 5,
                  "docs": ["The increment of provision is invalid"]
                },
                {
                  "name": "InvalidLiquidityIncrement",
                  "fields": [],
                  "index": 6,
                  "docs": ["The increment of liquidity is invalid"]
                },
                {
                  "name": "InvalidCurrencyId",
                  "fields": [],
                  "index": 7,
                  "docs": ["Invalid currency id"]
                },
                {
                  "name": "InvalidTradingPathLength",
                  "fields": [],
                  "index": 8,
                  "docs": ["Invalid trading path length"]
                },
                {
                  "name": "InsufficientTargetAmount",
                  "fields": [],
                  "index": 9,
                  "docs": ["Target amount is less to min_target_amount"]
                },
                {
                  "name": "ExcessiveSupplyAmount",
                  "fields": [],
                  "index": 10,
                  "docs": ["Supply amount is more than max_supply_amount"]
                },
                {
                  "name": "InsufficientLiquidity",
                  "fields": [],
                  "index": 11,
                  "docs": ["Liquidity is not enough"]
                },
                {
                  "name": "ZeroSupplyAmount",
                  "fields": [],
                  "index": 12,
                  "docs": ["The supply amount is zero"]
                },
                {
                  "name": "ZeroTargetAmount",
                  "fields": [],
                  "index": 13,
                  "docs": ["The target amount is zero"]
                },
                {
                  "name": "UnacceptableShareIncrement",
                  "fields": [],
                  "index": 14,
                  "docs": ["The share increment is unacceptable"]
                },
                {
                  "name": "UnacceptableLiquidityWithdrawn",
                  "fields": [],
                  "index": 15,
                  "docs": ["The liquidity withdrawn is unacceptable"]
                },
                {
                  "name": "InvariantCheckFailed",
                  "fields": [],
                  "index": 16,
                  "docs": ["The swap dosen't meet the invariant check"]
                },
                {
                  "name": "UnqualifiedProvision",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The Provision is unqualified to be converted to `Enabled`"
                  ]
                },
                {
                  "name": "StillProvisioning",
                  "fields": [],
                  "index": 18,
                  "docs": ["Trading pair is still provisioning"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 493,
        "type": {
          "path": ["module_auction_manager", "CollateralAuctionItem"],
          "params": [
            {"name": "AccountId", "type": 0},
            {"name": "BlockNumber", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "refund_recipient",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "currency_id",
                  "type": 44,
                  "typeName": "CurrencyId",
                  "docs": []
                },
                {
                  "name": "initial_amount",
                  "type": 53,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 53,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 53,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "start_time",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 494,
        "type": {
          "path": ["module_auction_manager", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AuctionNotExists",
                  "fields": [],
                  "index": 0,
                  "docs": ["The auction dose not exist"]
                },
                {
                  "name": "InReverseStage",
                  "fields": [],
                  "index": 1,
                  "docs": ["The collateral auction is in reverse stage now"]
                },
                {
                  "name": "InvalidFeedPrice",
                  "fields": [],
                  "index": 2,
                  "docs": ["Feed price is invalid"]
                },
                {
                  "name": "MustAfterShutdown",
                  "fields": [],
                  "index": 3,
                  "docs": ["Must after system shutdown"]
                },
                {
                  "name": "InvalidBidPrice",
                  "fields": [],
                  "index": 4,
                  "docs": ["Bid price is invalid"]
                },
                {
                  "name": "InvalidAmount",
                  "fields": [],
                  "index": 5,
                  "docs": ["Invalid input amount"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 495,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [44, 0]
          },
          "docs": []
        }
      },
      {
        "id": 496,
        "type": {
          "path": ["module_loans", "Position"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "collateral",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {"name": "debit", "type": 6, "typeName": "Balance", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 497,
        "type": {
          "path": ["module_loans", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AmountConvertFailed",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 498,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [0, 495]
          },
          "docs": []
        }
      },
      {
        "id": 499,
        "type": {
          "path": ["module_honzon", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "NoPermission", "fields": [], "index": 0, "docs": []},
                {
                  "name": "AlreadyShutdown",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AuthorizationNotExists",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AlreadyAuthorized",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 500,
        "type": {
          "path": ["module_cdp_treasury", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "CollateralNotEnough",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The collateral amount of CDP treasury is not enough"
                  ]
                },
                {
                  "name": "SurplusPoolNotEnough",
                  "fields": [],
                  "index": 1,
                  "docs": ["The surplus pool of CDP treasury is not enough"]
                },
                {
                  "name": "DebitPoolNotEnough",
                  "fields": [],
                  "index": 2,
                  "docs": ["The debit pool of CDP treasury is not enough"]
                },
                {
                  "name": "InvalidSwapPath",
                  "fields": [],
                  "index": 3,
                  "docs": ["The swap path is invalid"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 501,
        "type": {
          "path": ["module_cdp_engine", "RiskManagementParams"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "maximum_total_debit_value",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "interest_rate_per_sec",
                  "type": 148,
                  "typeName": "Option<Rate>",
                  "docs": []
                },
                {
                  "name": "liquidation_ratio",
                  "type": 148,
                  "typeName": "Option<Ratio>",
                  "docs": []
                },
                {
                  "name": "liquidation_penalty",
                  "type": 148,
                  "typeName": "Option<Rate>",
                  "docs": []
                },
                {
                  "name": "required_collateral_ratio",
                  "type": 148,
                  "typeName": "Option<Ratio>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 502,
        "type": {
          "path": ["module_cdp_engine", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ExceedDebitValueHardCap",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The total debit value of specific collateral type already exceed the",
                    "hard cap"
                  ]
                },
                {
                  "name": "BelowRequiredCollateralRatio",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The collateral ratio below the required collateral ratio"
                  ]
                },
                {
                  "name": "BelowLiquidationRatio",
                  "fields": [],
                  "index": 2,
                  "docs": ["The collateral ratio below the liquidation ratio"]
                },
                {
                  "name": "MustBeUnsafe",
                  "fields": [],
                  "index": 3,
                  "docs": ["The CDP must be unsafe status"]
                },
                {
                  "name": "MustBeSafe",
                  "fields": [],
                  "index": 4,
                  "docs": ["The CDP must be safe status"]
                },
                {
                  "name": "InvalidCollateralType",
                  "fields": [],
                  "index": 5,
                  "docs": ["Invalid collateral type"]
                },
                {
                  "name": "RemainDebitValueTooSmall",
                  "fields": [],
                  "index": 6,
                  "docs": ["Remain debit value in CDP below the dust amount"]
                },
                {
                  "name": "InvalidFeedPrice",
                  "fields": [],
                  "index": 7,
                  "docs": ["Feed price is invalid"]
                },
                {
                  "name": "NoDebitValue",
                  "fields": [],
                  "index": 8,
                  "docs": ["No debit value in CDP so that it cannot be settled"]
                },
                {
                  "name": "AlreadyShutdown",
                  "fields": [],
                  "index": 9,
                  "docs": ["System has already been shutdown"]
                },
                {
                  "name": "MustAfterShutdown",
                  "fields": [],
                  "index": 10,
                  "docs": ["Must after system shutdown"]
                },
                {
                  "name": "SwapDebitFailed",
                  "fields": [],
                  "index": 11,
                  "docs": ["Failed to swap debit by default path list"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 503,
        "type": {
          "path": ["module_emergency_shutdown", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AlreadyShutdown",
                  "fields": [],
                  "index": 0,
                  "docs": ["System has already been shutdown"]
                },
                {
                  "name": "MustAfterShutdown",
                  "fields": [],
                  "index": 1,
                  "docs": ["Must after system shutdown"]
                },
                {
                  "name": "CanNotRefund",
                  "fields": [],
                  "index": 2,
                  "docs": ["Final redemption is still not opened"]
                },
                {
                  "name": "ExistPotentialSurplus",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Exist potential surplus, means settlement has not been completed"
                  ]
                },
                {
                  "name": "ExistUnhandledDebit",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Exist unhandled debit, means settlement has not been completed"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 504,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [6, 153]
          },
          "docs": []
        }
      },
      {
        "id": 505,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 295},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 294, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 506,
        "type": {
          "path": ["module_homa_lite", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "InvalidTotalStakingCurrency",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The total amount for the Staking currency must be more than zero."
                  ]
                },
                {
                  "name": "AmountBelowMinimumThreshold",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The mint amount is below the minimum threshold allowed."
                  ]
                },
                {
                  "name": "ExceededStakingCurrencyMintCap",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The amount of Staking currency used has exceeded the cap allowed."
                  ]
                },
                {
                  "name": "InsufficientReservedBalances",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There isn't enough reserved currencies to cancel the redeem request."
                  ]
                },
                {
                  "name": "InsufficientTotalStakingCurrency",
                  "fields": [],
                  "index": 4,
                  "docs": ["Amount redeemed is above total amount staked."]
                },
                {
                  "name": "InsufficientLiquidBalance",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "There isn't enough liquid balance in the user's account."
                  ]
                },
                {
                  "name": "TooManyScheduledUnbonds",
                  "fields": [],
                  "index": 6,
                  "docs": ["Too many Scheduled unbonds"]
                },
                {
                  "name": "XcmFailed",
                  "fields": [],
                  "index": 7,
                  "docs": ["The xcm operation have failed"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 507,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [155, 44]
          },
          "docs": []
        }
      },
      {
        "id": 508,
        "type": {
          "path": ["module_incentives", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "NotEnough",
                  "fields": [],
                  "index": 0,
                  "docs": ["Share amount is not enough"]
                },
                {
                  "name": "InvalidCurrencyId",
                  "fields": [],
                  "index": 1,
                  "docs": ["Invalid currency id"]
                },
                {
                  "name": "InvalidPoolId",
                  "fields": [],
                  "index": 2,
                  "docs": ["Invalid pool id"]
                },
                {
                  "name": "InvalidRate",
                  "fields": [],
                  "index": 3,
                  "docs": ["Invalid rate"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 509,
        "type": {
          "path": ["module_nft", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ClassIdNotFound",
                  "fields": [],
                  "index": 0,
                  "docs": ["ClassId not found"]
                },
                {
                  "name": "TokenIdNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["TokenId not found"]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The operator is not the owner of the token and has no permission"
                  ]
                },
                {
                  "name": "InvalidQuantity",
                  "fields": [],
                  "index": 3,
                  "docs": ["Quantity is invalid. need >= 1"]
                },
                {
                  "name": "NonTransferable",
                  "fields": [],
                  "index": 4,
                  "docs": ["Property of class don't support transfer"]
                },
                {
                  "name": "NonBurnable",
                  "fields": [],
                  "index": 5,
                  "docs": ["Property of class don't support burn"]
                },
                {
                  "name": "NonMintable",
                  "fields": [],
                  "index": 6,
                  "docs": ["Property of class don't support mint"]
                },
                {
                  "name": "CannotDestroyClass",
                  "fields": [],
                  "index": 7,
                  "docs": ["Can not destroy class", "Total issuance is not 0"]
                },
                {
                  "name": "Immutable",
                  "fields": [],
                  "index": 8,
                  "docs": ["Cannot perform mutable action"]
                },
                {
                  "name": "AttributesTooLarge",
                  "fields": [],
                  "index": 9,
                  "docs": ["Attributes too large"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 510,
        "type": {
          "path": ["module_evm", "module", "AccountInfo"],
          "params": [
            {"name": "Index", "type": 4}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": "nonce", "type": 4, "typeName": "Index", "docs": []},
                {
                  "name": "contract_info",
                  "type": 511,
                  "typeName": "Option<ContractInfo>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 511,
        "type": {
          "path": ["Option"],
          "params": [
            {"name": "T", "type": 512}
          ],
          "def": {
            "Variant": {
              "variants": [
                {"name": "None", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Some",
                  "fields": [
                    {"name": null, "type": 512, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 512,
        "type": {
          "path": ["module_evm", "module", "ContractInfo"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "code_hash",
                  "type": 9,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "maintainer",
                  "type": 47,
                  "typeName": "EvmAddress",
                  "docs": []
                },
                {
                  "name": "deployed",
                  "type": 121,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 513,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [47, 9]
          },
          "docs": []
        }
      },
      {
        "id": 514,
        "type": {
          "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
          "params": [
            {"name": "T", "type": 2},
            {"name": "S", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 10, "typeName": "Vec<T>", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 515,
        "type": {
          "path": ["module_evm", "module", "CodeInfo"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": "code_size", "type": 4, "typeName": "u32", "docs": []},
                {"name": "ref_count", "type": 4, "typeName": "u32", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 516,
        "type": {
          "path": ["module_evm", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AddressNotMapped",
                  "fields": [],
                  "index": 0,
                  "docs": ["Address not mapped"]
                },
                {
                  "name": "ContractNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["Contract not found"]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": ["No permission"]
                },
                {
                  "name": "ContractDevelopmentNotEnabled",
                  "fields": [],
                  "index": 3,
                  "docs": ["Contract development is not enabled"]
                },
                {
                  "name": "ContractDevelopmentAlreadyEnabled",
                  "fields": [],
                  "index": 4,
                  "docs": ["Contract development is already enabled"]
                },
                {
                  "name": "ContractAlreadyDeployed",
                  "fields": [],
                  "index": 5,
                  "docs": ["Contract already deployed"]
                },
                {
                  "name": "ContractExceedsMaxCodeSize",
                  "fields": [],
                  "index": 6,
                  "docs": ["Contract exceeds max code size"]
                },
                {
                  "name": "ContractAlreadyExisted",
                  "fields": [],
                  "index": 7,
                  "docs": ["Contract already existed"]
                },
                {
                  "name": "OutOfStorage",
                  "fields": [],
                  "index": 8,
                  "docs": ["Storage usage exceeds storage limit"]
                },
                {
                  "name": "ChargeFeeFailed",
                  "fields": [],
                  "index": 9,
                  "docs": ["Charge fee failed"]
                },
                {
                  "name": "CannotKillContract",
                  "fields": [],
                  "index": 10,
                  "docs": ["Contract cannot be killed due to reference count"]
                },
                {
                  "name": "ReserveStorageFailed",
                  "fields": [],
                  "index": 11,
                  "docs": ["Reserve storage failed"]
                },
                {
                  "name": "UnreserveStorageFailed",
                  "fields": [],
                  "index": 12,
                  "docs": ["Unreserve storage failed"]
                },
                {
                  "name": "ChargeStorageFailed",
                  "fields": [],
                  "index": 13,
                  "docs": ["Charge storage failed"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 517,
        "type": {
          "path": ["module_evm_bridge", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "ExecutionFail",
                  "fields": [],
                  "index": 0,
                  "docs": ["Execution failed"]
                },
                {
                  "name": "ExecutionRevert",
                  "fields": [],
                  "index": 1,
                  "docs": ["Execution reverted"]
                },
                {
                  "name": "ExecutionFatal",
                  "fields": [],
                  "index": 2,
                  "docs": ["Execution fatal"]
                },
                {
                  "name": "ExecutionError",
                  "fields": [],
                  "index": 3,
                  "docs": ["Execution error"]
                },
                {
                  "name": "InvalidReturnValue",
                  "fields": [],
                  "index": 4,
                  "docs": ["Invalid return value"]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        }
      },
      {
        "id": 518,
        "type": {
          "path": ["module_evm_accounts", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "AccountIdHasMapped",
                  "fields": [],
                  "index": 0,
                  "docs": ["AccountId has mapped"]
                },
                {
                  "name": "EthAddressHasMapped",
                  "fields": [],
                  "index": 1,
                  "docs": ["Eth address has mapped"]
                },
                {
                  "name": "BadSignature",
                  "fields": [],
                  "index": 2,
                  "docs": ["Bad signature"]
                },
                {
                  "name": "InvalidSignature",
                  "fields": [],
                  "index": 3,
                  "docs": ["Invalid signature"]
                },
                {
                  "name": "NonZeroRefCount",
                  "fields": [],
                  "index": 4,
                  "docs": ["Account ref count is not zero"]
                }
              ]
            }
          },
          "docs": ["Error for evm accounts module."]
        }
      },
      {
        "id": 519,
        "type": {
          "path": ["acala_primitives", "evm", "Erc20Info"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": "address",
                  "type": 47,
                  "typeName": "EvmAddress",
                  "docs": []
                },
                {"name": "name", "type": 10, "typeName": "Vec<u8>", "docs": []},
                {
                  "name": "symbol",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {"name": "decimals", "type": 2, "typeName": "u8", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 520,
        "type": {
          "path": ["module_evm_manager", "module", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "CurrencyIdExisted",
                  "fields": [],
                  "index": 0,
                  "docs": ["CurrencyId existed"]
                }
              ]
            }
          },
          "docs": ["Error for evm accounts module."]
        }
      },
      {
        "id": 521,
        "type": {
          "path": ["pallet_sudo", "pallet", "Error"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "RequireSudo",
                  "fields": [],
                  "index": 0,
                  "docs": ["Sender must be the Sudo account"]
                }
              ]
            }
          },
          "docs": ["Error for the Sudo pallet"]
        }
      },
      {
        "id": 522,
        "type": {
          "path": [
            "sp_runtime",
            "generic",
            "unchecked_extrinsic",
            "UncheckedExtrinsic"
          ],
          "params": [
            {"name": "Address", "type": 207},
            {"name": "Call", "type": 194},
            {"name": "Signature", "type": 523},
            {"name": "Extra", "type": 527}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 10, "typeName": null, "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 523,
        "type": {
          "path": ["acala_primitives", "signature", "AcalaMultiSignature"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {
                  "name": "Ed25519",
                  "fields": [
                    {
                      "name": null,
                      "type": 524,
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sr25519",
                  "fields": [
                    {
                      "name": null,
                      "type": 526,
                      "typeName": "sr25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ecdsa",
                  "fields": [
                    {
                      "name": null,
                      "type": 309,
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Ethereum",
                  "fields": [
                    {
                      "name": null,
                      "type": 310,
                      "typeName": "[u8; 65]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "AcalaEip712",
                  "fields": [
                    {
                      "name": null,
                      "type": 310,
                      "typeName": "[u8; 65]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 524,
        "type": {
          "path": ["sp_core", "ed25519", "Signature"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 525, "typeName": "[u8; 64]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 525,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Array": {"len": 64, "type": 2}
          },
          "docs": []
        }
      },
      {
        "id": 526,
        "type": {
          "path": ["sp_core", "sr25519", "Signature"],
          "params": [],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 525, "typeName": "[u8; 64]", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 527,
        "type": {
          "path": [],
          "params": [],
          "def": {
            "Tuple": [528, 529, 530, 531, 533, 534, 535, 536]
          },
          "docs": []
        }
      },
      {
        "id": 528,
        "type": {
          "path": [
            "frame_system",
            "extensions",
            "check_spec_version",
            "CheckSpecVersion"
          ],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {"fields": []}
          },
          "docs": []
        }
      },
      {
        "id": 529,
        "type": {
          "path": [
            "frame_system",
            "extensions",
            "check_tx_version",
            "CheckTxVersion"
          ],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {"fields": []}
          },
          "docs": []
        }
      },
      {
        "id": 530,
        "type": {
          "path": [
            "frame_system",
            "extensions",
            "check_genesis",
            "CheckGenesis"
          ],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {"fields": []}
          },
          "docs": []
        }
      },
      {
        "id": 531,
        "type": {
          "path": [
            "frame_system",
            "extensions",
            "check_mortality",
            "CheckMortality"
          ],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 532, "typeName": "Era", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 532,
        "type": {
          "path": ["sp_runtime", "generic", "era", "Era"],
          "params": [],
          "def": {
            "Variant": {
              "variants": [
                {"name": "Immortal", "fields": [], "index": 0, "docs": []},
                {
                  "name": "Mortal1",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mortal2",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Mortal3",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Mortal4",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Mortal5",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Mortal6",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Mortal7",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Mortal8",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Mortal9",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Mortal10",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Mortal11",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Mortal12",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Mortal13",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Mortal14",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Mortal15",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Mortal16",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Mortal17",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Mortal18",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Mortal19",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Mortal20",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Mortal21",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Mortal22",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Mortal23",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Mortal24",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Mortal25",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Mortal26",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Mortal27",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Mortal28",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Mortal29",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Mortal30",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Mortal31",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Mortal32",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Mortal33",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "Mortal34",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Mortal35",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Mortal36",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Mortal37",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "Mortal38",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "Mortal39",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "Mortal40",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Mortal41",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "Mortal42",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "Mortal43",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "Mortal44",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "Mortal45",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "Mortal46",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "Mortal47",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 47,
                  "docs": []
                },
                {
                  "name": "Mortal48",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 48,
                  "docs": []
                },
                {
                  "name": "Mortal49",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 49,
                  "docs": []
                },
                {
                  "name": "Mortal50",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "Mortal51",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "Mortal52",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Mortal53",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "Mortal54",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Mortal55",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 55,
                  "docs": []
                },
                {
                  "name": "Mortal56",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Mortal57",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 57,
                  "docs": []
                },
                {
                  "name": "Mortal58",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 58,
                  "docs": []
                },
                {
                  "name": "Mortal59",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 59,
                  "docs": []
                },
                {
                  "name": "Mortal60",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "Mortal61",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "Mortal62",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "Mortal63",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Mortal64",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Mortal65",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "Mortal66",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "Mortal67",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "Mortal68",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 68,
                  "docs": []
                },
                {
                  "name": "Mortal69",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 69,
                  "docs": []
                },
                {
                  "name": "Mortal70",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Mortal71",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Mortal72",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Mortal73",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "Mortal74",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 74,
                  "docs": []
                },
                {
                  "name": "Mortal75",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 75,
                  "docs": []
                },
                {
                  "name": "Mortal76",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 76,
                  "docs": []
                },
                {
                  "name": "Mortal77",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 77,
                  "docs": []
                },
                {
                  "name": "Mortal78",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 78,
                  "docs": []
                },
                {
                  "name": "Mortal79",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 79,
                  "docs": []
                },
                {
                  "name": "Mortal80",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "Mortal81",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 81,
                  "docs": []
                },
                {
                  "name": "Mortal82",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 82,
                  "docs": []
                },
                {
                  "name": "Mortal83",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 83,
                  "docs": []
                },
                {
                  "name": "Mortal84",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 84,
                  "docs": []
                },
                {
                  "name": "Mortal85",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 85,
                  "docs": []
                },
                {
                  "name": "Mortal86",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 86,
                  "docs": []
                },
                {
                  "name": "Mortal87",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 87,
                  "docs": []
                },
                {
                  "name": "Mortal88",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 88,
                  "docs": []
                },
                {
                  "name": "Mortal89",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 89,
                  "docs": []
                },
                {
                  "name": "Mortal90",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "Mortal91",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 91,
                  "docs": []
                },
                {
                  "name": "Mortal92",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 92,
                  "docs": []
                },
                {
                  "name": "Mortal93",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 93,
                  "docs": []
                },
                {
                  "name": "Mortal94",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 94,
                  "docs": []
                },
                {
                  "name": "Mortal95",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 95,
                  "docs": []
                },
                {
                  "name": "Mortal96",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 96,
                  "docs": []
                },
                {
                  "name": "Mortal97",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 97,
                  "docs": []
                },
                {
                  "name": "Mortal98",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 98,
                  "docs": []
                },
                {
                  "name": "Mortal99",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "Mortal100",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "Mortal101",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "Mortal102",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "Mortal103",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "Mortal104",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "Mortal105",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "Mortal106",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "Mortal107",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 107,
                  "docs": []
                },
                {
                  "name": "Mortal108",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 108,
                  "docs": []
                },
                {
                  "name": "Mortal109",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 109,
                  "docs": []
                },
                {
                  "name": "Mortal110",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 110,
                  "docs": []
                },
                {
                  "name": "Mortal111",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 111,
                  "docs": []
                },
                {
                  "name": "Mortal112",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 112,
                  "docs": []
                },
                {
                  "name": "Mortal113",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 113,
                  "docs": []
                },
                {
                  "name": "Mortal114",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 114,
                  "docs": []
                },
                {
                  "name": "Mortal115",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 115,
                  "docs": []
                },
                {
                  "name": "Mortal116",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 116,
                  "docs": []
                },
                {
                  "name": "Mortal117",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 117,
                  "docs": []
                },
                {
                  "name": "Mortal118",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 118,
                  "docs": []
                },
                {
                  "name": "Mortal119",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 119,
                  "docs": []
                },
                {
                  "name": "Mortal120",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 120,
                  "docs": []
                },
                {
                  "name": "Mortal121",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 121,
                  "docs": []
                },
                {
                  "name": "Mortal122",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 122,
                  "docs": []
                },
                {
                  "name": "Mortal123",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 123,
                  "docs": []
                },
                {
                  "name": "Mortal124",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 124,
                  "docs": []
                },
                {
                  "name": "Mortal125",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 125,
                  "docs": []
                },
                {
                  "name": "Mortal126",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 126,
                  "docs": []
                },
                {
                  "name": "Mortal127",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 127,
                  "docs": []
                },
                {
                  "name": "Mortal128",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 128,
                  "docs": []
                },
                {
                  "name": "Mortal129",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 129,
                  "docs": []
                },
                {
                  "name": "Mortal130",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 130,
                  "docs": []
                },
                {
                  "name": "Mortal131",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 131,
                  "docs": []
                },
                {
                  "name": "Mortal132",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 132,
                  "docs": []
                },
                {
                  "name": "Mortal133",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 133,
                  "docs": []
                },
                {
                  "name": "Mortal134",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 134,
                  "docs": []
                },
                {
                  "name": "Mortal135",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 135,
                  "docs": []
                },
                {
                  "name": "Mortal136",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 136,
                  "docs": []
                },
                {
                  "name": "Mortal137",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 137,
                  "docs": []
                },
                {
                  "name": "Mortal138",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 138,
                  "docs": []
                },
                {
                  "name": "Mortal139",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 139,
                  "docs": []
                },
                {
                  "name": "Mortal140",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 140,
                  "docs": []
                },
                {
                  "name": "Mortal141",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 141,
                  "docs": []
                },
                {
                  "name": "Mortal142",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 142,
                  "docs": []
                },
                {
                  "name": "Mortal143",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 143,
                  "docs": []
                },
                {
                  "name": "Mortal144",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 144,
                  "docs": []
                },
                {
                  "name": "Mortal145",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 145,
                  "docs": []
                },
                {
                  "name": "Mortal146",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 146,
                  "docs": []
                },
                {
                  "name": "Mortal147",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 147,
                  "docs": []
                },
                {
                  "name": "Mortal148",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 148,
                  "docs": []
                },
                {
                  "name": "Mortal149",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 149,
                  "docs": []
                },
                {
                  "name": "Mortal150",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 150,
                  "docs": []
                },
                {
                  "name": "Mortal151",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 151,
                  "docs": []
                },
                {
                  "name": "Mortal152",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 152,
                  "docs": []
                },
                {
                  "name": "Mortal153",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 153,
                  "docs": []
                },
                {
                  "name": "Mortal154",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 154,
                  "docs": []
                },
                {
                  "name": "Mortal155",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 155,
                  "docs": []
                },
                {
                  "name": "Mortal156",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 156,
                  "docs": []
                },
                {
                  "name": "Mortal157",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 157,
                  "docs": []
                },
                {
                  "name": "Mortal158",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 158,
                  "docs": []
                },
                {
                  "name": "Mortal159",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 159,
                  "docs": []
                },
                {
                  "name": "Mortal160",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 160,
                  "docs": []
                },
                {
                  "name": "Mortal161",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 161,
                  "docs": []
                },
                {
                  "name": "Mortal162",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 162,
                  "docs": []
                },
                {
                  "name": "Mortal163",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 163,
                  "docs": []
                },
                {
                  "name": "Mortal164",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 164,
                  "docs": []
                },
                {
                  "name": "Mortal165",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 165,
                  "docs": []
                },
                {
                  "name": "Mortal166",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 166,
                  "docs": []
                },
                {
                  "name": "Mortal167",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 167,
                  "docs": []
                },
                {
                  "name": "Mortal168",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 168,
                  "docs": []
                },
                {
                  "name": "Mortal169",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 169,
                  "docs": []
                },
                {
                  "name": "Mortal170",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 170,
                  "docs": []
                },
                {
                  "name": "Mortal171",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 171,
                  "docs": []
                },
                {
                  "name": "Mortal172",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 172,
                  "docs": []
                },
                {
                  "name": "Mortal173",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 173,
                  "docs": []
                },
                {
                  "name": "Mortal174",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 174,
                  "docs": []
                },
                {
                  "name": "Mortal175",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 175,
                  "docs": []
                },
                {
                  "name": "Mortal176",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 176,
                  "docs": []
                },
                {
                  "name": "Mortal177",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 177,
                  "docs": []
                },
                {
                  "name": "Mortal178",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 178,
                  "docs": []
                },
                {
                  "name": "Mortal179",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 179,
                  "docs": []
                },
                {
                  "name": "Mortal180",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 180,
                  "docs": []
                },
                {
                  "name": "Mortal181",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 181,
                  "docs": []
                },
                {
                  "name": "Mortal182",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 182,
                  "docs": []
                },
                {
                  "name": "Mortal183",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 183,
                  "docs": []
                },
                {
                  "name": "Mortal184",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 184,
                  "docs": []
                },
                {
                  "name": "Mortal185",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 185,
                  "docs": []
                },
                {
                  "name": "Mortal186",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 186,
                  "docs": []
                },
                {
                  "name": "Mortal187",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 187,
                  "docs": []
                },
                {
                  "name": "Mortal188",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 188,
                  "docs": []
                },
                {
                  "name": "Mortal189",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 189,
                  "docs": []
                },
                {
                  "name": "Mortal190",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 190,
                  "docs": []
                },
                {
                  "name": "Mortal191",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 191,
                  "docs": []
                },
                {
                  "name": "Mortal192",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 192,
                  "docs": []
                },
                {
                  "name": "Mortal193",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 193,
                  "docs": []
                },
                {
                  "name": "Mortal194",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 194,
                  "docs": []
                },
                {
                  "name": "Mortal195",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 195,
                  "docs": []
                },
                {
                  "name": "Mortal196",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 196,
                  "docs": []
                },
                {
                  "name": "Mortal197",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 197,
                  "docs": []
                },
                {
                  "name": "Mortal198",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 198,
                  "docs": []
                },
                {
                  "name": "Mortal199",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 199,
                  "docs": []
                },
                {
                  "name": "Mortal200",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 200,
                  "docs": []
                },
                {
                  "name": "Mortal201",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 201,
                  "docs": []
                },
                {
                  "name": "Mortal202",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 202,
                  "docs": []
                },
                {
                  "name": "Mortal203",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 203,
                  "docs": []
                },
                {
                  "name": "Mortal204",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 204,
                  "docs": []
                },
                {
                  "name": "Mortal205",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 205,
                  "docs": []
                },
                {
                  "name": "Mortal206",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 206,
                  "docs": []
                },
                {
                  "name": "Mortal207",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 207,
                  "docs": []
                },
                {
                  "name": "Mortal208",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 208,
                  "docs": []
                },
                {
                  "name": "Mortal209",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 209,
                  "docs": []
                },
                {
                  "name": "Mortal210",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 210,
                  "docs": []
                },
                {
                  "name": "Mortal211",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 211,
                  "docs": []
                },
                {
                  "name": "Mortal212",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 212,
                  "docs": []
                },
                {
                  "name": "Mortal213",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 213,
                  "docs": []
                },
                {
                  "name": "Mortal214",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 214,
                  "docs": []
                },
                {
                  "name": "Mortal215",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 215,
                  "docs": []
                },
                {
                  "name": "Mortal216",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 216,
                  "docs": []
                },
                {
                  "name": "Mortal217",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 217,
                  "docs": []
                },
                {
                  "name": "Mortal218",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 218,
                  "docs": []
                },
                {
                  "name": "Mortal219",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 219,
                  "docs": []
                },
                {
                  "name": "Mortal220",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 220,
                  "docs": []
                },
                {
                  "name": "Mortal221",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 221,
                  "docs": []
                },
                {
                  "name": "Mortal222",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 222,
                  "docs": []
                },
                {
                  "name": "Mortal223",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 223,
                  "docs": []
                },
                {
                  "name": "Mortal224",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 224,
                  "docs": []
                },
                {
                  "name": "Mortal225",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 225,
                  "docs": []
                },
                {
                  "name": "Mortal226",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 226,
                  "docs": []
                },
                {
                  "name": "Mortal227",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 227,
                  "docs": []
                },
                {
                  "name": "Mortal228",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 228,
                  "docs": []
                },
                {
                  "name": "Mortal229",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 229,
                  "docs": []
                },
                {
                  "name": "Mortal230",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 230,
                  "docs": []
                },
                {
                  "name": "Mortal231",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 231,
                  "docs": []
                },
                {
                  "name": "Mortal232",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 232,
                  "docs": []
                },
                {
                  "name": "Mortal233",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 233,
                  "docs": []
                },
                {
                  "name": "Mortal234",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 234,
                  "docs": []
                },
                {
                  "name": "Mortal235",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 235,
                  "docs": []
                },
                {
                  "name": "Mortal236",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 236,
                  "docs": []
                },
                {
                  "name": "Mortal237",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 237,
                  "docs": []
                },
                {
                  "name": "Mortal238",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 238,
                  "docs": []
                },
                {
                  "name": "Mortal239",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 239,
                  "docs": []
                },
                {
                  "name": "Mortal240",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 240,
                  "docs": []
                },
                {
                  "name": "Mortal241",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 241,
                  "docs": []
                },
                {
                  "name": "Mortal242",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 242,
                  "docs": []
                },
                {
                  "name": "Mortal243",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 243,
                  "docs": []
                },
                {
                  "name": "Mortal244",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 244,
                  "docs": []
                },
                {
                  "name": "Mortal245",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 245,
                  "docs": []
                },
                {
                  "name": "Mortal246",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 246,
                  "docs": []
                },
                {
                  "name": "Mortal247",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 247,
                  "docs": []
                },
                {
                  "name": "Mortal248",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 248,
                  "docs": []
                },
                {
                  "name": "Mortal249",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 249,
                  "docs": []
                },
                {
                  "name": "Mortal250",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 250,
                  "docs": []
                },
                {
                  "name": "Mortal251",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 251,
                  "docs": []
                },
                {
                  "name": "Mortal252",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 252,
                  "docs": []
                },
                {
                  "name": "Mortal253",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 253,
                  "docs": []
                },
                {
                  "name": "Mortal254",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 254,
                  "docs": []
                },
                {
                  "name": "Mortal255",
                  "fields": [
                    {"name": null, "type": 2, "typeName": null, "docs": []}
                  ],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 533,
        "type": {
          "path": ["frame_system", "extensions", "check_nonce", "CheckNonce"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {"name": null, "type": 70, "typeName": "T::Index", "docs": []}
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 534,
        "type": {
          "path": ["frame_system", "extensions", "check_weight", "CheckWeight"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {"fields": []}
          },
          "docs": []
        }
      },
      {
        "id": 535,
        "type": {
          "path": ["module_transaction_payment", "ChargeTransactionPayment"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {
              "fields": [
                {
                  "name": null,
                  "type": 53,
                  "typeName": "PalletBalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      },
      {
        "id": 536,
        "type": {
          "path": ["module_evm", "SetEvmOrigin"],
          "params": [
            {"name": "T", "type": null}
          ],
          "def": {
            "Composite": {"fields": []}
          },
          "docs": []
        }
      },
      {
        "id": 537,
        "type": {
          "path": ["acala_runtime", "Runtime"],
          "params": [],
          "def": {
            "Composite": {"fields": []}
          },
          "docs": []
        }
      }
    ]
  },
  "pallets": [
    {
      "name": "System",
      "storage": {
        "prefix": "System",
        "items": [
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 0,
                "value": 3
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The full account information for a particular account ID."
            ]
          },
          {
            "name": "ExtrinsicCount",
            "modifier": "Optional",
            "type": {"Plain": 4},
            "fallback": [0],
            "docs": [" Total extrinsics count for the current block."]
          },
          {
            "name": "BlockWeight",
            "modifier": "Default",
            "type": {"Plain": 7},
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [" The current weight for the block."]
          },
          {
            "name": "AllExtrinsicsLen",
            "modifier": "Optional",
            "type": {"Plain": 4},
            "fallback": [0],
            "docs": [
              " Total length (in bytes) for all extrinsics put together, for the current block."
            ]
          },
          {
            "name": "BlockHash",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 9
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [" Map of block numbers to block hashes."]
          },
          {
            "name": "ExtrinsicData",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 10
              }
            },
            "fallback": [0],
            "docs": [
              " Extrinsics data for the current block (maps an extrinsic's index to its data)."
            ]
          },
          {
            "name": "Number",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The current block number being processed. Set by `execute_block`."
            ]
          },
          {
            "name": "ParentHash",
            "modifier": "Default",
            "type": {"Plain": 9},
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [" Hash of the previous block."]
          },
          {
            "name": "Digest",
            "modifier": "Default",
            "type": {"Plain": 11},
            "fallback": [0],
            "docs": [
              " Digest of the current block, also part of the block header."
            ]
          },
          {
            "name": "Events",
            "modifier": "Default",
            "type": {"Plain": 18},
            "fallback": [0],
            "docs": [
              " Events deposited for the current block.",
              "",
              " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
              " from within the runtime."
            ]
          },
          {
            "name": "EventCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" The number of events in the `Events<T>` list."]
          },
          {
            "name": "EventTopics",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 9,
                "value": 171
              }
            },
            "fallback": [0],
            "docs": [
              " Mapping between a topic (represented by T::Hash) and a vector of indexes",
              " of events in the `<Events<T>>` list.",
              "",
              " All topic vectors have deterministic storage locations depending on the topic. This",
              " allows light-clients to leverage the changes trie storage tracking mechanism and",
              " in case of changes fetch the list of events of interest.",
              "",
              " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
              " the `EventIndex` then in case if the topic has the same contents on the next block",
              " no notification will be triggered thus the event might be lost."
            ]
          },
          {
            "name": "LastRuntimeUpgrade",
            "modifier": "Optional",
            "type": {"Plain": 172},
            "fallback": [0],
            "docs": [
              " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
            ]
          },
          {
            "name": "UpgradedToU32RefCount",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [
              " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
            ]
          },
          {
            "name": "UpgradedToTripleRefCount",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [
              " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
              " (default) if not."
            ]
          },
          {
            "name": "ExecutionPhase",
            "modifier": "Optional",
            "type": {"Plain": 170},
            "fallback": [0],
            "docs": [" The execution phase of the block."]
          }
        ]
      },
      "calls": {"type": 173},
      "events": {"type": 21},
      "constants": [
        {
          "name": "BlockWeights",
          "type": 178,
          "value": [
            0,
            242,
            5,
            42,
            1,
            0,
            0,
            0,
            0,
            136,
            82,
            106,
            116,
            0,
            0,
            0,
            64,
            89,
            115,
            7,
            0,
            0,
            0,
            0,
            1,
            192,
            94,
            241,
            209,
            69,
            0,
            0,
            0,
            1,
            0,
            44,
            160,
            125,
            81,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            64,
            89,
            115,
            7,
            0,
            0,
            0,
            0,
            1,
            192,
            186,
            163,
            190,
            104,
            0,
            0,
            0,
            1,
            0,
            136,
            82,
            106,
            116,
            0,
            0,
            0,
            1,
            0,
            92,
            178,
            236,
            34,
            0,
            0,
            0,
            64,
            89,
            115,
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          "docs": [" Block & extrinsics weights: base values and limits."]
        },
        {
          "name": "BlockLength",
          "type": 182,
          "value": [0, 0, 56, 0, 0, 0, 80, 0, 0, 0, 80, 0],
          "docs": [" The maximum length of a block (in bytes)."]
        },
        {
          "name": "BlockHashCount",
          "type": 4,
          "value": [176, 4, 0, 0],
          "docs": [
            " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
          ]
        },
        {
          "name": "DbWeight",
          "type": 184,
          "value": [64, 120, 125, 1, 0, 0, 0, 0, 0, 225, 245, 5, 0, 0, 0, 0],
          "docs": [
            " The weight of runtime database operations the runtime can invoke."
          ]
        },
        {
          "name": "Version",
          "type": 185,
          "value": [
            20,
            97,
            99,
            97,
            108,
            97,
            20,
            97,
            99,
            97,
            108,
            97,
            1,
            0,
            0,
            0,
            208,
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            52,
            223,
            106,
            203,
            104,
            153,
            7,
            96,
            155,
            3,
            0,
            0,
            0,
            55,
            227,
            151,
            252,
            124,
            145,
            245,
            228,
            1,
            0,
            0,
            0,
            64,
            254,
            58,
            212,
            1,
            248,
            149,
            154,
            5,
            0,
            0,
            0,
            210,
            188,
            152,
            151,
            238,
            208,
            143,
            21,
            3,
            0,
            0,
            0,
            247,
            139,
            39,
            139,
            229,
            63,
            69,
            76,
            2,
            0,
            0,
            0,
            221,
            113,
            141,
            92,
            197,
            50,
            98,
            212,
            1,
            0,
            0,
            0,
            171,
            60,
            5,
            114,
            41,
            31,
            235,
            139,
            1,
            0,
            0,
            0,
            188,
            157,
            137,
            144,
            79,
            91,
            146,
            63,
            1,
            0,
            0,
            0,
            55,
            200,
            187,
            19,
            80,
            169,
            162,
            168,
            1,
            0,
            0,
            0,
            110,
            249,
            83,
            0,
            75,
            163,
            14,
            89,
            1,
            0,
            0,
            0,
            244,
            133,
            201,
            20,
            93,
            63,
            10,
            173,
            1,
            0,
            0,
            0,
            227,
            223,
            63,
            42,
            168,
            165,
            204,
            87,
            1,
            0,
            0,
            0,
            234,
            147,
            227,
            241,
            111,
            61,
            105,
            98,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          "docs": [" Get the chain's current version."]
        },
        {
          "name": "SS58Prefix",
          "type": 38,
          "value": [10, 0],
          "docs": [
            " The designated SS85 prefix of this chain.",
            "",
            " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
            " that the runtime should know about the prefix in order to make use of it as",
            " an identifier of the chain."
          ]
        }
      ],
      "errors": {"type": 189},
      "index": 0
    },
    {
      "name": "Timestamp",
      "storage": {
        "prefix": "Timestamp",
        "items": [
          {
            "name": "Now",
            "modifier": "Default",
            "type": {"Plain": 8},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" Current time for the current block."]
          },
          {
            "name": "DidUpdate",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [" Did the timestamp get updated in this block?"]
          }
        ]
      },
      "calls": {"type": 190},
      "events": null,
      "constants": [
        {
          "name": "MinimumPeriod",
          "type": 8,
          "value": [112, 23, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The minimum period between blocks. Beware that this is different to the *expected*",
            " period that the block production apparatus provides. Your chosen consensus system will",
            " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
            " double this period on default settings."
          ]
        }
      ],
      "errors": null,
      "index": 1
    },
    {
      "name": "Scheduler",
      "storage": {
        "prefix": "Scheduler",
        "items": [
          {
            "name": "Agenda",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 191
              }
            },
            "fallback": [0],
            "docs": [
              " Items to be executed, indexed by the block number that they should be executed on."
            ]
          },
          {
            "name": "Lookup",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 10,
                "value": 29
              }
            },
            "fallback": [0],
            "docs": [
              " Lookup from identity to the block number and index of the task."
            ]
          },
          {
            "name": "StorageVersion",
            "modifier": "Default",
            "type": {"Plain": 312},
            "fallback": [0],
            "docs": [
              " Storage version of the pallet.",
              "",
              " New networks start with last version."
            ]
          }
        ]
      },
      "calls": {"type": 195},
      "events": {"type": 28},
      "constants": [
        {
          "name": "MaximumWeight",
          "type": 8,
          "value": [0, 116, 59, 164, 11, 0, 0, 0],
          "docs": [
            " The maximum weight that may be scheduled per block for any dispatchables of less",
            " priority than `schedule::HARD_DEADLINE`."
          ]
        },
        {
          "name": "MaxScheduledPerBlock",
          "type": 4,
          "value": [10, 0, 0, 0],
          "docs": [
            " The maximum number of scheduled calls in the queue for a single block.",
            " Not strictly enforced, but used for weight estimation."
          ]
        }
      ],
      "errors": {"type": 313},
      "index": 2
    },
    {
      "name": "Utility",
      "storage": null,
      "calls": {"type": 197},
      "events": {"type": 33},
      "constants": [
        {
          "name": "batched_calls_limit",
          "type": 4,
          "value": [62, 248, 0, 0],
          "docs": [" The limit on the number of batched calls."]
        }
      ],
      "errors": {"type": 314},
      "index": 3
    },
    {
      "name": "Multisig",
      "storage": {
        "prefix": "Multisig",
        "items": [
          {
            "name": "Multisigs",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Blake2_128Concat"],
                "key": 315,
                "value": 316
              }
            },
            "fallback": [0],
            "docs": [" The set of open multisig operations."]
          },
          {
            "name": "Calls",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 1,
                "value": 317
              }
            },
            "fallback": [0],
            "docs": []
          }
        ]
      },
      "calls": {"type": 199},
      "events": {"type": 34},
      "constants": [
        {
          "name": "DepositBase",
          "type": 6,
          "value": [0, 80, 180, 157, 175, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The base amount of currency needed to reserve for creating a multisig execution or to",
            " store a dispatch call for later.",
            "",
            " This is held for an additional storage item whose value size is",
            " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
            " `32 + sizeof(AccountId)` bytes."
          ]
        },
        {
          "name": "DepositFactor",
          "type": 6,
          "value": [0, 192, 104, 120, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The amount of currency needed per unit threshold when creating a multisig execution.",
            "",
            " This is held for adding 32 bytes more into a pre-existing storage value."
          ]
        },
        {
          "name": "MaxSignatories",
          "type": 38,
          "value": [100, 0],
          "docs": [
            " The maximum amount of signatories allowed in the multisig."
          ]
        }
      ],
      "errors": {"type": 318},
      "index": 4
    },
    {
      "name": "Proxy",
      "storage": {
        "prefix": "Proxy",
        "items": [
          {
            "name": "Proxies",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 319
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " The set of account proxies. Maps the account which has delegated to the accounts",
              " which are being delegated to, together with the amount held on deposit."
            ]
          },
          {
            "name": "Announcements",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 323
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" The announcements made by the proxy (key)."]
          }
        ]
      },
      "calls": {"type": 201},
      "events": {"type": 36},
      "constants": [
        {
          "name": "ProxyDepositBase",
          "type": 6,
          "value": [0, 112, 174, 112, 164, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The base amount of currency needed to reserve for creating a proxy.",
            "",
            " This is held for an additional storage item whose value size is",
            " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
          ]
        },
        {
          "name": "ProxyDepositFactor",
          "type": 6,
          "value": [0, 6, 44, 156, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The amount of currency needed per proxy added.",
            "",
            " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
            " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
            " into account `32 + proxy_type.encode().len()` bytes of data."
          ]
        },
        {
          "name": "MaxProxies",
          "type": 4,
          "value": [32, 0, 0, 0],
          "docs": [
            " The maximum amount of proxies allowed for a single account."
          ]
        },
        {
          "name": "MaxPending",
          "type": 4,
          "value": [32, 0, 0, 0],
          "docs": [
            " The maximum amount of time-delayed announcements that are allowed to be pending."
          ]
        },
        {
          "name": "AnnouncementDepositBase",
          "type": 6,
          "value": [0, 112, 174, 112, 164, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The base amount of currency needed to reserve for creating an announcement.",
            "",
            " This is held when a new storage item holding a `Balance` is created (typically 16",
            " bytes)."
          ]
        },
        {
          "name": "AnnouncementDepositFactor",
          "type": 6,
          "value": [0, 12, 88, 56, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The amount of currency needed per announcement made.",
            "",
            " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
            " into a pre-existing storage value."
          ]
        }
      ],
      "errors": {"type": 327},
      "index": 5
    },
    {
      "name": "TransactionPause",
      "storage": {
        "prefix": "TransactionPause",
        "items": [
          {
            "name": "PausedTransactions",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 176,
                "value": 32
              }
            },
            "fallback": [0],
            "docs": [
              " The paused transaction map",
              "",
              " map (PalletNameBytes, FunctionNameBytes) => Option<()>"
            ]
          }
        ]
      },
      "calls": {"type": 203},
      "events": {"type": 39},
      "constants": [],
      "errors": {"type": 328},
      "index": 6
    },
    {
      "name": "IdleScheduler",
      "storage": {
        "prefix": "IdleScheduler",
        "items": [
          {
            "name": "Tasks",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 205
              }
            },
            "fallback": [0],
            "docs": [" Some documentation"]
          },
          {
            "name": "NextTaskId",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": []
          }
        ]
      },
      "calls": {"type": 204},
      "events": {"type": 40},
      "constants": [
        {
          "name": "MinimumWeightRemainInBlock",
          "type": 8,
          "value": [0, 228, 11, 84, 2, 0, 0, 0],
          "docs": [
            " The minimum weight that should remain before idle tasks are dispatched."
          ]
        }
      ],
      "errors": null,
      "index": 7
    },
    {
      "name": "Balances",
      "storage": {
        "prefix": "Balances",
        "items": [
          {
            "name": "TotalIssuance",
            "modifier": "Default",
            "type": {"Plain": 6},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" The total units issued in the system."]
          },
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 0,
                "value": 5
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The balance of an account.",
              "",
              " NOTE: This is only used in the case that this pallet is used to store balances."
            ]
          },
          {
            "name": "Locks",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 0,
                "value": 329
              }
            },
            "fallback": [0],
            "docs": [
              " Any liquidity locks on some account balances.",
              " NOTE: Should only be accessed when setting, changing and freeing a lock."
            ]
          },
          {
            "name": "Reserves",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 0,
                "value": 333
              }
            },
            "fallback": [0],
            "docs": [" Named reserves on some account balances."]
          },
          {
            "name": "StorageVersion",
            "modifier": "Default",
            "type": {"Plain": 337},
            "fallback": [0],
            "docs": [
              " Storage version of the pallet.",
              "",
              " This is set to v2.0.0 for new networks."
            ]
          }
        ]
      },
      "calls": {"type": 206},
      "events": {"type": 41},
      "constants": [
        {
          "name": "ExistentialDeposit",
          "type": 6,
          "value": [0, 232, 118, 72, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The minimum amount required to keep an account open."]
        },
        {
          "name": "MaxLocks",
          "type": 4,
          "value": [50, 0, 0, 0],
          "docs": [
            " The maximum number of locks that should exist on an account.",
            " Not strictly enforced, but used for weight estimation."
          ]
        },
        {
          "name": "MaxReserves",
          "type": 4,
          "value": [6, 0, 0, 0],
          "docs": [
            " The maximum number of named reserves that can exist on an account."
          ]
        }
      ],
      "errors": {"type": 338},
      "index": 10
    },
    {
      "name": "Tokens",
      "storage": {
        "prefix": "Tokens",
        "items": [
          {
            "name": "TotalIssuance",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 6
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" The total issuance of a token type."]
          },
          {
            "name": "Locks",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat", "Twox64Concat"],
                "key": 339,
                "value": 340
              }
            },
            "fallback": [0],
            "docs": [
              " Any liquidity locks of a token type under an account.",
              " NOTE: Should only be accessed when setting, changing and freeing a lock."
            ]
          },
          {
            "name": "Accounts",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat", "Twox64Concat"],
                "key": 339,
                "value": 343
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The balance of a token type under an account.",
              "",
              " NOTE: If the total is ever zero, decrease account ref account.",
              "",
              " NOTE: This is only used in the case that this module is used to store",
              " balances."
            ]
          }
        ]
      },
      "calls": null,
      "events": {"type": 43},
      "constants": [
        {
          "name": "MaxLocks",
          "type": 4,
          "value": [50, 0, 0, 0],
          "docs": []
        }
      ],
      "errors": {"type": 344},
      "index": 11
    },
    {
      "name": "Currencies",
      "storage": null,
      "calls": {"type": 208},
      "events": {"type": 49},
      "constants": [
        {
          "name": "GetNativeCurrencyId",
          "type": 44,
          "value": [0, 0],
          "docs": [" The native currency id"]
        }
      ],
      "errors": {"type": 345},
      "index": 12
    },
    {
      "name": "Vesting",
      "storage": {
        "prefix": "Vesting",
        "items": [
          {
            "name": "VestingSchedules",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 0,
                "value": 346
              }
            },
            "fallback": [0],
            "docs": [
              " Vesting schedules of an account.",
              "",
              " VestingSchedules: map AccountId => Vec<VestingSchedule>"
            ]
          }
        ]
      },
      "calls": {"type": 209},
      "events": {"type": 51},
      "constants": [
        {
          "name": "MinVestedTransfer",
          "type": 6,
          "value": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The minimum amount transferred to call `vested_transfer`."]
        }
      ],
      "errors": {"type": 347},
      "index": 13
    },
    {
      "name": "TransactionPayment",
      "storage": {
        "prefix": "TransactionPayment",
        "items": [
          {
            "name": "NextFeeMultiplier",
            "modifier": "Default",
            "type": {"Plain": 134},
            "fallback": [
              0,
              0,
              100,
              167,
              179,
              182,
              224,
              13,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The next fee multiplier.",
              "",
              " NextFeeMultiplier: Multiplier"
            ]
          },
          {
            "name": "AlternativeFeeSwapPath",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 348
              }
            },
            "fallback": [0],
            "docs": [" The alternative fee swap path of accounts."]
          }
        ]
      },
      "calls": {"type": 211},
      "events": null,
      "constants": [
        {
          "name": "NativeCurrencyId",
          "type": 44,
          "value": [0, 0],
          "docs": [
            " Native currency id, the actual received currency type as fee for",
            " treasury. Should be ACA"
          ]
        },
        {
          "name": "DefaultFeeSwapPathList",
          "type": 349,
          "value": [
            12,
            12,
            0,
            1,
            0,
            2,
            0,
            0,
            8,
            0,
            2,
            0,
            0,
            12,
            0,
            3,
            0,
            2,
            0,
            0
          ],
          "docs": [" Default fee swap path list"]
        },
        {
          "name": "TransactionByteFee",
          "type": 6,
          "value": [128, 150, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The fee to be paid for making a transaction; the per-byte portion."
          ]
        },
        {
          "name": "MaxSwapSlippageCompareToOracle",
          "type": 134,
          "value": [0, 0, 79, 140, 52, 232, 20, 2, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " When swap with DEX, the acceptable max slippage for the price from oracle."
          ]
        },
        {
          "name": "TradingPathLimit",
          "type": 4,
          "value": [4, 0, 0, 0],
          "docs": [" The limit for length of trading path"]
        },
        {
          "name": "WeightToFee",
          "type": 350,
          "value": [
            4,
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          "docs": [
            " The polynomial that is applied in order to derive fee from weight."
          ]
        }
      ],
      "errors": {"type": 352},
      "index": 14
    },
    {
      "name": "Treasury",
      "storage": {
        "prefix": "Treasury",
        "items": [
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Number of proposals that have been made."]
          },
          {
            "name": "Proposals",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 353
              }
            },
            "fallback": [0],
            "docs": [" Proposals that have been made."]
          },
          {
            "name": "Approvals",
            "modifier": "Default",
            "type": {"Plain": 354},
            "fallback": [0],
            "docs": [
              " Proposal indices that have been approved but not yet awarded."
            ]
          }
        ]
      },
      "calls": {"type": 213},
      "events": {"type": 54},
      "constants": [
        {
          "name": "ProposalBond",
          "type": 153,
          "value": [80, 195, 0, 0],
          "docs": [
            " Fraction of a proposal's value that should be bonded in order to place the proposal.",
            " An accepted proposal gets these back. A rejected proposal does not."
          ]
        },
        {
          "name": "ProposalBondMinimum",
          "type": 6,
          "value": [0, 160, 114, 78, 24, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " Minimum amount of funds that should be placed in a deposit for making a proposal."
          ]
        },
        {
          "name": "SpendPeriod",
          "type": 4,
          "value": [192, 137, 1, 0],
          "docs": [" Period between successive spends."]
        },
        {
          "name": "Burn",
          "type": 153,
          "value": [0, 0, 0, 0],
          "docs": [
            " Percentage of spare funds (if any) that are burnt per spend period."
          ]
        },
        {
          "name": "PalletId",
          "type": 356,
          "value": [97, 99, 97, 47, 116, 114, 115, 121],
          "docs": [
            " The treasury's pallet id, used for deriving its sovereign account ID."
          ]
        },
        {
          "name": "MaxApprovals",
          "type": 4,
          "value": [30, 0, 0, 0],
          "docs": [
            " The maximum number of approvals that can wait in the spending queue."
          ]
        }
      ],
      "errors": {"type": 357},
      "index": 20
    },
    {
      "name": "Bounties",
      "storage": {
        "prefix": "Bounties",
        "items": [
          {
            "name": "BountyCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Number of bounty proposals that have been made."]
          },
          {
            "name": "Bounties",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 358
              }
            },
            "fallback": [0],
            "docs": [" Bounties that have been made."]
          },
          {
            "name": "BountyDescriptions",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 10
              }
            },
            "fallback": [0],
            "docs": [" The description of each bounty."]
          },
          {
            "name": "BountyApprovals",
            "modifier": "Default",
            "type": {"Plain": 355},
            "fallback": [0],
            "docs": [
              " Bounty indices that have been approved but not yet funded."
            ]
          }
        ]
      },
      "calls": {"type": 214},
      "events": {"type": 55},
      "constants": [
        {
          "name": "BountyDepositBase",
          "type": 6,
          "value": [0, 64, 148, 82, 163, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The amount held on deposit for placing a bounty proposal."]
        },
        {
          "name": "BountyDepositPayoutDelay",
          "type": 4,
          "value": [192, 168, 0, 0],
          "docs": [
            " The delay period for which a bounty beneficiary need to wait before claim the payout."
          ]
        },
        {
          "name": "BountyUpdatePeriod",
          "type": 4,
          "value": [96, 216, 3, 0],
          "docs": [" Bounty duration in blocks."]
        },
        {
          "name": "BountyCuratorDeposit",
          "type": 153,
          "value": [32, 161, 7, 0],
          "docs": [
            " Percentage of the curator fee that will be reserved upfront as deposit for bounty",
            " curator."
          ]
        },
        {
          "name": "BountyValueMinimum",
          "type": 6,
          "value": [0, 80, 57, 39, 140, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" Minimum value for a bounty."]
        },
        {
          "name": "DataDepositPerByte",
          "type": 6,
          "value": [0, 70, 195, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The amount held on deposit per byte within the tip report reason or bounty description."
          ]
        },
        {
          "name": "MaximumReasonLength",
          "type": 4,
          "value": [0, 32, 0, 0],
          "docs": [" Maximum acceptable reason length."]
        }
      ],
      "errors": {"type": 360},
      "index": 21
    },
    {
      "name": "Tips",
      "storage": {
        "prefix": "Tips",
        "items": [
          {
            "name": "Tips",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 9,
                "value": 361
              }
            },
            "fallback": [0],
            "docs": [
              " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
              " This has the insecure enumerable hash function since the key itself is already",
              " guaranteed to be a secure hash."
            ]
          },
          {
            "name": "Reasons",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 10
              }
            },
            "fallback": [0],
            "docs": [
              " Simple preimage lookup from the reason's hash to the original data. Again, has an",
              " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
            ]
          }
        ]
      },
      "calls": {"type": 215},
      "events": {"type": 56},
      "constants": [
        {
          "name": "MaximumReasonLength",
          "type": 4,
          "value": [0, 32, 0, 0],
          "docs": [" Maximum acceptable reason length."]
        },
        {
          "name": "DataDepositPerByte",
          "type": 6,
          "value": [0, 70, 195, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The amount held on deposit per byte within the tip report reason or bounty description."
          ]
        },
        {
          "name": "TipCountdown",
          "type": 4,
          "value": [64, 56, 0, 0],
          "docs": [
            " The period for which a tip remains open after is has achieved threshold tippers."
          ]
        },
        {
          "name": "TipFindersFee",
          "type": 364,
          "value": [5],
          "docs": [
            " The percent of the final tip which goes to the original reporter of the tip."
          ]
        },
        {
          "name": "TipReportDepositBase",
          "type": 6,
          "value": [0, 64, 148, 82, 163, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The amount held on deposit for placing a tip report."]
        }
      ],
      "errors": {"type": 365},
      "index": 22
    },
    {
      "name": "ParachainSystem",
      "storage": {
        "prefix": "ParachainSystem",
        "items": [
          {
            "name": "PendingValidationCode",
            "modifier": "Default",
            "type": {"Plain": 10},
            "fallback": [0],
            "docs": [
              " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
              "",
              " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
              " which will result the next block process with the new validation code. This concludes the upgrade process.",
              "",
              " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
            ]
          },
          {
            "name": "NewValidationCode",
            "modifier": "Optional",
            "type": {"Plain": 10},
            "fallback": [0],
            "docs": [
              " Validation code that is set by the parachain and is to be communicated to collator and",
              " consequently the relay-chain.",
              "",
              " This will be cleared in `on_initialize` of each new block if no other pallet already set",
              " the value."
            ]
          },
          {
            "name": "ValidationData",
            "modifier": "Optional",
            "type": {"Plain": 218},
            "fallback": [0],
            "docs": [
              " The [`PersistedValidationData`] set for this block.",
              " This value is expected to be set only once per block and it's never stored",
              " in the trie."
            ]
          },
          {
            "name": "DidSetValidationCode",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [" Were the validation data set to notify the relay chain?"]
          },
          {
            "name": "UpgradeRestrictionSignal",
            "modifier": "Default",
            "type": {"Plain": 366},
            "fallback": [0],
            "docs": [
              " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
              " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
              " candidate will be invalid.",
              "",
              " This storage item is a mirror of the corresponding value for the current parachain from the",
              " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
              " set after the inherent."
            ]
          },
          {
            "name": "RelevantMessagingState",
            "modifier": "Optional",
            "type": {"Plain": 368},
            "fallback": [0],
            "docs": [
              " The snapshot of some state related to messaging relevant to the current parachain as per",
              " the relay parent.",
              "",
              " This field is meant to be updated each block with the validation data inherent. Therefore,",
              " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
              "",
              " This data is also absent from the genesis."
            ]
          },
          {
            "name": "HostConfiguration",
            "modifier": "Optional",
            "type": {"Plain": 372},
            "fallback": [0],
            "docs": [
              " The parachain host configuration that was obtained from the relay parent.",
              "",
              " This field is meant to be updated each block with the validation data inherent. Therefore,",
              " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
              "",
              " This data is also absent from the genesis."
            ]
          },
          {
            "name": "LastDmqMqcHead",
            "modifier": "Default",
            "type": {"Plain": 373},
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The last downward message queue chain head we have observed.",
              "",
              " This value is loaded before and saved after processing inbound downward messages carried",
              " by the system inherent."
            ]
          },
          {
            "name": "LastHrmpMqcHeads",
            "modifier": "Default",
            "type": {"Plain": 374},
            "fallback": [0],
            "docs": [
              " The message queue chain heads we have observed per each channel incoming channel.",
              "",
              " This value is loaded before and saved after processing inbound downward messages carried",
              " by the system inherent."
            ]
          },
          {
            "name": "ProcessedDownwardMessages",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " Number of downward messages processed in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "HrmpWatermark",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " HRMP watermark that was set in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "HrmpOutboundMessages",
            "modifier": "Default",
            "type": {"Plain": 377},
            "fallback": [0],
            "docs": [
              " HRMP messages that were sent in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "UpwardMessages",
            "modifier": "Default",
            "type": {"Plain": 177},
            "fallback": [0],
            "docs": [
              " Upward messages that were sent in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "PendingUpwardMessages",
            "modifier": "Default",
            "type": {"Plain": 177},
            "fallback": [0],
            "docs": [
              " Upward messages that are still pending and not yet send to the relay chain."
            ]
          },
          {
            "name": "AnnouncedHrmpMessagesPerCandidate",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
              " announcing the weight of `on_initialize` and `on_finalize`."
            ]
          },
          {
            "name": "ReservedXcmpWeightOverride",
            "modifier": "Optional",
            "type": {"Plain": 8},
            "fallback": [0],
            "docs": [
              " The weight we reserve at the beginning of the block for processing XCMP messages. This",
              " overrides the amount set in the Config trait."
            ]
          },
          {
            "name": "ReservedDmpWeightOverride",
            "modifier": "Optional",
            "type": {"Plain": 8},
            "fallback": [0],
            "docs": [
              " The weight we reserve at the beginning of the block for processing DMP messages. This",
              " overrides the amount set in the Config trait."
            ]
          },
          {
            "name": "AuthorizedUpgrade",
            "modifier": "Optional",
            "type": {"Plain": 9},
            "fallback": [0],
            "docs": [" The next authorized upgrade, if there is one."]
          }
        ]
      },
      "calls": {"type": 216},
      "events": {"type": 57},
      "constants": [],
      "errors": {"type": 379},
      "index": 30
    },
    {
      "name": "ParachainInfo",
      "storage": {
        "prefix": "ParachainInfo",
        "items": [
          {
            "name": "ParachainId",
            "modifier": "Default",
            "type": {"Plain": 112},
            "fallback": [100, 0, 0, 0],
            "docs": []
          }
        ]
      },
      "calls": null,
      "events": null,
      "constants": [],
      "errors": null,
      "index": 31
    },
    {
      "name": "Authorship",
      "storage": {
        "prefix": "Authorship",
        "items": [
          {
            "name": "Uncles",
            "modifier": "Default",
            "type": {"Plain": 380},
            "fallback": [0],
            "docs": [" Uncles"]
          },
          {
            "name": "Author",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [" Author of current block."]
          },
          {
            "name": "DidSetUncles",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [" Whether uncles were already set in this block."]
          }
        ]
      },
      "calls": null,
      "events": null,
      "constants": [
        {
          "name": "UncleGenerations",
          "type": 4,
          "value": [0, 0, 0, 0],
          "docs": [
            " The number of blocks back we should accept uncles.",
            " This means that we will deal with uncle-parents that are",
            " `UncleGenerations + 1` before `now`."
          ]
        }
      ],
      "errors": {"type": 382},
      "index": 40
    },
    {
      "name": "CollatorSelection",
      "storage": {
        "prefix": "CollatorSelection",
        "items": [
          {
            "name": "Invulnerables",
            "modifier": "Default",
            "type": {"Plain": 383},
            "fallback": [0],
            "docs": [
              " The invulnerable, fixed collators.",
              "",
              " Invulnerables: Vec<AccountId>"
            ]
          },
          {
            "name": "Candidates",
            "modifier": "Default",
            "type": {"Plain": 384},
            "fallback": [0],
            "docs": [
              " The (community, limited) collation candidates.",
              "",
              " Candidates: BTreeSet<AccountId>"
            ]
          },
          {
            "name": "DesiredCandidates",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " Desired number of candidates.",
              "",
              " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct.",
              " DesiredCandidates: u32"
            ]
          },
          {
            "name": "CandidacyBond",
            "modifier": "Default",
            "type": {"Plain": 6},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Fixed deposit bond for each candidate.",
              "",
              " CandidacyBond: Balance"
            ]
          },
          {
            "name": "SessionPoints",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 4
              }
            },
            "fallback": [0, 0, 0, 0],
            "docs": [
              " Session points for each candidate.",
              "",
              " SessionPoints: map AccountId => u32"
            ]
          },
          {
            "name": "NonCandidates",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 4
              }
            },
            "fallback": [0, 0, 0, 0],
            "docs": [
              " Mapping from the kicked candidate or the left candidate to session index.",
              "",
              " NonCandidates: map AccountId => SessionIndex"
            ]
          }
        ]
      },
      "calls": {"type": 228},
      "events": {"type": 58},
      "constants": [
        {
          "name": "PotId",
          "type": 356,
          "value": [97, 99, 97, 47, 99, 112, 111, 116],
          "docs": [
            " Account Identifier from which the internal Pot is generated."
          ]
        },
        {
          "name": "MinCandidates",
          "type": 4,
          "value": [1, 0, 0, 0],
          "docs": [" Minimum number of candidates."]
        },
        {
          "name": "MaxCandidates",
          "type": 4,
          "value": [50, 0, 0, 0],
          "docs": [
            " Maximum number of candidates that we should have. This is used for benchmarking and is",
            " not enforced.",
            "",
            " This does not take into account the invulnerables."
          ]
        },
        {
          "name": "MaxInvulnerables",
          "type": 4,
          "value": [10, 0, 0, 0],
          "docs": [" Maximum number of invulnerables."]
        },
        {
          "name": "KickPenaltySessionLength",
          "type": 4,
          "value": [8, 0, 0, 0],
          "docs": [
            " The Kicked candidate cannot register candidate or withdraw bond until",
            " `KickPenaltySessionLength` ends."
          ]
        },
        {
          "name": "CollatorKickThreshold",
          "type": 153,
          "value": [192, 39, 9, 0],
          "docs": [" Will be kicked if block is not produced in threshold."]
        }
      ],
      "errors": {"type": 386},
      "index": 41
    },
    {
      "name": "Session",
      "storage": {
        "prefix": "Session",
        "items": [
          {
            "name": "Validators",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [" The current set of validators."]
          },
          {
            "name": "CurrentIndex",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Current index of the session."]
          },
          {
            "name": "QueuedChanged",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [
              " True if the underlying economic identities or weighting behind the validators",
              " has changed in the queued validator set."
            ]
          },
          {
            "name": "QueuedKeys",
            "modifier": "Default",
            "type": {"Plain": 387},
            "fallback": [0],
            "docs": [
              " The queued keys for the next session. When the next session begins, these keys",
              " will be used to determine the validator's session keys."
            ]
          },
          {
            "name": "DisabledValidators",
            "modifier": "Default",
            "type": {"Plain": 355},
            "fallback": [0],
            "docs": [
              " Indices of disabled validators.",
              "",
              " The vec is always kept sorted so that we can find whether a given validator is",
              " disabled using binary search. It gets cleared when `on_session_ending` returns",
              " a new set of identities."
            ]
          },
          {
            "name": "NextKeys",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 230
              }
            },
            "fallback": [0],
            "docs": [" The next session keys for a validator."]
          },
          {
            "name": "KeyOwner",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 389,
                "value": 0
              }
            },
            "fallback": [0],
            "docs": [
              " The owner of a key. The key is the `KeyTypeId` + the encoded key."
            ]
          }
        ]
      },
      "calls": {"type": 229},
      "events": {"type": 60},
      "constants": [],
      "errors": {"type": 391},
      "index": 42
    },
    {
      "name": "Aura",
      "storage": {
        "prefix": "Aura",
        "items": [
          {
            "name": "Authorities",
            "modifier": "Default",
            "type": {"Plain": 392},
            "fallback": [0],
            "docs": [" The current authority set."]
          },
          {
            "name": "CurrentSlot",
            "modifier": "Default",
            "type": {"Plain": 394},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " The current slot of this block.",
              "",
              " This will be set in `on_initialize`."
            ]
          }
        ]
      },
      "calls": null,
      "events": null,
      "constants": [],
      "errors": null,
      "index": 43
    },
    {
      "name": "AuraExt",
      "storage": {
        "prefix": "AuraExt",
        "items": [
          {
            "name": "Authorities",
            "modifier": "Default",
            "type": {"Plain": 393},
            "fallback": [0],
            "docs": [
              " Serves as cache for the authorities.",
              "",
              " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
              " but we require the old authorities to verify the seal when validating a PoV. This will always",
              " be updated to the latest AuRa authorities in `on_finalize`."
            ]
          }
        ]
      },
      "calls": null,
      "events": null,
      "constants": [],
      "errors": null,
      "index": 44
    },
    {
      "name": "SessionManager",
      "storage": {
        "prefix": "SessionManager",
        "items": [
          {
            "name": "SessionDuration",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The current session duration.",
              "",
              " SessionDuration: T::BlockNumber"
            ]
          },
          {
            "name": "DurationOffset",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The current session duration offset.",
              "",
              " DurationOffset: T::BlockNumber"
            ]
          },
          {
            "name": "SessionDurationChanges",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 29
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Mapping from block number to new session index and duration.",
              "",
              " SessionDurationChanges: map BlockNumber => (SessionIndex, SessionDuration)"
            ]
          }
        ]
      },
      "calls": {"type": 233},
      "events": {"type": 61},
      "constants": [],
      "errors": {"type": 395},
      "index": 45
    },
    {
      "name": "XcmpQueue",
      "storage": {
        "prefix": "XcmpQueue",
        "items": [
          {
            "name": "InboundXcmpStatus",
            "modifier": "Default",
            "type": {"Plain": 396},
            "fallback": [0],
            "docs": [" Status of the inbound XCMP channels."]
          },
          {
            "name": "InboundXcmpMessages",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat", "Twox64Concat"],
                "key": 402,
                "value": 10
              }
            },
            "fallback": [0],
            "docs": [
              " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
            ]
          },
          {
            "name": "OutboundXcmpStatus",
            "modifier": "Default",
            "type": {"Plain": 403},
            "fallback": [0],
            "docs": [
              " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
              " and last outbound message. If the two indices are equal, then it indicates an empty",
              " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
              " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
              " case of the need to send a high-priority signal message this block.",
              " The bool is true if there is a signal message waiting to be sent."
            ]
          },
          {
            "name": "OutboundXcmpMessages",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat", "Twox64Concat"],
                "key": 406,
                "value": 10
              }
            },
            "fallback": [0],
            "docs": [" The messages outbound in a given XCMP channel."]
          },
          {
            "name": "SignalMessages",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 112,
                "value": 10
              }
            },
            "fallback": [0],
            "docs": [" Any signal messages waiting to be sent."]
          },
          {
            "name": "QueueConfig",
            "modifier": "Default",
            "type": {"Plain": 407},
            "fallback": [
              2,
              0,
              0,
              0,
              5,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              160,
              134,
              1,
              0,
              0,
              0,
              0,
              0,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The configuration which controls the dynamics of the outbound queue."
            ]
          }
        ]
      },
      "calls": null,
      "events": {"type": 62},
      "constants": [],
      "errors": {"type": 408},
      "index": 50
    },
    {
      "name": "PolkadotXcm",
      "storage": {
        "prefix": "PolkadotXcm",
        "items": [
          {
            "name": "QueryCounter",
            "modifier": "Default",
            "type": {"Plain": 8},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" The latest available query index."]
          },
          {
            "name": "Queries",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 8,
                "value": 409
              }
            },
            "fallback": [0],
            "docs": [" The ongoing queries."]
          },
          {
            "name": "AssetTraps",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 4
              }
            },
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The existing asset traps.",
              "",
              " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
              " times this pair has been trapped (usually just 1 if it exists at all)."
            ]
          },
          {
            "name": "SafeXcmVersion",
            "modifier": "Optional",
            "type": {"Plain": 4},
            "fallback": [0],
            "docs": [
              " Default version to encode XCM when latest version of destination is unknown. If `None`,",
              " then the destinations whose XCM version is unknown are considered unreachable."
            ]
          },
          {
            "name": "SupportedVersion",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Blake2_128Concat"],
                "key": 413,
                "value": 4
              }
            },
            "fallback": [0],
            "docs": [
              " The Latest versions that we know various locations support."
            ]
          },
          {
            "name": "VersionNotifiers",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Blake2_128Concat"],
                "key": 413,
                "value": 8
              }
            },
            "fallback": [0],
            "docs": [
              " All locations that we have requested version notifications from."
            ]
          },
          {
            "name": "VersionNotifyTargets",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Blake2_128Concat"],
                "key": 413,
                "value": 414
              }
            },
            "fallback": [0],
            "docs": [
              " The target locations that are subscribed to our version changes, as well as the most recent",
              " of our versions we informed them of."
            ]
          },
          {
            "name": "VersionDiscoveryQueue",
            "modifier": "Default",
            "type": {"Plain": 415},
            "fallback": [0],
            "docs": [
              " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
              " the `u32` counter is the number of times that a send to the destination has been attempted,",
              " which is used as a prioritization."
            ]
          },
          {
            "name": "CurrentMigration",
            "modifier": "Optional",
            "type": {"Plain": 418},
            "fallback": [0],
            "docs": [" The current migration's stage, if any."]
          }
        ]
      },
      "calls": {"type": 234},
      "events": {"type": 65},
      "constants": [],
      "errors": {"type": 419},
      "index": 51
    },
    {
      "name": "CumulusXcm",
      "storage": null,
      "calls": null,
      "events": {"type": 102},
      "constants": [],
      "errors": {"type": 420},
      "index": 52
    },
    {
      "name": "DmpQueue",
      "storage": {
        "prefix": "DmpQueue",
        "items": [
          {
            "name": "Configuration",
            "modifier": "Default",
            "type": {"Plain": 421},
            "fallback": [0, 228, 11, 84, 2, 0, 0, 0],
            "docs": [" The configuration."]
          },
          {
            "name": "PageIndex",
            "modifier": "Default",
            "type": {"Plain": 422},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" The page index."]
          },
          {
            "name": "Pages",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 4,
                "value": 423
              }
            },
            "fallback": [0],
            "docs": [" The queue pages."]
          },
          {
            "name": "Overweight",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat"],
                "key": 8,
                "value": 424
              }
            },
            "fallback": [0],
            "docs": [" The overweight messages."]
          }
        ]
      },
      "calls": {"type": 260},
      "events": {"type": 103},
      "constants": [],
      "errors": {"type": 425},
      "index": 53
    },
    {
      "name": "XTokens",
      "storage": {"prefix": "XTokens", "items": []},
      "calls": {"type": 261},
      "events": {"type": 104},
      "constants": [
        {
          "name": "SelfLocation",
          "type": 67,
          "value": [1, 1, 0, 65, 31],
          "docs": [" Self chain location."]
        },
        {
          "name": "BaseXcmWeight",
          "type": 8,
          "value": [0, 225, 245, 5, 0, 0, 0, 0],
          "docs": [
            " Base XCM weight.",
            "",
            " The actually weight for an XCM message is `T::BaseXcmWeight +",
            " T::Weigher::weight(&msg)`."
          ]
        }
      ],
      "errors": {"type": 426},
      "index": 54
    },
    {
      "name": "UnknownTokens",
      "storage": {
        "prefix": "UnknownTokens",
        "items": [
          {
            "name": "ConcreteFungibleBalances",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                "key": 427,
                "value": 6
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Concrete fungible balances under a given location and a concrete",
              " fungible id.",
              "",
              " double_map: who, asset_id => u128"
            ]
          },
          {
            "name": "AbstractFungibleBalances",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                "key": 428,
                "value": 6
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Abstract fungible balances under a given location and a abstract",
              " fungible id.",
              "",
              " double_map: who, asset_id => u128"
            ]
          }
        ]
      },
      "calls": null,
      "events": {"type": 105},
      "constants": [],
      "errors": {"type": 429},
      "index": 55
    },
    {
      "name": "OrmlXcm",
      "storage": null,
      "calls": {"type": 263},
      "events": {"type": 106},
      "constants": [],
      "errors": {"type": 430},
      "index": 56
    },
    {
      "name": "Authority",
      "storage": {
        "prefix": "Authority",
        "items": [
          {
            "name": "NextTaskIndex",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": []
          },
          {
            "name": "SavedCalls",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 431
              }
            },
            "fallback": [0],
            "docs": []
          }
        ]
      },
      "calls": {"type": 264},
      "events": {"type": 107},
      "constants": [],
      "errors": {"type": 432},
      "index": 60
    },
    {
      "name": "GeneralCouncil",
      "storage": {
        "prefix": "GeneralCouncil",
        "items": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {"Plain": 433},
            "fallback": [0],
            "docs": [" The hashes of the active proposals."]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 194
              }
            },
            "fallback": [0],
            "docs": [" Actual proposal for a given hash, if it's current."]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 434
              }
            },
            "fallback": [0],
            "docs": [" Votes on a given proposal, if it is ongoing."]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Proposals so far."]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ]
      },
      "calls": {"type": 267},
      "events": {"type": 120},
      "constants": [],
      "errors": {"type": 435},
      "index": 61
    },
    {
      "name": "GeneralCouncilMembership",
      "storage": {
        "prefix": "GeneralCouncilMembership",
        "items": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [" The current membership, stored as an ordered Vec."]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [" The current prime member, if one exists."]
          }
        ]
      },
      "calls": {"type": 268},
      "events": {"type": 122},
      "constants": [],
      "errors": {"type": 436},
      "index": 62
    },
    {
      "name": "FinancialCouncil",
      "storage": {
        "prefix": "FinancialCouncil",
        "items": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {"Plain": 437},
            "fallback": [0],
            "docs": [" The hashes of the active proposals."]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 194
              }
            },
            "fallback": [0],
            "docs": [" Actual proposal for a given hash, if it's current."]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 434
              }
            },
            "fallback": [0],
            "docs": [" Votes on a given proposal, if it is ongoing."]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Proposals so far."]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ]
      },
      "calls": {"type": 269},
      "events": {"type": 123},
      "constants": [],
      "errors": {"type": 438},
      "index": 63
    },
    {
      "name": "FinancialCouncilMembership",
      "storage": {
        "prefix": "FinancialCouncilMembership",
        "items": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [" The current membership, stored as an ordered Vec."]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [" The current prime member, if one exists."]
          }
        ]
      },
      "calls": {"type": 270},
      "events": {"type": 124},
      "constants": [],
      "errors": {"type": 439},
      "index": 64
    },
    {
      "name": "HomaCouncil",
      "storage": {
        "prefix": "HomaCouncil",
        "items": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {"Plain": 440},
            "fallback": [0],
            "docs": [" The hashes of the active proposals."]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 194
              }
            },
            "fallback": [0],
            "docs": [" Actual proposal for a given hash, if it's current."]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 434
              }
            },
            "fallback": [0],
            "docs": [" Votes on a given proposal, if it is ongoing."]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Proposals so far."]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ]
      },
      "calls": {"type": 271},
      "events": {"type": 125},
      "constants": [],
      "errors": {"type": 441},
      "index": 65
    },
    {
      "name": "HomaCouncilMembership",
      "storage": {
        "prefix": "HomaCouncilMembership",
        "items": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [" The current membership, stored as an ordered Vec."]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [" The current prime member, if one exists."]
          }
        ]
      },
      "calls": {"type": 272},
      "events": {"type": 126},
      "constants": [],
      "errors": {"type": 442},
      "index": 66
    },
    {
      "name": "TechnicalCommittee",
      "storage": {
        "prefix": "TechnicalCommittee",
        "items": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {"Plain": 443},
            "fallback": [0],
            "docs": [" The hashes of the active proposals."]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 194
              }
            },
            "fallback": [0],
            "docs": [" Actual proposal for a given hash, if it's current."]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 434
              }
            },
            "fallback": [0],
            "docs": [" Votes on a given proposal, if it is ongoing."]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Proposals so far."]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ]
      },
      "calls": {"type": 273},
      "events": {"type": 127},
      "constants": [],
      "errors": {"type": 444},
      "index": 67
    },
    {
      "name": "TechnicalCommitteeMembership",
      "storage": {
        "prefix": "TechnicalCommitteeMembership",
        "items": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [" The current membership, stored as an ordered Vec."]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [" The current prime member, if one exists."]
          }
        ]
      },
      "calls": {"type": 274},
      "events": {"type": 128},
      "constants": [],
      "errors": {"type": 445},
      "index": 68
    },
    {
      "name": "Democracy",
      "storage": {
        "prefix": "Democracy",
        "items": [
          {
            "name": "PublicPropCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The number of (public) proposals that have been made so far."
            ]
          },
          {
            "name": "PublicProps",
            "modifier": "Default",
            "type": {"Plain": 446},
            "fallback": [0],
            "docs": [
              " The public proposals. Unsorted. The second item is the proposal's hash."
            ]
          },
          {
            "name": "DepositOf",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 448
              }
            },
            "fallback": [0],
            "docs": [
              " Those who have locked a deposit.",
              "",
              " TWOX-NOTE: Safe, as increasing integer keys are safe."
            ]
          },
          {
            "name": "Preimages",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 449
              }
            },
            "fallback": [0],
            "docs": [
              " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
              " The block number is the block at which it was deposited."
            ]
          },
          {
            "name": "ReferendumCount",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The next free referendum index, aka the number of referenda started so far."
            ]
          },
          {
            "name": "LowestUnbaked",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The lowest referendum index representing an unbaked referendum. Equal to",
              " `ReferendumCount` if there isn't a unbaked referendum."
            ]
          },
          {
            "name": "ReferendumInfoOf",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 450
              }
            },
            "fallback": [0],
            "docs": [
              " Information concerning any given referendum.",
              "",
              " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
            ]
          },
          {
            "name": "VotingOf",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 453
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " All votes for a particular voter. We store the balance for the number of votes that we",
              " have recorded. The second item is the total amount of delegations, that will be added.",
              "",
              " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
            ]
          },
          {
            "name": "Locks",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 4
              }
            },
            "fallback": [0],
            "docs": [
              " Accounts for which there are locks in action which may be removed at some point in the",
              " future. The value is the block number at which the lock expires and may be removed.",
              "",
              " TWOX-NOTE: OK ― `AccountId` is a secure hash."
            ]
          },
          {
            "name": "LastTabledWasExternal",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [
              " True if the last referendum tabled was submitted externally. False if it was a public",
              " proposal."
            ]
          },
          {
            "name": "NextExternal",
            "modifier": "Optional",
            "type": {"Plain": 458},
            "fallback": [0],
            "docs": [
              " The referendum to be tabled whenever it would be valid to table an external proposal.",
              " This happens when a referendum needs to be tabled and one of two conditions are met:",
              " - `LastTabledWasExternal` is `false`; or",
              " - `PublicProps` is empty."
            ]
          },
          {
            "name": "Blacklist",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 459
              }
            },
            "fallback": [0],
            "docs": [
              " A record of who vetoed what. Maps proposal hash to a possible existent block number",
              " (until when it may not be resubmitted) and who vetoed it."
            ]
          },
          {
            "name": "Cancellations",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 121
              }
            },
            "fallback": [0],
            "docs": [
              " Record of all proposals that have been subject to emergency cancellation."
            ]
          },
          {
            "name": "StorageVersion",
            "modifier": "Optional",
            "type": {"Plain": 460},
            "fallback": [0],
            "docs": [
              " Storage version of the pallet.",
              "",
              " New networks start with last version."
            ]
          }
        ]
      },
      "calls": {"type": 275},
      "events": {"type": 129},
      "constants": [
        {
          "name": "EnactmentPeriod",
          "type": 4,
          "value": [64, 56, 0, 0],
          "docs": [
            " The period between a proposal being approved and enacted.",
            "",
            " It should generally be a little more than the unstake period to ensure that",
            " voting stakers have an opportunity to remove themselves from the system in the case",
            " where they are on the losing side of a vote."
          ]
        },
        {
          "name": "LaunchPeriod",
          "type": 4,
          "value": [160, 140, 0, 0],
          "docs": [" How often (in blocks) new public referenda are launched."]
        },
        {
          "name": "VotingPeriod",
          "type": 4,
          "value": [160, 140, 0, 0],
          "docs": [" How often (in blocks) to check for new votes."]
        },
        {
          "name": "VoteLockingPeriod",
          "type": 4,
          "value": [192, 137, 1, 0],
          "docs": [
            " The minimum period of vote locking.",
            "",
            " It should be no shorter than enactment period to ensure that in the case of an approval,",
            " those successful voters are locked into the consequences that their votes entail."
          ]
        },
        {
          "name": "MinimumDeposit",
          "type": 6,
          "value": [0, 128, 244, 32, 230, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The minimum amount to be used as a deposit for a public referendum proposal."
          ]
        },
        {
          "name": "InstantAllowed",
          "type": 121,
          "value": [1],
          "docs": [
            " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
            " want to set this permanently to `false`, others may want to condition it on things such",
            " as an upgrade having happened recently."
          ]
        },
        {
          "name": "FastTrackVotingPeriod",
          "type": 4,
          "value": [132, 3, 0, 0],
          "docs": [
            " Minimum voting period allowed for a fast-track referendum."
          ]
        },
        {
          "name": "CooloffPeriod",
          "type": 4,
          "value": [224, 196, 0, 0],
          "docs": [
            " Period in blocks where an external proposal may not be re-submitted after being vetoed."
          ]
        },
        {
          "name": "PreimageByteDeposit",
          "type": 6,
          "value": [0, 70, 195, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The amount of balance that must be deposited per byte of preimage stored."
          ]
        },
        {
          "name": "MaxVotes",
          "type": 4,
          "value": [100, 0, 0, 0],
          "docs": [
            " The maximum number of votes for an account.",
            "",
            " Also used to compute weight, an overly big value can",
            " lead to extrinsic with very big weight: see `delegate` for instance."
          ]
        },
        {
          "name": "MaxProposals",
          "type": 4,
          "value": [100, 0, 0, 0],
          "docs": [
            " The maximum number of public proposals that can exist at any time."
          ]
        }
      ],
      "errors": {"type": 461},
      "index": 69
    },
    {
      "name": "AcalaOracle",
      "storage": {
        "prefix": "AcalaOracle",
        "items": [
          {
            "name": "RawValues",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Twox64Concat"],
                "key": 339,
                "value": 462
              }
            },
            "fallback": [0],
            "docs": [" Raw values for each oracle operators"]
          },
          {
            "name": "IsUpdated",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 121
              }
            },
            "fallback": [0],
            "docs": [
              " True if Self::values(key) is up to date, otherwise the value is stale"
            ]
          },
          {
            "name": "Values",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 462
              }
            },
            "fallback": [0],
            "docs": [" Combined value, may not be up to date"]
          },
          {
            "name": "HasDispatched",
            "modifier": "Default",
            "type": {"Plain": 463},
            "fallback": [0],
            "docs": [" If an oracle operator has feed a value in this block"]
          }
        ]
      },
      "calls": {"type": 279},
      "events": {"type": 131},
      "constants": [],
      "errors": {"type": 465},
      "index": 70
    },
    {
      "name": "OperatorMembershipAcala",
      "storage": {
        "prefix": "OperatorMembershipAcala",
        "items": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {"Plain": 59},
            "fallback": [0],
            "docs": [" The current membership, stored as an ordered Vec."]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [" The current prime member, if one exists."]
          }
        ]
      },
      "calls": {"type": 280},
      "events": {"type": 135},
      "constants": [],
      "errors": {"type": 466},
      "index": 71
    },
    {
      "name": "Auction",
      "storage": {
        "prefix": "Auction",
        "items": [
          {
            "name": "Auctions",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 467
              }
            },
            "fallback": [0],
            "docs": [
              " Stores on-going and future auctions. Closed auction are removed."
            ]
          },
          {
            "name": "AuctionsIndex",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Track the next auction ID."]
          },
          {
            "name": "AuctionEndTime",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Blake2_128Concat"],
                "key": 29,
                "value": 32
              }
            },
            "fallback": [0],
            "docs": [" Index auctions by end time."]
          }
        ]
      },
      "calls": {"type": 281},
      "events": {"type": 136},
      "constants": [],
      "errors": {"type": 469},
      "index": 80
    },
    {
      "name": "Rewards",
      "storage": {
        "prefix": "Rewards",
        "items": [
          {
            "name": "PoolInfos",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 155,
                "value": 470
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" Record reward pool info.", "", " map PoolId => PoolInfo"]
          },
          {
            "name": "SharesAndWithdrawnRewards",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Twox64Concat"],
                "key": 475,
                "value": 476
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Record share amount, reward currency and withdrawn reward amount for",
              " specific `AccountId` under `PoolId`.",
              "",
              " double_map (PoolId, AccountId) => (Share, BTreeMap<CurrencyId, Balance>)"
            ]
          }
        ]
      },
      "calls": {"type": 282},
      "events": null,
      "constants": [],
      "errors": {"type": 478},
      "index": 81
    },
    {
      "name": "OrmlNFT",
      "storage": {
        "prefix": "OrmlNFT",
        "items": [
          {
            "name": "NextClassId",
            "modifier": "Default",
            "type": {"Plain": 4},
            "fallback": [0, 0, 0, 0],
            "docs": [" Next available class ID."]
          },
          {
            "name": "NextTokenId",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 8
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [" Next available token ID."]
          },
          {
            "name": "Classes",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 479
              }
            },
            "fallback": [0],
            "docs": [
              " Store class info.",
              "",
              " Returns `None` if class info not set or removed."
            ]
          },
          {
            "name": "Tokens",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Twox64Concat"],
                "key": 305,
                "value": 482
              }
            },
            "fallback": [0],
            "docs": [
              " Store token info.",
              "",
              " Returns `None` if token info not set or removed."
            ]
          },
          {
            "name": "TokensByOwner",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key": 485,
                "value": 32
              }
            },
            "fallback": [],
            "docs": [" Token existence check by owner and class ID."]
          }
        ]
      },
      "calls": null,
      "events": null,
      "constants": [],
      "errors": {"type": 486},
      "index": 82
    },
    {
      "name": "Prices",
      "storage": {
        "prefix": "Prices",
        "items": [
          {
            "name": "LockedPrice",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 134
              }
            },
            "fallback": [0],
            "docs": [
              " Mapping from currency id to it's locked price",
              "",
              " map CurrencyId => Option<Price>"
            ]
          }
        ]
      },
      "calls": {"type": 283},
      "events": {"type": 137},
      "constants": [
        {
          "name": "GetStableCurrencyId",
          "type": 44,
          "value": [0, 1],
          "docs": [" The stable currency id, it should be AUSD in Acala."]
        },
        {
          "name": "StableCurrencyFixedPrice",
          "type": 134,
          "value": [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The fixed prices of stable currency, it should be 1 USD in Acala."
          ]
        },
        {
          "name": "GetStakingCurrencyId",
          "type": 44,
          "value": [0, 2],
          "docs": [" The staking currency id, it should be DOT in Acala."]
        },
        {
          "name": "GetLiquidCurrencyId",
          "type": 44,
          "value": [0, 3],
          "docs": [" The liquid currency id, it should be LDOT in Acala."]
        }
      ],
      "errors": {"type": 487},
      "index": 90
    },
    {
      "name": "Dex",
      "storage": {
        "prefix": "Dex",
        "items": [
          {
            "name": "LiquidityPool",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 141,
                "value": 472
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Liquidity pool for TradingPair.",
              "",
              " LiquidityPool: map TradingPair => (Balance, Balance)"
            ]
          },
          {
            "name": "TradingPairStatuses",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 141,
                "value": 488
              }
            },
            "fallback": [0],
            "docs": [
              " Status for TradingPair.",
              "",
              " TradingPairStatuses: map TradingPair => TradingPairStatus"
            ]
          },
          {
            "name": "ProvisioningPool",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Twox64Concat"],
                "key": 490,
                "value": 472
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Provision of TradingPair by AccountId.",
              "",
              " ProvisioningPool: double_map TradingPair, AccountId => (Balance,",
              " Balance)"
            ]
          },
          {
            "name": "InitialShareExchangeRates",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 141,
                "value": 491
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Initial exchange rate, used to calculate the dex share amount for founders of provisioning",
              "",
              " InitialShareExchangeRates: map TradingPair => (ExchangeRate, ExchangeRate)"
            ]
          }
        ]
      },
      "calls": {"type": 284},
      "events": {"type": 138},
      "constants": [
        {
          "name": "GetExchangeFee",
          "type": 29,
          "value": [3, 0, 0, 0, 232, 3, 0, 0],
          "docs": [
            " Trading fee rate",
            " The first item of the tuple is the numerator of the fee rate, second",
            " item is the denominator, fee_rate = numerator / denominator,",
            " use (u32, u32) over `Rate` type to minimize internal division",
            " operation."
          ]
        },
        {
          "name": "TradingPathLimit",
          "type": 4,
          "value": [4, 0, 0, 0],
          "docs": [" The limit for length of trading path"]
        },
        {
          "name": "PalletId",
          "type": 356,
          "value": [97, 99, 97, 47, 100, 101, 120, 109],
          "docs": [" The DEX's module id, keep all assets in DEX."]
        }
      ],
      "errors": {"type": 492},
      "index": 91
    },
    {
      "name": "AuctionManager",
      "storage": {
        "prefix": "AuctionManager",
        "items": [
          {
            "name": "CollateralAuctions",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 493
              }
            },
            "fallback": [0],
            "docs": [
              " Mapping from auction id to collateral auction info",
              "",
              " CollateralAuctions: map AuctionId => Option<CollateralAuctionItem>"
            ]
          },
          {
            "name": "TotalCollateralInAuction",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 6
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Record of the total collateral amount of all active collateral auctions",
              " under specific collateral type CollateralType -> TotalAmount",
              "",
              " TotalCollateralInAuction: map CurrencyId => Balance"
            ]
          },
          {
            "name": "TotalTargetInAuction",
            "modifier": "Default",
            "type": {"Plain": 6},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Record of total target sales of all active collateral auctions",
              "",
              " TotalTargetInAuction: Balance"
            ]
          }
        ]
      },
      "calls": {"type": 285},
      "events": {"type": 142},
      "constants": [
        {
          "name": "MinimumIncrementSize",
          "type": 134,
          "value": [0, 0, 130, 223, 228, 13, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The minimum increment size of each bid compared to the previous one"
          ]
        },
        {
          "name": "AuctionTimeToClose",
          "type": 4,
          "value": [75, 0, 0, 0],
          "docs": [
            " The extended time for the auction to end after each successful bid"
          ]
        },
        {
          "name": "AuctionDurationSoftCap",
          "type": 4,
          "value": [88, 2, 0, 0],
          "docs": [
            " When the total duration of the auction exceeds this soft cap, push",
            " the auction to end more faster"
          ]
        },
        {
          "name": "GetStableCurrencyId",
          "type": 44,
          "value": [0, 1],
          "docs": [" The stable currency id"]
        },
        {
          "name": "UnsignedPriority",
          "type": 8,
          "value": [51, 51, 51, 51, 51, 51, 51, 51],
          "docs": [
            " A configuration for base priority of unsigned transactions.",
            "",
            " This is exposed so that it can be tuned for particular runtime, when",
            " multiple modules send unsigned transactions."
          ]
        },
        {
          "name": "DefaultSwapParitalPathList",
          "type": 349,
          "value": [8, 4, 0, 1, 8, 0, 2, 0, 1],
          "docs": [
            " The default parital path list for DEX to directly take auction,",
            " Note: the path is parital, the whole swap path is collateral currency id concat",
            " the partial path. And the list is sorted, DEX try to take auction by order."
          ]
        }
      ],
      "errors": {"type": 494},
      "index": 100
    },
    {
      "name": "Loans",
      "storage": {
        "prefix": "Loans",
        "items": [
          {
            "name": "Positions",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Twox64Concat"],
                "key": 495,
                "value": 496
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The collateralized debit positions, map from",
              " Owner -> CollateralType -> Position",
              "",
              " Positions: double_map CurrencyId, AccountId => Position"
            ]
          },
          {
            "name": "TotalPositions",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 496
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The total collateralized debit positions, map from",
              " CollateralType -> Position",
              "",
              " TotalPositions: CurrencyId => Position"
            ]
          }
        ]
      },
      "calls": {"type": 286},
      "events": {"type": 143},
      "constants": [
        {
          "name": "PalletId",
          "type": 356,
          "value": [97, 99, 97, 47, 108, 111, 97, 110],
          "docs": [" The loan's module id, keep all collaterals of CDPs."]
        }
      ],
      "errors": {"type": 497},
      "index": 101
    },
    {
      "name": "Honzon",
      "storage": {
        "prefix": "Honzon",
        "items": [
          {
            "name": "Authorization",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Blake2_128Concat"],
                "key": 498,
                "value": 6
              }
            },
            "fallback": [0],
            "docs": [
              " The authorization relationship map from",
              " Authorizer -> (CollateralType, Authorizee) -> Authorized",
              "",
              " Authorization: double_map AccountId, (CurrencyId, T::AccountId) => Option<Balance>"
            ]
          }
        ]
      },
      "calls": {"type": 287},
      "events": {"type": 144},
      "constants": [
        {
          "name": "DepositPerAuthorization",
          "type": 6,
          "value": [0, 192, 101, 67, 172, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" Reserved amount per authorization."]
        }
      ],
      "errors": {"type": 499},
      "index": 102
    },
    {
      "name": "CdpTreasury",
      "storage": {
        "prefix": "CdpTreasury",
        "items": [
          {
            "name": "ExpectedCollateralAuctionSize",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 6
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " The expected amount size for per lot collateral auction of specific",
              " collateral type.",
              "",
              " ExpectedCollateralAuctionSize: map CurrencyId => Balance"
            ]
          },
          {
            "name": "DebitPool",
            "modifier": "Default",
            "type": {"Plain": 6},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Current total debit value of system. It's not same as debit in CDP",
              " engine, it is the bad debt of the system.",
              "",
              " DebitPool: Balance"
            ]
          }
        ]
      },
      "calls": {"type": 288},
      "events": {"type": 145},
      "constants": [
        {
          "name": "GetStableCurrencyId",
          "type": 44,
          "value": [0, 1],
          "docs": [" Stablecoin currency id"]
        },
        {
          "name": "MaxAuctionsCount",
          "type": 4,
          "value": [100, 0, 0, 0],
          "docs": [
            " The cap of lots number when create collateral auction on a",
            " liquidation or to create debit/surplus auction on block end.",
            " If set to 0, does not work."
          ]
        },
        {
          "name": "TreasuryAccount",
          "type": 0,
          "value": [
            109,
            111,
            100,
            108,
            97,
            99,
            97,
            47,
            104,
            122,
            116,
            114,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          "docs": []
        },
        {
          "name": "PalletId",
          "type": 356,
          "value": [97, 99, 97, 47, 99, 100, 112, 116],
          "docs": [
            " The CDP treasury's module id, keep surplus and collateral assets",
            " from liquidation."
          ]
        }
      ],
      "errors": {"type": 500},
      "index": 103
    },
    {
      "name": "CdpEngine",
      "storage": {
        "prefix": "CdpEngine",
        "items": [
          {
            "name": "DebitExchangeRate",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 134
              }
            },
            "fallback": [0],
            "docs": [
              " Mapping from collateral type to its exchange rate of debit units and",
              " debit value",
              "",
              " DebitExchangeRate: CurrencyId => Option<ExchangeRate>"
            ]
          },
          {
            "name": "GlobalInterestRatePerSec",
            "modifier": "Default",
            "type": {"Plain": 134},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Global interest rate per sec for all types of collateral",
              "",
              " GlobalInterestRatePerSec: Rate"
            ]
          },
          {
            "name": "CollateralParams",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 44,
                "value": 501
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Mapping from collateral type to its risk management params",
              "",
              " CollateralParams: CurrencyId => RiskManagementParams"
            ]
          },
          {
            "name": "LastAccumulationSecs",
            "modifier": "Default",
            "type": {"Plain": 8},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Timestamp in seconds of the last interest accumulation",
              "",
              " LastAccumulationSecs: u64"
            ]
          }
        ]
      },
      "calls": {"type": 289},
      "events": {"type": 146},
      "constants": [
        {
          "name": "CollateralCurrencyIds",
          "type": 139,
          "value": [8, 0, 2, 0, 3],
          "docs": [" The list of valid collateral currency types"]
        },
        {
          "name": "DefaultLiquidationRatio",
          "type": 134,
          "value": [0, 0, 22, 123, 13, 18, 209, 20, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The default liquidation ratio for all collateral types of CDP"
          ]
        },
        {
          "name": "DefaultDebitExchangeRate",
          "type": 134,
          "value": [0, 0, 138, 93, 120, 69, 99, 1, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The default debit exchange rate for all collateral types"]
        },
        {
          "name": "DefaultLiquidationPenalty",
          "type": 134,
          "value": [0, 0, 8, 126, 147, 55, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The default liquidation penalty rate when liquidate unsafe CDP"
          ]
        },
        {
          "name": "MinimumDebitValue",
          "type": 6,
          "value": [0, 64, 229, 156, 48, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The minimum debit value to avoid debit dust"]
        },
        {
          "name": "GetStableCurrencyId",
          "type": 44,
          "value": [0, 1],
          "docs": [" Stablecoin currency id"]
        },
        {
          "name": "MaxSwapSlippageCompareToOracle",
          "type": 134,
          "value": [0, 0, 79, 140, 52, 232, 20, 2, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " When swap with DEX, the acceptable max slippage for the price from oracle."
          ]
        },
        {
          "name": "UnsignedPriority",
          "type": 8,
          "value": [255, 255, 255, 255, 255, 255, 255, 127],
          "docs": [
            " A configuration for base priority of unsigned transactions.",
            "",
            " This is exposed so that it can be tuned for particular runtime, when",
            " multiple modules send unsigned transactions."
          ]
        },
        {
          "name": "DefaultSwapParitalPathList",
          "type": 349,
          "value": [8, 4, 0, 1, 8, 0, 2, 0, 1],
          "docs": [
            " The default parital path list for CDP engine to swap collateral to stable,",
            " Note: the path is parital, the whole swap path is collateral currency id concat",
            " the partial path. And the list is sorted, CDP engine trys to swap stable by order."
          ]
        }
      ],
      "errors": {"type": 502},
      "index": 104
    },
    {
      "name": "EmergencyShutdown",
      "storage": {
        "prefix": "EmergencyShutdown",
        "items": [
          {
            "name": "IsShutdown",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [" Emergency shutdown flag", "", " IsShutdown: bool"]
          },
          {
            "name": "CanRefund",
            "modifier": "Default",
            "type": {"Plain": 121},
            "fallback": [0],
            "docs": [" Open final redemption flag", "", " CanRefund: bool"]
          }
        ]
      },
      "calls": {"type": 292},
      "events": {"type": 149},
      "constants": [
        {
          "name": "CollateralCurrencyIds",
          "type": 139,
          "value": [8, 0, 2, 0, 3],
          "docs": [" The list of valid collateral currency types"]
        }
      ],
      "errors": {"type": 503},
      "index": 105
    },
    {
      "name": "HomaLite",
      "storage": {
        "prefix": "HomaLite",
        "items": [
          {
            "name": "TotalStakingCurrency",
            "modifier": "Default",
            "type": {"Plain": 6},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " The total amount of the staking currency on the relaychain.",
              " This info is used to calculate the exchange rate between Staking and Liquid currencies.",
              " TotalStakingCurrency: value: Balance"
            ]
          },
          {
            "name": "StakingCurrencyMintCap",
            "modifier": "Default",
            "type": {"Plain": 6},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " The cap on the total amount of staking currency allowed to mint Liquid currency.",
              " StakingCurrencyMintCap: value: Balance"
            ]
          },
          {
            "name": "XcmDestWeight",
            "modifier": "Default",
            "type": {"Plain": 8},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " The extra weight for cross-chain XCM transfers.",
              " xcm_dest_weight: value: Weight"
            ]
          },
          {
            "name": "RedeemRequests",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 504
              }
            },
            "fallback": [0],
            "docs": [
              " Requests to redeem staked currencies.",
              " RedeemRequests: Map: AccountId => Option<(liquid_amount: Balance, addtional_fee: Permill)>"
            ]
          },
          {
            "name": "AvailableStakingBalance",
            "modifier": "Default",
            "type": {"Plain": 6},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " The amount of staking currency that is available to be redeemed.",
              " AvailableStakingBalance: value: Balance"
            ]
          },
          {
            "name": "ScheduledUnbond",
            "modifier": "Default",
            "type": {"Plain": 505},
            "fallback": [0],
            "docs": [
              " Funds that will be unbonded in the future",
              " ScheduledUnbond: Vec<(staking_amount: Balance, unbond_at: RelayChainBlockNumber>"
            ]
          }
        ]
      },
      "calls": {"type": 293},
      "events": {"type": 152},
      "constants": [
        {
          "name": "StakingCurrencyId",
          "type": 44,
          "value": [0, 2],
          "docs": [" The Currency ID for the Staking asset"]
        },
        {
          "name": "LiquidCurrencyId",
          "type": 44,
          "value": [0, 3],
          "docs": [" The Currency ID for the Liquid asset"]
        },
        {
          "name": "MinimumMintThreshold",
          "type": 6,
          "value": [0, 200, 23, 168, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The minimal amount of Staking currency to be locked"]
        },
        {
          "name": "MinimumRedeemThreshold",
          "type": 6,
          "value": [0, 208, 237, 144, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The minimal amount of Liquid currency to be Redeemed"]
        },
        {
          "name": "SovereignSubAccountLocation",
          "type": 67,
          "value": [
            1,
            1,
            1,
            0,
            215,
            184,
            146,
            107,
            50,
            109,
            211,
            73,
            53,
            90,
            154,
            124,
            202,
            102,
            6,
            193,
            224,
            235,
            111,
            210,
            181,
            6,
            6,
            107,
            81,
            140,
            113,
            85,
            255,
            13,
            130,
            151
          ],
          "docs": [
            " The MultiLocation of the sovereign sub-account for where the staking currencies are sent",
            " to."
          ]
        },
        {
          "name": "SubAccountIndex",
          "type": 38,
          "value": [0, 0],
          "docs": [" The Index to the Homa Lite Sub-account"]
        },
        {
          "name": "DefaultExchangeRate",
          "type": 134,
          "value": [0, 0, 138, 93, 120, 69, 99, 1, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The default exchange rate for liquid currency to staking currency."
          ]
        },
        {
          "name": "MaxRewardPerEra",
          "type": 153,
          "value": [244, 1, 0, 0],
          "docs": [" The maximum rewards that are earned on the relaychain."]
        },
        {
          "name": "MintFee",
          "type": 6,
          "value": [128, 132, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The fixed cost of transaction fee for XCM transfers."]
        },
        {
          "name": "BaseWithdrawFee",
          "type": 153,
          "value": [0, 55, 0, 0],
          "docs": [
            " Equivalent to the loss of % staking reward from unbonding on the RelayChain."
          ]
        },
        {
          "name": "XcmUnbondFee",
          "type": 6,
          "value": [0, 70, 195, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [
            " The fixed cost of withdrawing Staking currency via redeem. In Staking currency."
          ]
        },
        {
          "name": "ParachainAccount",
          "type": 0,
          "value": [
            112,
            97,
            114,
            97,
            208,
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          "docs": [" The account ID to redeem from on the relaychain."]
        },
        {
          "name": "MaximumRedeemRequestMatchesForMint",
          "type": 4,
          "value": [20, 0, 0, 0],
          "docs": [
            " The maximum number of redeem requests to match in \"Mint\" extrinsic."
          ]
        },
        {
          "name": "RelayChainUnbondingSlashingSpans",
          "type": 4,
          "value": [5, 0, 0, 0],
          "docs": [" Unbonding slashing spans for unbonding on the relaychain."]
        },
        {
          "name": "MaxScheduledUnbonds",
          "type": 4,
          "value": [14, 0, 0, 0],
          "docs": [" Maximum number of scheduled unbonds allowed"]
        }
      ],
      "errors": {"type": 506},
      "index": 115
    },
    {
      "name": "Incentives",
      "storage": {
        "prefix": "Incentives",
        "items": [
          {
            "name": "IncentiveRewardAmounts",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Twox64Concat"],
                "key": 507,
                "value": 6
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Mapping from pool to its fixed incentive amounts of multi currencies per period.",
              "",
              " IncentiveRewardAmounts: double_map Pool, RewardCurrencyId => RewardAmountPerPeriod"
            ]
          },
          {
            "name": "DexSavingRewardRates",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 155,
                "value": 134
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Mapping from pool to its fixed reward rate per period.",
              "",
              " DexSavingRewardRates: map Pool => SavingRatePerPeriod"
            ]
          },
          {
            "name": "ClaimRewardDeductionRates",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 155,
                "value": 134
              }
            },
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Mapping from pool to its claim reward deduction rate.",
              "",
              " ClaimRewardDeductionRates: map Pool => DeductionRate"
            ]
          },
          {
            "name": "PendingMultiRewards",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Twox64Concat"],
                "key": 475,
                "value": 477
              }
            },
            "fallback": [0],
            "docs": [
              " The pending rewards amount, actual available rewards amount may be deducted",
              "",
              " PendingMultiRewards: double_map PoolId, AccountId => BTreeMap<CurrencyId, Balance>"
            ]
          }
        ]
      },
      "calls": {"type": 296},
      "events": {"type": 154},
      "constants": [
        {
          "name": "AccumulatePeriod",
          "type": 4,
          "value": [5, 0, 0, 0],
          "docs": [" The period to accumulate rewards"]
        },
        {
          "name": "StableCurrencyId",
          "type": 44,
          "value": [0, 1],
          "docs": [" The reward type for dex saving."]
        },
        {
          "name": "RewardsSource",
          "type": 0,
          "value": [
            109,
            111,
            100,
            108,
            97,
            99,
            97,
            47,
            117,
            114,
            108,
            115,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          "docs": [" The source account for native token rewards."]
        },
        {
          "name": "PalletId",
          "type": 356,
          "value": [97, 99, 97, 47, 105, 110, 99, 116],
          "docs": [" The module id, keep DexShare LP."]
        }
      ],
      "errors": {"type": 508},
      "index": 120
    },
    {
      "name": "NFT",
      "storage": null,
      "calls": {"type": 301},
      "events": {"type": 156},
      "constants": [
        {
          "name": "CreateClassDeposit",
          "type": 6,
          "value": [0, 32, 61, 136, 121, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The minimum balance to create class"]
        },
        {
          "name": "CreateTokenDeposit",
          "type": 6,
          "value": [0, 208, 237, 144, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The minimum balance to create token"]
        },
        {
          "name": "DataDepositPerByte",
          "type": 6,
          "value": [0, 70, 195, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" Deposit required for per byte."]
        },
        {
          "name": "PalletId",
          "type": 356,
          "value": [97, 99, 97, 47, 97, 78, 70, 84],
          "docs": [" The NFT's module id"]
        },
        {
          "name": "MaxAttributesBytes",
          "type": 4,
          "value": [0, 8, 0, 0],
          "docs": [" Maximum number of bytes in attributes"]
        }
      ],
      "errors": {"type": 509},
      "index": 121
    },
    {
      "name": "EVM",
      "storage": {
        "prefix": "EVM",
        "items": [
          {
            "name": "Accounts",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 47,
                "value": 510
              }
            },
            "fallback": [0],
            "docs": [
              " The EVM accounts info.",
              "",
              " Accounts: map EvmAddress => Option<AccountInfo<T>>"
            ]
          },
          {
            "name": "ContractStorageSizes",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 47,
                "value": 4
              }
            },
            "fallback": [0, 0, 0, 0],
            "docs": [
              " The storage usage for contracts. Including code size, extra bytes and total AccountStorages",
              " size.",
              "",
              " Accounts: map EvmAddress => u32"
            ]
          },
          {
            "name": "AccountStorages",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat", "Blake2_128Concat"],
                "key": 513,
                "value": 9
              }
            },
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The storages for EVM contracts.",
              "",
              " AccountStorages: double_map EvmAddress, H256 => H256"
            ]
          },
          {
            "name": "Codes",
            "modifier": "Default",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 514
              }
            },
            "fallback": [0],
            "docs": [
              " The code for EVM contracts.",
              " Key is Keccak256 hash of code.",
              "",
              " Codes: H256 => Vec<u8>"
            ]
          },
          {
            "name": "CodeInfos",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Identity"],
                "key": 9,
                "value": 515
              }
            },
            "fallback": [0],
            "docs": [
              " The code info for EVM contracts.",
              " Key is Keccak256 hash of code.",
              "",
              " CodeInfos: H256 => Option<CodeInfo>"
            ]
          },
          {
            "name": "NetworkContractIndex",
            "modifier": "Default",
            "type": {"Plain": 8},
            "fallback": [0, 0, 0, 0, 0, 0, 0, 0],
            "docs": [
              " Next available system contract address.",
              "",
              " NetworkContractIndex: u64"
            ]
          },
          {
            "name": "ExtrinsicOrigin",
            "modifier": "Optional",
            "type": {"Plain": 0},
            "fallback": [0],
            "docs": [
              " Extrinsics origin for the current transaction.",
              "",
              " ExtrinsicOrigin: Option<AccountId>"
            ]
          }
        ]
      },
      "calls": {"type": 306},
      "events": {"type": 157},
      "constants": [
        {
          "name": "NewContractExtraBytes",
          "type": 4,
          "value": [16, 39, 0, 0],
          "docs": [
            " Charge extra bytes for creating a contract, would be reserved until",
            " the contract deleted."
          ]
        },
        {
          "name": "StorageDepositPerByte",
          "type": 6,
          "value": [0, 70, 195, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" Storage required for per byte."]
        },
        {
          "name": "ChainId",
          "type": 8,
          "value": [19, 3, 0, 0, 0, 0, 0, 0],
          "docs": [" Chain ID of EVM."]
        },
        {
          "name": "NetworkContractSource",
          "type": 47,
          "value": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The EVM address for creating system contract."]
        },
        {
          "name": "DeveloperDeposit",
          "type": 6,
          "value": [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" Deposit for the developer."]
        },
        {
          "name": "DeploymentFee",
          "type": 6,
          "value": [0, 0, 193, 111, 242, 134, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          "docs": [" The fee for deploying the contract."]
        },
        {
          "name": "TreasuryAccount",
          "type": 0,
          "value": [
            109,
            111,
            100,
            108,
            97,
            99,
            97,
            47,
            116,
            114,
            115,
            121,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          "docs": []
        }
      ],
      "errors": {"type": 516},
      "index": 130
    },
    {
      "name": "EVMBridge",
      "storage": null,
      "calls": null,
      "events": null,
      "constants": [],
      "errors": {"type": 517},
      "index": 131
    },
    {
      "name": "EvmAccounts",
      "storage": {
        "prefix": "EvmAccounts",
        "items": [
          {
            "name": "Accounts",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 47,
                "value": 0
              }
            },
            "fallback": [0],
            "docs": [
              " The Substrate Account for EvmAddresses",
              "",
              " Accounts: map EvmAddress => Option<AccountId>"
            ]
          },
          {
            "name": "EvmAddresses",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 0,
                "value": 47
              }
            },
            "fallback": [0],
            "docs": [
              " The EvmAddress for Substrate Accounts",
              "",
              " EvmAddresses: map AccountId => Option<EvmAddress>"
            ]
          }
        ]
      },
      "calls": {"type": 308},
      "events": {"type": 168},
      "constants": [],
      "errors": {"type": 518},
      "index": 132
    },
    {
      "name": "EvmManager",
      "storage": {
        "prefix": "EvmManager",
        "items": [
          {
            "name": "CurrencyIdMap",
            "modifier": "Optional",
            "type": {
              "Map": {
                "hashers": ["Twox64Concat"],
                "key": 4,
                "value": 519
              }
            },
            "fallback": [0],
            "docs": [
              " Mapping between u32 and Erc20 address.",
              " Erc20 address is 20 byte, take the first 4 non-zero bytes, if it is less",
              " than 4, add 0 to the left.",
              "",
              " map u32 => Option<Erc20Info>"
            ]
          }
        ]
      },
      "calls": null,
      "events": null,
      "constants": [],
      "errors": {"type": 520},
      "index": 133
    },
    {
      "name": "Sudo",
      "storage": {
        "prefix": "Sudo",
        "items": [
          {
            "name": "Key",
            "modifier": "Default",
            "type": {"Plain": 0},
            "fallback": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [" The `AccountId` of the sudo key."]
          }
        ]
      },
      "calls": {"type": 311},
      "events": {"type": 169},
      "constants": [],
      "errors": {"type": 521},
      "index": 255
    }
  ],
  "extrinsic": {
    "type": 522,
    "version": 4,
    "signedExtensions": [
      {"identifier": "CheckSpecVersion", "type": 528, "additionalSigned": 4},
      {"identifier": "CheckTxVersion", "type": 529, "additionalSigned": 4},
      {"identifier": "CheckGenesis", "type": 530, "additionalSigned": 9},
      {"identifier": "CheckMortality", "type": 531, "additionalSigned": 9},
      {"identifier": "CheckNonce", "type": 533, "additionalSigned": 32},
      {"identifier": "CheckWeight", "type": 534, "additionalSigned": 32},
      {
        "identifier": "ChargeTransactionPayment",
        "type": 535,
        "additionalSigned": 32
      },
      {"identifier": "SetEvmOrigin", "type": 536, "additionalSigned": 32}
    ]
  },
  "type": 537
};
