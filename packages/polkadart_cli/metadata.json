{magicNumber: 1635018093, metadata: {V15: {types: [{id: 0, type: {path: [sp_core, crypto, AccountId32], def: {fields: [{type: 1, typeName: [u8; 32]}]}}}, {id: 1, type: {def: {len: 32, type: 2}}}, {id: 2, type: {def: {primitive: u8}}}, {id: 3, type: {path: [frame_system, AccountInfo], params: [{name: Nonce, type: 4}, {name: AccountData, type: 5}], def: {fields: [{name: nonce, type: 4, typeName: Nonce}, {name: consumers, type: 4, typeName: RefCount}, {name: providers, type: 4, typeName: RefCount}, {name: sufficients, type: 4, typeName: RefCount}, {name: data, type: 5, typeName: AccountData}]}}}, {id: 4, type: {def: {primitive: u32}}}, {id: 5, type: {path: [pallet_balances, types, AccountData], params: [{name: Balance, type: 6}], def: {fields: [{name: free, type: 6, typeName: Balance}, {name: reserved, type: 6, typeName: Balance}, {name: frozen, type: 6, typeName: Balance}, {name: flags, type: 7, typeName: ExtraFlags}]}}}, {id: 6, type: {def: {primitive: u128}}}, {id: 7, type: {path: [pallet_balances, types, ExtraFlags], def: {fields: [{type: 6, typeName: u128}]}}}, {id: 8, type: {path: [frame_support, dispatch, PerDispatchClass], params: [{name: T, type: 9}], def: {fields: [{name: normal, type: 9, typeName: T}, {name: operational, type: 9, typeName: T}, {name: mandatory, type: 9, typeName: T}]}}}, {id: 9, type: {path: [sp_weights, weight_v2, Weight], def: {fields: [{name: ref_time, type: 10, typeName: u64}, {name: proof_size, type: 10, typeName: u64}]}}}, {id: 10, type: {def: {type: 11}}}, {id: 11, type: {def: {primitive: u64}}}, {id: 12, type: {path: [primitive_types, H256], def: {fields: [{type: 1, typeName: [u8; 32]}]}}}, {id: 13, type: {def: {type: 2}}}, {id: 14, type: {path: [sp_runtime, generic, digest, Digest], def: {fields: [{name: logs, type: 15, typeName: Vec<DigestItem>}]}}}, {id: 15, type: {def: {type: 16}}}, {id: 16, type: {path: [sp_runtime, generic, digest, DigestItem], def: {variants: [{name: PreRuntime, fields: [{type: 17, typeName: ConsensusEngineId}, {type: 13, typeName: Vec<u8>}], index: 6}, {name: Consensus, fields: [{type: 17, typeName: ConsensusEngineId}, {type: 13, typeName: Vec<u8>}], index: 4}, {name: Seal, fields: [{type: 17, typeName: ConsensusEngineId}, {type: 13, typeName: Vec<u8>}], index: 5}, {name: Other, fields: [{type: 13, typeName: Vec<u8>}], index: 0}, {name: RuntimeEnvironmentUpdated, index: 8}]}}}, {id: 17, type: {def: {len: 4, type: 2}}}, {id: 18, type: {def: {type: 19}}}, {id: 19, type: {path: [frame_system, EventRecord], params: [{name: E, type: 20}, {name: T, type: 12}], def: {fields: [{name: phase, type: 523, typeName: Phase}, {name: event, type: 20, typeName: E}, {name: topics, type: 197, typeName: Vec<T>}]}}}, {id: 20, type: {path: [staging_kusama_runtime, RuntimeEvent], def: {variants: [{name: System, fields: [{type: 21, typeName: frame_system::Event<Runtime>}], index: 0}, {name: Indices, fields: [{type: 31, typeName: pallet_indices::Event<Runtime>}], index: 3}, {name: Balances, fields: [{type: 32, typeName: pallet_balances::Event<Runtime>}], index: 4}, {name: TransactionPayment, fields: [{type: 34, typeName: pallet_transaction_payment::Event<Runtime>}], index: 33}, {name: Staking, fields: [{type: 35, typeName: pallet_staking::Event<Runtime>}], index: 6}, {name: Offences, fields: [{type: 41, typeName: pallet_offences::Event}], index: 7}, {name: Session, fields: [{type: 43, typeName: pallet_session::Event}], index: 8}, {name: Grandpa, fields: [{type: 44, typeName: pallet_grandpa::Event}], index: 10}, {name: ImOnline, fields: [{type: 49, typeName: pallet_im_online::Event<Runtime>}], index: 11}, {name: Treasury, fields: [{type: 58, typeName: pallet_treasury::Event<Runtime>}], index: 18}, {name: ConvictionVoting, fields: [{type: 92, typeName: pallet_conviction_voting::Event<Runtime>}], index: 20}, {name: Referenda, fields: [{type: 93, typeName: pallet_referenda::Event<Runtime>}], index: 21}, {name: FellowshipCollective, fields: [{type: 471, typeName: pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::
Instance1>}], index: 22}, {name: FellowshipReferenda, fields: [{type: 474, typeName: pallet_referenda::Event<Runtime, pallet_referenda::Instance2>}], index: 23}, {name: Whitelist, fields: [{type: 475, typeName: pallet_whitelist::Event<Runtime>}], index: 44}, {name: Claims, fields: [{type: 480, typeName: claims::Event<Runtime>}], index: 19}, {name: Utility, fields: [{type: 481, typeName: pallet_utility::Event}], index: 24}, {name: Society, fields: [{type: 483, typeName: pallet_society::Event<Runtime>}], index: 26}, {name: Recovery, fields: [{type: 485, typeName: pallet_recovery::Event<Runtime>}], index: 27}, {name: Vesting, fields: [{type: 486, typeName: pallet_vesting::Event<Runtime>}], index: 28}, {name: Scheduler, fields: [{type: 487, typeName: pallet_scheduler::Event<Runtime>}], index: 29}, {name: Proxy, fields: [{type: 489, typeName: pallet_proxy::Event<Runtime>}], index: 30}, {name: Multisig, fields: [{type: 490, typeName: pallet_multisig::Event<Runtime>}], index: 31}, {name: Preimage, fields: [{type: 491, typeName: pallet_preimage::Event<Runtime>}], index: 32}, {name: Bounties, fields: [{type: 492, typeName: pallet_bounties::Event<Runtime>}], index: 35}, {name: ChildBounties, fields: [{type: 493, typeName: pallet_child_bounties::Event<Runtime>}], index: 40}, {name: ElectionProviderMultiPhase, fields: [{type: 494, typeName: pallet_election_provider_multi_phase::Event<Runtime>}], index: 37}, {name: Nis, fields: [{type: 498, typeName: pallet_nis::Event<Runtime>}], index: 38}, {name: NisCounterpartBalances, fields: [{type: 499, typeName: pallet_balances::Event<Runtime, pallet_balances::Instance2>}], index: 45}, {name: VoterList, fields: [{type: 500, typeName: pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>}], index: 39}, {name: NominationPools, fields: [{type: 501, typeName: pallet_nomination_pools::Event<Runtime>}], index: 41}, {name: FastUnstake, fields: [{type: 502, typeName: pallet_fast_unstake::Event<Runtime>}], index: 42}, {name: ParaInclusion, fields: [{type: 503, typeName: parachains_inclusion::Event<Runtime>}], index: 53}, {name: Paras, fields: [{type: 507, typeName: parachains_paras::Event}], index: 56}, {name: Hrmp, fields: [{type: 508, typeName: parachains_hrmp::Event<Runtime>}], index: 60}, {name: ParasDisputes, fields: [{type: 509, typeName: parachains_disputes::Event<Runtime>}], index: 62}, {name: OnDemandAssignmentProvider, fields: [{type: 512, typeName: parachains_assigner_on_demand::Event<Runtime>}], index: 64}, {name: Registrar, fields: [{type: 513, typeName: paras_registrar::Event<Runtime>}], index: 70}, {name: Slots, fields: [{type: 514, typeName: slots::Event<Runtime>}], index: 71}, {name: Auctions, fields: [{type: 515, typeName: auctions::Event<Runtime>}], index: 72}, {name: Crowdloan, fields: [{type: 516, typeName: crowdloan::Event<Runtime>}], index: 73}, {name: Coretime, fields: [{type: 517, typeName: coretime::Event<Runtime>}], index: 74}, {name: XcmPallet, fields: [{type: 518, typeName: pallet_xcm::Event<Runtime>}], index: 99}, {name: MessageQueue, fields: [{type: 520, typeName: pallet_message_queue::Event<Runtime>}], index: 100}, {name: AssetRate, fields: [{type: 522, typeName: pallet_asset_rate::Event<Runtime>}], index: 101}]}}}, {id: 21, type: {path: [frame_system, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: ExtrinsicSuccess, fields: [{name: dispatch_info, type: 22, typeName: DispatchInfo}], index: 0, docs: [An extrinsic completed successfully.]}, {name: ExtrinsicFailed, fields: [{name: dispatch_error, type: 25, typeName: DispatchError}, {name: dispatch_info, type: 22, typeName: DispatchInfo}], index: 1, docs: [An extrinsic failed.]}, {name: CodeUpdated, index: 2, docs: [`:code` was updated.]}, {name: NewAccount, fields: [{name: account, type: 0, typeName: T::AccountId}], index: 3, docs: [A new account was created.]}, {name: KilledAccount, fields: [{name: account, type: 0, typeName: T::AccountId}], index: 4, docs: [An account was reaped.]}, {name: Remarked, fields: [{name: sender, type: 0, typeName: T::AccountId}, {name: hash, type: 12, typeName: T::Hash}], index: 5, docs: [On on-chain remark happened.]}, {name: UpgradeAuthorized, fields: [{name: code_hash, type: 12, typeName: T::Hash}, {name: check_version, type: 30, typeName: bool}], index: 6, docs: [An upgrade was authorized.]}]}, docs: [Event for the System pallet.]}}, {id: 22, type: {path: [frame_support, dispatch, DispatchInfo], def: {fields: [{name: weight, type: 9, typeName: Weight}, {name: class, type: 23, typeName: DispatchClass}, {name: pays_fee, type: 24, typeName: Pays}]}}}, {id: 23, type: {path: [frame_support, dispatch, DispatchClass], def: {variants: [{name: Normal, index: 0}, {name: Operational, index: 1}, {name: Mandatory, index: 2}]}}}, {id: 24, type: {path: [frame_support, dispatch, Pays], def: {variants: [{name: Yes, index: 0}, {name: No, index: 1}]}}}, {id: 25, type: {path: [sp_runtime, DispatchError], def: {variants: [{name: Other, index: 0}, {name: CannotLookup, index: 1}, {name: BadOrigin, index: 2}, {name: Module, fields: [{type: 26, typeName: ModuleError}], index: 3}, {name: ConsumerRemaining, index: 4}, {name: NoProviders, index: 5}, {name: TooManyConsumers, index: 6}, {name: Token, fields: [{type: 27, typeName: TokenError}], index: 7}, {name: Arithmetic, fields: [{type: 28, typeName: ArithmeticError}], index: 8}, {name: Transactional, fields: [{type: 29, typeName: TransactionalError}], index: 9}, {name: Exhausted, index: 10}, {name: Corruption, index: 11}, {name: Unavailable, index: 12}, {name: RootNotAllowed, index: 13}]}}}, {id: 26, type: {path: [sp_runtime, ModuleError], def: {fields: [{name: index, type: 2, typeName: u8}, {name: error, type: 17, typeName: [u8; MAX_MODULE_ERROR_ENCODED_SIZE]}]}}}, {id: 27, type: {path: [sp_runtime, TokenError], def: {variants: [{name: FundsUnavailable, index: 0}, {name: OnlyProvider, index: 1}, {name: BelowMinimum, index: 2}, {name: CannotCreate, index: 3}, {name: UnknownAsset, index: 4}, {name: Frozen, index: 5}, {name: Unsupported, index: 6}, {name: CannotCreateHold, index: 7}, {name: NotExpendable, index: 8}, {name: Blocked, index: 9}]}}}, {id: 28, type: {path: [sp_arithmetic, ArithmeticError], def: {variants: [{name: Underflow, index: 0}, {name: Overflow, index: 1}, {name: DivisionByZero, index: 2}]}}}, {id: 29, type: {path: [sp_runtime, TransactionalError], def: {variants: [{name: LimitReached, index: 0}, {name: NoLayer, index: 1}]}}}, {id: 30, type: {def: {primitive: bool}}}, {id: 31, type: {path: [pallet_indices, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: IndexAssigned, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: index, type: 4, typeName: T::AccountIndex}], index: 0, docs: [A account index was assigned.]}, {name: IndexFreed, fields: [{name: index, type: 4, typeName: T::AccountIndex}], index: 1, docs: [A account index has been freed up (unassigned).]}, {name: IndexFrozen, fields: [{name: index, type: 4, typeName: T::AccountIndex}, {name: who, type: 0, typeName: T::AccountId}], index: 2, docs: [A account index has been frozen to its current account ID.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 32, type: {path: [pallet_balances, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Endowed, fields: [{name: account, type: 0, typeName: T::AccountId}, {name: free_balance, type: 6, typeName: T::Balance}], index: 0, docs: [An account was created with some free balance.]}, {name: DustLost, fields: [{name: account, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 1, docs: [An account was removed whose balance was non-zero but below ExistentialDeposit,, resulting in an outright loss.]}, {name: Transfer, fields: [{name: from, type: 0, typeName: T::AccountId}, {name: to, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 2, docs: [Transfer succeeded.]}, {name: BalanceSet, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: free, type: 6, typeName: T::Balance}], index: 3, docs: [A balance was set by root.]}, {name: Reserved, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 4, docs: [Some balance was reserved (moved from free to reserved).]}, {name: Unreserved, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 5, docs: [Some balance was unreserved (moved from reserved to free).]}, {name: ReserveRepatriated, fields: [{name: from, type: 0, typeName: T::AccountId}, {name: to, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}, {name: destination_status, type: 33, typeName: Status}], index: 6, docs: [Some balance was moved from the reserve of the first account to the second account., Final argument indicates the destination balance type.]}, {name: Deposit, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 7, docs: [Some amount was deposited (e.g. for transaction fees).]}, {name: Withdraw, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 8, docs: [Some amount was withdrawn from the account (e.g. for transaction fees).]}, {name: Slashed, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 9, docs: [Some amount was removed from the account (e.g. for misbehavior).]}, {name: Minted, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 10, docs: [Some amount was minted into an account.]}, {name: Burned, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 11, docs: [Some amount was burned from an account.]}, {name: Suspended, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 12, docs: [Some amount was suspended from an account (it can be restored later).]}, {name: Restored, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 13, docs: [Some amount was restored into an account.]}, {name: Upgraded, fields: [{name: who, type: 0, typeName: T::AccountId}], index: 14, docs: [An account was upgraded.]}, {name: Issued, fields: [{name: amount, type: 6, typeName: T::Balance}], index: 15, docs: [Total issuance was increased by `amount`, creating a credit to be balanced.]}, {name: Rescinded, fields: [{name: amount, type: 6, typeName: T::Balance}], index: 16, docs: [Total issuance was decreased by `amount`, creating a debt to be balanced.]}, {name: Locked, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 17, docs: [Some balance was locked.]}, {name: Unlocked, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 18, docs: [Some balance was unlocked.]}, {name: Frozen, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 19, docs: [Some balance was frozen.]}, {name: Thawed, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 20, docs: [Some balance was thawed.]}, {name: TotalIssuanceForced, fields: [{name: old, type: 6, typeName: T::Balance}, {name: new, type: 6, typeName: T::Balance}], index: 21, docs: [The `TotalIssuance` was forcefully changed.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 33, type: {path: [frame_support, traits, tokens, misc, BalanceStatus], def: {variants: [{name: Free, index: 0}, {name: Reserved, index: 1}]}}}, {id: 34, type: {path: [pallet_transaction_payment, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: TransactionFeePaid, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: actual_fee, type: 6, typeName: BalanceOf<T>}, {name: tip, type: 6, typeName: BalanceOf<T>}], index: 0, docs: [A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,, has been paid by `who`.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 35, type: {path: [pallet_staking, pallet, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: EraPaid, fields: [{name: era_index, type: 4, typeName: EraIndex}, {name: validator_payout, type: 6, typeName: BalanceOf<T>}, {name: remainder, type: 6, typeName: BalanceOf<T>}], index: 0, docs: [The era payout has been set; the first balance is the validator-payout; the second is, the remainder from the maximum amount of reward.]}, {name: Rewarded, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: dest, type: 36, typeName: RewardDestination<T::AccountId>}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 1, docs: [The nominator has been rewarded by this amount to this destination.]}, {name: Slashed, fields: [{name: staker, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 2, docs: [A staker (validator or nominator) has been slashed by the given amount.]}, {name: SlashReported, fields: [{name: validator, type: 0, typeName: T::AccountId}, {name: fraction, type: 37, typeName: Perbill}, {name: slash_era, type: 4, typeName: EraIndex}], index: 3, docs: [A slash for the given validator, for the given percentage of their stake, at the given, era as been reported.]}, {name: OldSlashingReportDiscarded, fields: [{name: session_index, type: 4, typeName: SessionIndex}], index: 4, docs: [An old slashing report from a prior era was discarded because it could, not be processed.]}, {name: StakersElected, index: 5, docs: [A new set of stakers was elected.]}, {name: Bonded, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 6, docs: [An account has bonded this amount. \[stash, amount\], , NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,, it will not be emitted for staking rewards when they are added to stake.]}, {name: Unbonded, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 7, docs: [An account has unbonded this amount.]}, {name: Withdrawn, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 8, docs: [An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`, from the unlocking queue.]}, {name: Kicked, fields: [{name: nominator, type: 0, typeName: T::AccountId}, {name: stash, type: 0, typeName: T::AccountId}], index: 9, docs: [A nominator has been kicked from a validator.]}, {name: StakingElectionFailed, index: 10, docs: [The election failed. No new era is planned.]}, {name: Chilled, fields: [{name: stash, type: 0, typeName: T::AccountId}], index: 11, docs: [An account has stopped participating as either a validator or nominator.]}, {name: PayoutStarted, fields: [{name: era_index, type: 4, typeName: EraIndex}, {name: validator_stash, type: 0, typeName: T::AccountId}], index: 12, docs: [The stakers' rewards are getting paid.]}, {name: ValidatorPrefsSet, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: prefs, type: 38, typeName: ValidatorPrefs}], index: 13, docs: [A validator has set their preferences.]}, {name: SnapshotVotersSizeExceeded, fields: [{name: size, type: 4, typeName: u32}], index: 14, docs: [Voters size limit reached.]}, {name: SnapshotTargetsSizeExceeded, fields: [{name: size, type: 4, typeName: u32}], index: 15, docs: [Targets size limit reached.]}, {name: ForceEra, fields: [{name: mode, type: 40, typeName: Forcing}], index: 16, docs: [A new force era mode was set.]}, {name: ControllerBatchDeprecated, fields: [{name: failures, type: 4, typeName: u32}], index: 17, docs: [Report of a controller batch deprecation.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 36, type: {path: [pallet_staking, RewardDestination], params: [{name: AccountId, type: 0}], def: {variants: [{name: Staked, index: 0}, {name: Stash, index: 1}, {name: Controller, index: 2}, {name: Account, fields: [{type: 0, typeName: AccountId}], index: 3}, {name: None, index: 4}]}}}, {id: 37, type: {path: [sp_arithmetic, per_things, Perbill], def: {fields: [{type: 4, typeName: u32}]}}}, {id: 38, type: {path: [pallet_staking, ValidatorPrefs], def: {fields: [{name: commission, type: 39, typeName: Perbill}, {name: blocked, type: 30, typeName: bool}]}}}, {id: 39, type: {def: {type: 37}}}, {id: 40, type: {path: [pallet_staking, Forcing], def: {variants: [{name: NotForcing, index: 0}, {name: ForceNew, index: 1}, {name: ForceNone, index: 2}, {name: ForceAlways, index: 3}]}}}, {id: 41, type: {path: [pallet_offences, pallet, Event], def: {variants: [{name: Offence, fields: [{name: kind, type: 42, typeName: Kind}, {name: timeslot, type: 13, typeName: OpaqueTimeSlot}], index: 0, docs: [There is an offence reported of the given `kind` happened at the `session_index` and, (kind-specific) time slot. This event is not deposited for duplicate slashes., \[kind, timeslot\].]}]}, docs: [Events type.]}}, {id: 42, type: {def: {len: 16, type: 2}}}, {id: 43, type: {path: [pallet_session, pallet, Event], def: {variants: [{name: NewSession, fields: [{name: session_index, type: 4, typeName: SessionIndex}], index: 0, docs: [New session has happened. Note that the argument is the session index, not the, block number as the type might suggest.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 44, type: {path: [pallet_grandpa, pallet, Event], def: {variants: [{name: NewAuthorities, fields: [{name: authority_set, type: 45, typeName: AuthorityList}], index: 0, docs: [New authority set has been applied.]}, {name: Paused, index: 1, docs: [Current authority set has been paused.]}, {name: Resumed, index: 2, docs: [Current authority set has been resumed.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 45, type: {def: {type: 46}}}, {id: 46, type: {def: {fields: [47, 11]}}}, {id: 47, type: {path: [sp_consensus_grandpa, app, Public], def: {fields: [{type: 48, typeName: ed25519::Public}]}}}, {id: 48, type: {path: [sp_core, ed25519, Public], def: {fields: [{type: 1, typeName: [u8; 32]}]}}}, {id: 49, type: {path: [staging_kusama_runtime, pallet_im_online, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: HeartbeatReceived, fields: [{name: authority_id, type: 50, typeName: super::sr25519::AuthorityId}], index: 0}, {name: AllGood, index: 1}, {name: SomeOffline, fields: [{name: offline, type: 52, typeName: sp_std::vec::Vec<IdentificationTuple<T>>}], index: 2}]}, docs: [The `Event` enum of this pallet]}}, {id: 50, type: {path: [staging_kusama_runtime, pallet_im_online, sr25519, app_sr25519, Public], def: {fields: [{type: 51, typeName: sr25519::Public}]}}}, {id: 51, type: {path: [sp_core, sr25519, Public], def: {fields: [{type: 1, typeName: [u8; 32]}]}}}, {id: 52, type: {def: {type: 53}}}, {id: 53, type: {def: {fields: [0, 54]}}}, {id: 54, type: {path: [sp_staking, Exposure], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: total, type: 55, typeName: Balance}, {name: own, type: 55, typeName: Balance}, {name: others, type: 56, typeName: Vec<IndividualExposure<AccountId, Balance>>}]}}}, {id: 55, type: {def: {type: 6}}}, {id: 56, type: {def: {type: 57}}}, {id: 57, type: {path: [sp_staking, IndividualExposure], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: who, type: 0, typeName: AccountId}, {name: value, type: 55, typeName: Balance}]}}}, {id: 58, type: {path: [pallet_treasury, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Proposed, fields: [{name: proposal_index, type: 4, typeName: ProposalIndex}], index: 0, docs: [New proposal.]}, {name: Spending, fields: [{name: budget_remaining, type: 6, typeName: BalanceOf<T, I>}], index: 1, docs: [We have ended a spend period and will now allocate funds.]}, {name: Awarded, fields: [{name: proposal_index, type: 4, typeName: ProposalIndex}, {name: award, type: 6, typeName: BalanceOf<T, I>}, {name: account, type: 0, typeName: T::AccountId}], index: 2, docs: [Some funds have been allocated.]}, {name: Rejected, fields: [{name: proposal_index, type: 4, typeName: ProposalIndex}, {name: slashed, type: 6, typeName: BalanceOf<T, I>}], index: 3, docs: [A proposal was rejected; funds were slashed.]}, {name: Burnt, fields: [{name: burnt_funds, type: 6, typeName: BalanceOf<T, I>}], index: 4, docs: [Some of our funds have been burnt.]}, {name: Rollover, fields: [{name: rollover_balance, type: 6, typeName: BalanceOf<T, I>}], index: 5, docs: [Spending has finished; this is the amount that rolls over until next spend.]}, {name: Deposit, fields: [{name: value, type: 6, typeName: BalanceOf<T, I>}], index: 6, docs: [Some funds have been deposited.]}, {name: SpendApproved, fields: [{name: proposal_index, type: 4, typeName: ProposalIndex}, {name: amount, type: 6, typeName: BalanceOf<T, I>}, {name: beneficiary, type: 0, typeName: T::AccountId}], index: 7, docs: [A new spend proposal has been approved.]}, {name: UpdatedInactive, fields: [{name: reactivated, type: 6, typeName: BalanceOf<T, I>}, {name: deactivated, type: 6, typeName: BalanceOf<T, I>}], index: 8, docs: [The inactive funds of the pallet have been updated.]}, {name: AssetSpendApproved, fields: [{name: index, type: 4, typeName: SpendIndex}, {name: asset_kind, type: 59, typeName: T::AssetKind}, {name: amount, type: 6, typeName: AssetBalanceOf<T, I>}, {name: beneficiary, type: 84, typeName: T::Beneficiary}, {name: valid_from, type: 4, typeName: BlockNumberFor<T>}, {name: expire_at, type: 4, typeName: BlockNumberFor<T>}], index: 9, docs: [A new asset spend proposal has been approved.]}, {name: AssetSpendVoided, fields: [{name: index, type: 4, typeName: SpendIndex}], index: 10, docs: [An approved spend was voided.]}, {name: Paid, fields: [{name: index, type: 4, typeName: SpendIndex}, {name: payment_id, type: 11, typeName: <T::Paymaster as Pay>::Id}], index: 11, docs: [A payment happened.]}, {name: PaymentFailed, fields: [{name: index, type: 4, typeName: SpendIndex}, {name: payment_id, type: 11, typeName: <T::Paymaster as Pay>::Id}], index: 12, docs: [A payment failed and can be retried.]}, {name: SpendProcessed, fields: [{name: index, type: 4, typeName: SpendIndex}], index: 13, docs: [A spend was processed and removed from the storage. It might have been successfully, paid or it may have expired.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 59, type: {path: [polkadot_runtime_common, impls, VersionedLocatableAsset], def: {variants: [{name: V3, fields: [{name: location, type: 60, typeName: xcm::v3::MultiLocation}, {name: asset_id, type: 69, typeName: xcm::v3::AssetId}], index: 3}, {name: V4, fields: [{name: location, type: 70, typeName: xcm::v4::Location}, {name: asset_id, type: 83, typeName: xcm::v4::AssetId}], index: 4}]}}}, {id: 60, type: {path: [staging_xcm, v3, multilocation, MultiLocation], def: {fields: [{name: parents, type: 2, typeName: u8}, {name: interior, type: 61, typeName: Junctions}]}}}, {id: 61, type: {path: [xcm, v3, junctions, Junctions], def: {variants: [{name: Here, index: 0}, {name: X1, fields: [{type: 62, typeName: Junction}], index: 1}, {name: X2, fields: [{type: 62, typeName: Junction}, {type: 62, typeName: Junction}], index: 2}, {name: X3, fields: [{type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}], index: 3}, {name: X4, fields: [{type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}], index: 4}, {name: X5, fields: [{type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}], index: 5}, {name: X6, fields: [{type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}], index: 6}, {name: X7, fields: [{type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}], index: 7}, {name: X8, fields: [{type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}, {type: 62, typeName: Junction}], index: 8}]}}}, {id: 62, type: {path: [xcm, v3, junction, Junction], def: {variants: [{name: Parachain, fields: [{type: 63, typeName: u32}], index: 0}, {name: AccountId32, fields: [{name: network, type: 64, typeName: Option<NetworkId>}, {name: id, type: 1, typeName: [u8; 32]}], index: 1}, {name: AccountIndex64, fields: [{name: network, type: 64, typeName: Option<NetworkId>}, {name: index, type: 10, typeName: u64}], index: 2}, {name: AccountKey20, fields: [{name: network, type: 64, typeName: Option<NetworkId>}, {name: key, type: 66, typeName: [u8; 20]}], index: 3}, {name: PalletInstance, fields: [{type: 2, typeName: u8}], index: 4}, {name: GeneralIndex, fields: [{type: 55, typeName: u128}], index: 5}, {name: GeneralKey, fields: [{name: length, type: 2, typeName: u8}, {name: data, type: 1, typeName: [u8; 32]}], index: 6}, {name: OnlyChild, index: 7}, {name: Plurality, fields: [{name: id, type: 67, typeName: BodyId}, {name: part, type: 68, typeName: BodyPart}], index: 8}, {name: GlobalConsensus, fields: [{type: 65, typeName: NetworkId}], index: 9}]}}}, {id: 63, type: {def: {type: 4}}}, {id: 64, type: {path: [Option], params: [{name: T, type: 65}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 65}], index: 1}]}}}, {id: 65, type: {path: [xcm, v3, junction, NetworkId], def: {variants: [{name: ByGenesis, fields: [{type: 1, typeName: [u8; 32]}], index: 0}, {name: ByFork, fields: [{name: block_number, type: 11, typeName: u64}, {name: block_hash, type: 1, typeName: [u8; 32]}], index: 1}, {name: Polkadot, index: 2}, {name: Kusama, index: 3}, {name: Westend, index: 4}, {name: Rococo, index: 5}, {name: Wococo, index: 6}, {name: Ethereum, fields: [{name: chain_id, type: 10, typeName: u64}], index: 7}, {name: BitcoinCore, index: 8}, {name: BitcoinCash, index: 9}, {name: PolkadotBulletin, index: 10}]}}}, {id: 66, type: {def: {len: 20, type: 2}}}, {id: 67, type: {path: [xcm, v3, junction, BodyId], def: {variants: [{name: Unit, index: 0}, {name: Moniker, fields: [{type: 17, typeName: [u8; 4]}], index: 1}, {name: Index, fields: [{type: 63, typeName: u32}], index: 2}, {name: Executive, index: 3}, {name: Technical, index: 4}, {name: Legislative, index: 5}, {name: Judicial, index: 6}, {name: Defense, index: 7}, {name: Administration, index: 8}, {name: Treasury, index: 9}]}}}, {id: 68, type: {path: [xcm, v3, junction, BodyPart], def: {variants: [{name: Voice, index: 0}, {name: Members, fields: [{name: count, type: 63, typeName: u32}], index: 1}, {name: Fraction, fields: [{name: nom, type: 63, typeName: u32}, {name: denom, type: 63, typeName: u32}], index: 2}, {name: AtLeastProportion, fields: [{name: nom, type: 63, typeName: u32}, {name: denom, type: 63, typeName: u32}], index: 3}, {name: MoreThanProportion, fields: [{name: nom, type: 63, typeName: u32}, {name: denom, type: 63, typeName: u32}], index: 4}]}}}, {id: 69, type: {path: [xcm, v3, multiasset, AssetId], def: {variants: [{name: Concrete, fields: [{type: 60, typeName: MultiLocation}], index: 0}, {name: Abstract, fields: [{type: 1, typeName: [u8; 32]}], index: 1}]}}}, {id: 70, type: {path: [staging_xcm, v4, location, Location], def: {fields: [{name: parents, type: 2, typeName: u8}, {name: interior, type: 71, typeName: Junctions}]}}}, {id: 71, type: {path: [staging_xcm, v4, junctions, Junctions], def: {variants: [{name: Here, index: 0}, {name: X1, fields: [{type: 72, typeName: Arc<[Junction; 1]>}], index: 1}, {name: X2, fields: [{type: 76, typeName: Arc<[Junction; 2]>}], index: 2}, {name: X3, fields: [{type: 77, typeName: Arc<[Junction; 3]>}], index: 3}, {name: X4, fields: [{type: 78, typeName: Arc<[Junction; 4]>}], index: 4}, {name: X5, fields: [{type: 79, typeName: Arc<[Junction; 5]>}], index: 5}, {name: X6, fields: [{type: 80, typeName: Arc<[Junction; 6]>}], index: 6}, {name: X7, fields: [{type: 81, typeName: Arc<[Junction; 7]>}], index: 7}, {name: X8, fields: [{type: 82, typeName: Arc<[Junction; 8]>}], index: 8}]}}}, {id: 72, type: {def: {len: 1, type: 73}}}, {id: 73, type: {path: [staging_xcm, v4, junction, Junction], def: {variants: [{name: Parachain, fields: [{type: 63, typeName: u32}], index: 0}, {name: AccountId32, fields: [{name: network, type: 74, typeName: Option<NetworkId>}, {name: id, type: 1, typeName: [u8; 32]}], index: 1}, {name: AccountIndex64, fields: [{name: network, type: 74, typeName: Option<NetworkId>}, {name: index, type: 10, typeName: u64}], index: 2}, {name: AccountKey20, fields: [{name: network, type: 74, typeName: Option<NetworkId>}, {name: key, type: 66, typeName: [u8; 20]}], index: 3}, {name: PalletInstance, fields: [{type: 2, typeName: u8}], index: 4}, {name: GeneralIndex, fields: [{type: 55, typeName: u128}], index: 5}, {name: GeneralKey, fields: [{name: length, type: 2, typeName: u8}, {name: data, type: 1, typeName: [u8; 32]}], index: 6}, {name: OnlyChild, index: 7}, {name: Plurality, fields: [{name: id, type: 67, typeName: BodyId}, {name: part, type: 68, typeName: BodyPart}], index: 8}, {name: GlobalConsensus, fields: [{type: 75, typeName: NetworkId}], index: 9}]}}}, {id: 74, type: {path: [Option], params: [{name: T, type: 75}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 75}], index: 1}]}}}, {id: 75, type: {path: [staging_xcm, v4, junction, NetworkId], def: {variants: [{name: ByGenesis, fields: [{type: 1, typeName: [u8; 32]}], index: 0}, {name: ByFork, fields: [{name: block_number, type: 11, typeName: u64}, {name: block_hash, type: 1, typeName: [u8; 32]}], index: 1}, {name: Polkadot, index: 2}, {name: Kusama, index: 3}, {name: Westend, index: 4}, {name: Rococo, index: 5}, {name: Wococo, index: 6}, {name: Ethereum, fields: [{name: chain_id, type: 10, typeName: u64}], index: 7}, {name: BitcoinCore, index: 8}, {name: BitcoinCash, index: 9}, {name: PolkadotBulletin, index: 10}]}}}, {id: 76, type: {def: {len: 2, type: 73}}}, {id: 77, type: {def: {len: 3, type: 73}}}, {id: 78, type: {def: {len: 4, type: 73}}}, {id: 79, type: {def: {len: 5, type: 73}}}, {id: 80, type: {def: {len: 6, type: 73}}}, {id: 81, type: {def: {len: 7, type: 73}}}, {id: 82, type: {def: {len: 8, type: 73}}}, {id: 83, type: {path: [staging_xcm, v4, asset, AssetId], def: {fields: [{type: 70, typeName: Location}]}}}, {id: 84, type: {path: [xcm, VersionedLocation], def: {variants: [{name: V2, fields: [{type: 85, typeName: v2::MultiLocation}], index: 1}, {name: V3, fields: [{type: 60, typeName: v3::MultiLocation}], index: 3}, {name: V4, fields: [{type: 70, typeName: v4::Location}], index: 4}]}}}, {id: 85, type: {path: [xcm, v2, multilocation, MultiLocation], def: {fields: [{name: parents, type: 2, typeName: u8}, {name: interior, type: 86, typeName: Junctions}]}}}, {id: 86, type: {path: [xcm, v2, multilocation, Junctions], def: {variants: [{name: Here, index: 0}, {name: X1, fields: [{type: 87, typeName: Junction}], index: 1}, {name: X2, fields: [{type: 87, typeName: Junction}, {type: 87, typeName: Junction}], index: 2}, {name: X3, fields: [{type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}], index: 3}, {name: X4, fields: [{type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}], index: 4}, {name: X5, fields: [{type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}], index: 5}, {name: X6, fields: [{type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}], index: 6}, {name: X7, fields: [{type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}], index: 7}, {name: X8, fields: [{type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}, {type: 87, typeName: Junction}], index: 8}]}}}, {id: 87, type: {path: [xcm, v2, junction, Junction], def: {variants: [{name: Parachain, fields: [{type: 63, typeName: u32}], index: 0}, {name: AccountId32, fields: [{name: network, type: 88, typeName: NetworkId}, {name: id, type: 1, typeName: [u8; 32]}], index: 1}, {name: AccountIndex64, fields: [{name: network, type: 88, typeName: NetworkId}, {name: index, type: 10, typeName: u64}], index: 2}, {name: AccountKey20, fields: [{name: network, type: 88, typeName: NetworkId}, {name: key, type: 66, typeName: [u8; 20]}], index: 3}, {name: PalletInstance, fields: [{type: 2, typeName: u8}], index: 4}, {name: GeneralIndex, fields: [{type: 55, typeName: u128}], index: 5}, {name: GeneralKey, fields: [{type: 89, typeName: WeakBoundedVec<u8, ConstU32<32>>}], index: 6}, {name: OnlyChild, index: 7}, {name: Plurality, fields: [{name: id, type: 90, typeName: BodyId}, {name: part, type: 91, typeName: BodyPart}], index: 8}]}}}, {id: 88, type: {path: [xcm, v2, NetworkId], def: {variants: [{name: Any, index: 0}, {name: Named, fields: [{type: 89, typeName: WeakBoundedVec<u8, ConstU32<32>>}], index: 1}, {name: Polkadot, index: 2}, {name: Kusama, index: 3}]}}}, {id: 89, type: {path: [bounded_collections, weak_bounded_vec, WeakBoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 90, type: {path: [xcm, v2, BodyId], def: {variants: [{name: Unit, index: 0}, {name: Named, fields: [{type: 89, typeName: WeakBoundedVec<u8, ConstU32<32>>}], index: 1}, {name: Index, fields: [{type: 63, typeName: u32}], index: 2}, {name: Executive, index: 3}, {name: Technical, index: 4}, {name: Legislative, index: 5}, {name: Judicial, index: 6}, {name: Defense, index: 7}, {name: Administration, index: 8}, {name: Treasury, index: 9}]}}}, {id: 91, type: {path: [xcm, v2, BodyPart], def: {variants: [{name: Voice, index: 0}, {name: Members, fields: [{name: count, type: 63, typeName: u32}], index: 1}, {name: Fraction, fields: [{name: nom, type: 63, typeName: u32}, {name: denom, type: 63, typeName: u32}], index: 2}, {name: AtLeastProportion, fields: [{name: nom, type: 63, typeName: u32}, {name: denom, type: 63, typeName: u32}], index: 3}, {name: MoreThanProportion, fields: [{name: nom, type: 63, typeName: u32}, {name: denom, type: 63, typeName: u32}], index: 4}]}}}, {id: 92, type: {path: [pallet_conviction_voting, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Delegated, fields: [{type: 0, typeName: T::AccountId}, {type: 0, typeName: T::AccountId}], index: 0, docs: [An account has delegated their vote to another account. \[who, target\]]}, {name: Undelegated, fields: [{type: 0, typeName: T::AccountId}], index: 1, docs: [An \[account\] has cancelled a previous delegation operation.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 93, type: {path: [pallet_referenda, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Submitted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: track, type: 94, typeName: TrackIdOf<T, I>, docs: [The track (and by extension proposal dispatch origin) of this referendum.]}, {name: proposal, type: 95, typeName: BoundedCallOf<T, I>, docs: [The proposal for the referendum.]}], index: 0, docs: [A referendum has been submitted.]}, {name: DecisionDepositPlaced, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 1, docs: [The decision deposit has been placed.]}, {name: DecisionDepositRefunded, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 2, docs: [The decision deposit has been refunded.]}, {name: DepositSlashed, fields: [{name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 3, docs: [A deposit has been slashed.]}, {name: DecisionStarted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: track, type: 94, typeName: TrackIdOf<T, I>, docs: [The track (and by extension proposal dispatch origin) of this referendum.]}, {name: proposal, type: 95, typeName: BoundedCallOf<T, I>, docs: [The proposal for the referendum.]}, {name: tally, type: 470, typeName: T::Tally, docs: [The current tally of votes in this referendum.]}], index: 4, docs: [A referendum has moved into the deciding phase.]}, {name: ConfirmStarted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}], index: 5}, {name: ConfirmAborted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}], index: 6}, {name: Confirmed, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 470, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 7, docs: [A referendum has ended its confirmation phase and is ready for approval.]}, {name: Approved, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}], index: 8, docs: [A referendum has been approved and its proposal has been scheduled.]}, {name: Rejected, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 470, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 9, docs: [A proposal has been rejected by referendum.]}, {name: TimedOut, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 470, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 10, docs: [A referendum has been timed out without being decided.]}, {name: Cancelled, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 470, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 11, docs: [A referendum has been cancelled.]}, {name: Killed, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 470, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 12, docs: [A referendum has been killed.]}, {name: SubmissionDepositRefunded, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 13, docs: [The submission deposit has been refunded.]}, {name: MetadataSet, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: hash, type: 12, typeName: T::Hash, docs: [Preimage hash.]}], index: 14, docs: [Metadata for a referendum has been set.]}, {name: MetadataCleared, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: hash, type: 12, typeName: T::Hash, docs: [Preimage hash.]}], index: 15, docs: [Metadata for a referendum has been cleared.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 94, type: {def: {primitive: u16}}}, {id: 95, type: {path: [frame_support, traits, preimages, Bounded], params: [{name: T, type: 96}, {name: H, type: 468}], def: {variants: [{name: Legacy, fields: [{name: hash, type: 12, typeName: H::Output}], index: 0}, {name: Inline, fields: [{type: 469, typeName: BoundedInline}], index: 1}, {name: Lookup, fields: [{name: hash, type: 12, typeName: H::Output}, {name: len, type: 4, typeName: u32}], index: 2}]}}}, {id: 96, type: {path: [staging_kusama_runtime, RuntimeCall], def: {variants: [{name: System, fields: [{type: 97, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<System, Runtime>}], index: 0}, {name: Babe, fields: [{type: 101, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Babe, Runtime>}], index: 1}, {name: Timestamp, fields: [{type: 110, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Timestamp, Runtime>}], index: 2}, {name: Indices, fields: [{type: 111, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Indices, Runtime>}], index: 3}, {name: Balances, fields: [{type: 115, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Balances, Runtime>}], index: 4}, {name: Staking, fields: [{type: 118, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Staking, Runtime>}], index: 6}, {name: Session, fields: [{type: 133, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Session, Runtime>}], index: 8}, {name: Grandpa, fields: [{type: 141, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Grandpa, Runtime>}], index: 10}, {name: Treasury, fields: [{type: 153, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Treasury, Runtime>}], index: 18}, {name: ConvictionVoting, fields: [{type: 155, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ConvictionVoting, Runtime>}], index: 20}, {name: Referenda, fields: [{type: 160, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Referenda, Runtime>}], index: 21}, {name: FellowshipCollective, fields: [{type: 170, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<FellowshipCollective, Runtime>}], index: 22}, {name: FellowshipReferenda, fields: [{type: 171, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<FellowshipReferenda, Runtime>}], index: 23}, {name: Whitelist, fields: [{type: 172, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Whitelist, Runtime>}], index: 44}, {name: Claims, fields: [{type: 173, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Claims, Runtime>}], index: 19}, {name: Utility, fields: [{type: 181, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Utility, Runtime>}], index: 24}, {name: Society, fields: [{type: 183, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Society, Runtime>}], index: 26}, {name: Recovery, fields: [{type: 184, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Recovery, Runtime>}], index: 27}, {name: Vesting, fields: [{type: 185, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Vesting, Runtime>}], index: 28}, {name: Scheduler, fields: [{type: 187, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Scheduler, Runtime>}], index: 29}, {name: Proxy, fields: [{type: 190, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Proxy, Runtime>}], index: 30}, {name: Multisig, fields: [{type: 193, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Multisig, Runtime>}], index: 31}, {name: Preimage, fields: [{type: 196, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Preimage, Runtime>}], index: 32}, {name: Bounties, fields: [{type: 198, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Bounties, Runtime>}], index: 35}, {name: ChildBounties, fields: [{type: 199, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ChildBounties, Runtime>}], index: 40}, {name: ElectionProviderMultiPhase, fields: [{type: 200, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ElectionProviderMultiPhase, Runtime>}], index: 37}, {name: Nis, fields: [{type: 285, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Nis, Runtime>}], index: 38}, {name: NisCounterpartBalances, fields: [{type: 288, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<NisCounterpartBalances, Runtime>}], index: 45}, {name: VoterList, fields: [{type: 289, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<VoterList, Runtime>}], index: 39}, {name: NominationPools, fields: [{type: 290, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<NominationPools, Runtime>}], index: 41}, {name: FastUnstake, fields: [{type: 303, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<FastUnstake, Runtime>}], index: 42}, {name: Configuration, fields: [{type: 304, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Configuration, Runtime>}], index: 51}, {name: ParasShared, fields: [{type: 312, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ParasShared, Runtime>}], index: 52}, {name: ParaInclusion, fields: [{type: 313, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ParaInclusion, Runtime>}], index: 53}, {name: ParaInherent, fields: [{type: 314, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ParaInherent, Runtime>}], index: 54}, {name: Paras, fields: [{type: 350, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Paras, Runtime>}], index: 56}, {name: Initializer, fields: [{type: 352, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Initializer, Runtime>}], index: 57}, {name: Hrmp, fields: [{type: 353, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Hrmp, Runtime>}], index: 60}, {name: ParasDisputes, fields: [{type: 355, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ParasDisputes, Runtime>}], index: 62}, {name: ParasSlashing, fields: [{type: 356, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<ParasSlashing, Runtime>}], index: 63}, {name: OnDemandAssignmentProvider, fields: [{type: 360, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<OnDemandAssignmentProvider, Runtime>}], index: 64}, {name: Registrar, fields: [{type: 361, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Registrar, Runtime>}], index: 70}, {name: Slots, fields: [{type: 362, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Slots, Runtime>}], index: 71}, {name: Auctions, fields: [{type: 363, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Auctions, Runtime>}], index: 72}, {name: Crowdloan, fields: [{type: 365, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Crowdloan, Runtime>}], index: 73}, {name: Coretime, fields: [{type: 371, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Coretime, Runtime>}], index: 74}, {name: XcmPallet, fields: [{type: 376, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<XcmPallet, Runtime>}], index: 99}, {name: MessageQueue, fields: [{type: 454, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<MessageQueue, Runtime>}], index: 100}, {name: AssetRate, fields: [{type: 457, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<AssetRate, Runtime>}], index: 101}, {name: Beefy, fields: [{type: 459, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch
::CallableCallFor<Beefy, Runtime>}], index: 200}]}}}, {id: 97, type: {path: [frame_system, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: remark, fields: [{name: remark, type: 13, typeName: Vec<u8>}], index: 0, docs: [See [`Pallet::remark`].]}, {name: set_heap_pages, fields: [{name: pages, type: 11, typeName: u64}], index: 1, docs: [See [`Pallet::set_heap_pages`].]}, {name: set_code, fields: [{name: code, type: 13, typeName: Vec<u8>}], index: 2, docs: [See [`Pallet::set_code`].]}, {name: set_code_without_checks, fields: [{name: code, type: 13, typeName: Vec<u8>}], index: 3, docs: [See [`Pallet::set_code_without_checks`].]}, {name: set_storage, fields: [{name: items, type: 98, typeName: Vec<KeyValue>}], index: 4, docs: [See [`Pallet::set_storage`].]}, {name: kill_storage, fields: [{name: keys, type: 100, typeName: Vec<Key>}], index: 5, docs: [See [`Pallet::kill_storage`].]}, {name: kill_prefix, fields: [{name: prefix, type: 13, typeName: Key}, {name: subkeys, type: 4, typeName: u32}], index: 6, docs: [See [`Pallet::kill_prefix`].]}, {name: remark_with_event, fields: [{name: remark, type: 13, typeName: Vec<u8>}], index: 7, docs: [See [`Pallet::remark_with_event`].]}, {name: authorize_upgrade, fields: [{name: code_hash, type: 12, typeName: T::Hash}], index: 9, docs: [See [`Pallet::authorize_upgrade`].]}, {name: authorize_upgrade_without_checks, fields: [{name: code_hash, type: 12, typeName: T::Hash}], index: 10, docs: [See [`Pallet::authorize_upgrade_without_checks`].]}, {name: apply_authorized_upgrade, fields: [{name: code, type: 13, typeName: Vec<u8>}], index: 11, docs: [See [`Pallet::apply_authorized_upgrade`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 98, type: {def: {type: 99}}}, {id: 99, type: {def: {fields: [13, 13]}}}, {id: 100, type: {def: {type: 13}}}, {id: 101, type: {path: [pallet_babe, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: report_equivocation, fields: [{name: equivocation_proof, type: 102, typeName: Box<EquivocationProof<HeaderFor<T>>>}, {name: key_owner_proof, type: 106, typeName: T::KeyOwnerProof}], index: 0, docs: [See [`Pallet::report_equivocation`].]}, {name: report_equivocation_unsigned, fields: [{name: equivocation_proof, type: 102, typeName: Box<EquivocationProof<HeaderFor<T>>>}, {name: key_owner_proof, type: 106, typeName: T::KeyOwnerProof}], index: 1, docs: [See [`Pallet::report_equivocation_unsigned`].]}, {name: plan_config_change, fields: [{name: config, type: 107, typeName: NextConfigDescriptor}], index: 2, docs: [See [`Pallet::plan_config_change`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 102, type: {path: [sp_consensus_slots, EquivocationProof], params: [{name: Header, type: 103}, {name: Id, type: 104}], def: {fields: [{name: offender, type: 104, typeName: Id}, {name: slot, type: 105, typeName: Slot}, {name: first_header, type: 103, typeName: Header}, {name: second_header, type: 103, typeName: Header}]}}}, {id: 103, type: {path: [sp_runtime, generic, header, Header], params: [{name: Number, type: 4}, {name: Hash, type: null}], def: {fields: [{name: parent_hash, type: 12, typeName: Hash::Output}, {name: number, type: 63, typeName: Number}, {name: state_root, type: 12, typeName: Hash::Output}, {name: extrinsics_root, type: 12, typeName: Hash::Output}, {name: digest, type: 14, typeName: Digest}]}}}, {id: 104, type: {path: [sp_consensus_babe, app, Public], def: {fields: [{type: 51, typeName: sr25519::Public}]}}}, {id: 105, type: {path: [sp_consensus_slots, Slot], def: {fields: [{type: 11, typeName: u64}]}}}, {id: 106, type: {path: [sp_session, MembershipProof], def: {fields: [{name: session, type: 4, typeName: SessionIndex}, {name: trie_nodes, type: 100, typeName: Vec<Vec<u8>>}, {name: validator_count, type: 4, typeName: ValidatorCount}]}}}, {id: 107, type: {path: [sp_consensus_babe, digests, NextConfigDescriptor], def: {variants: [{name: V1, fields: [{name: c, type: 108, typeName: (u64, u64)}, {name: allowed_slots, type: 109, typeName: AllowedSlots}], index: 1}]}}}, {id: 108, type: {def: {fields: [11, 11]}}}, {id: 109, type: {path: [sp_consensus_babe, AllowedSlots], def: {variants: [{name: PrimarySlots, index: 0}, {name: PrimaryAndSecondaryPlainSlots, index: 1}, {name: PrimaryAndSecondaryVRFSlots, index: 2}]}}}, {id: 110, type: {path: [pallet_timestamp, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: set, fields: [{name: now, type: 10, typeName: T::Moment}], index: 0, docs: [See [`Pallet::set`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 111, type: {path: [pallet_indices, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: claim, fields: [{name: index, type: 4, typeName: T::AccountIndex}], index: 0, docs: [See [`Pallet::claim`].]}, {name: transfer, fields: [{name: new, type: 112, typeName: AccountIdLookupOf<T>}, {name: index, type: 4, typeName: T::AccountIndex}], index: 1, docs: [See [`Pallet::transfer`].]}, {name: free, fields: [{name: index, type: 4, typeName: T::AccountIndex}], index: 2, docs: [See [`Pallet::free`].]}, {name: force_transfer, fields: [{name: new, type: 112, typeName: AccountIdLookupOf<T>}, {name: index, type: 4, typeName: T::AccountIndex}, {name: freeze, type: 30, typeName: bool}], index: 3, docs: [See [`Pallet::force_transfer`].]}, {name: freeze, fields: [{name: index, type: 4, typeName: T::AccountIndex}], index: 4, docs: [See [`Pallet::freeze`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 112, type: {path: [sp_runtime, multiaddress, MultiAddress], params: [{name: AccountId, type: 0}, {name: AccountIndex, type: 113}], def: {variants: [{name: Id, fields: [{type: 0, typeName: AccountId}], index: 0}, {name: Index, fields: [{type: 114, typeName: AccountIndex}], index: 1}, {name: Raw, fields: [{type: 13, typeName: Vec<u8>}], index: 2}, {name: Address32, fields: [{type: 1, typeName: [u8; 32]}], index: 3}, {name: Address20, fields: [{type: 66, typeName: [u8; 20]}], index: 4}]}}}, {id: 113, type: {def: {fields: []}}}, {id: 114, type: {def: {type: 113}}}, {id: 115, type: {path: [pallet_balances, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: transfer_allow_death, fields: [{name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: value, type: 55, typeName: T::Balance}], index: 0, docs: [See [`Pallet::transfer_allow_death`].]}, {name: force_transfer, fields: [{name: source, type: 112, typeName: AccountIdLookupOf<T>}, {name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: value, type: 55, typeName: T::Balance}], index: 2, docs: [See [`Pallet::force_transfer`].]}, {name: transfer_keep_alive, fields: [{name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: value, type: 55, typeName: T::Balance}], index: 3, docs: [See [`Pallet::transfer_keep_alive`].]}, {name: transfer_all, fields: [{name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: keep_alive, type: 30, typeName: bool}], index: 4, docs: [See [`Pallet::transfer_all`].]}, {name: force_unreserve, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: amount, type: 6, typeName: T::Balance}], index: 5, docs: [See [`Pallet::force_unreserve`].]}, {name: upgrade_accounts, fields: [{name: who, type: 116, typeName: Vec<T::AccountId>}], index: 6, docs: [See [`Pallet::upgrade_accounts`].]}, {name: force_set_balance, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: new_free, type: 55, typeName: T::Balance}], index: 8, docs: [See [`Pallet::force_set_balance`].]}, {name: force_adjust_total_issuance, fields: [{name: direction, type: 117, typeName: AdjustmentDirection}, {name: delta, type: 55, typeName: T::Balance}], index: 9, docs: [See [`Pallet::force_adjust_total_issuance`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 116, type: {def: {type: 0}}}, {id: 117, type: {path: [pallet_balances, types, AdjustmentDirection], def: {variants: [{name: Increase, index: 0}, {name: Decrease, index: 1}]}}}, {id: 118, type: {path: [pallet_staking, pallet, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: bond, fields: [{name: value, type: 55, typeName: BalanceOf<T>}, {name: payee, type: 36, typeName: RewardDestination<T::AccountId>}], index: 0, docs: [See [`Pallet::bond`].]}, {name: bond_extra, fields: [{name: max_additional, type: 55, typeName: BalanceOf<T>}], index: 1, docs: [See [`Pallet::bond_extra`].]}, {name: unbond, fields: [{name: value, type: 55, typeName: BalanceOf<T>}], index: 2, docs: [See [`Pallet::unbond`].]}, {name: withdraw_unbonded, fields: [{name: num_slashing_spans, type: 4, typeName: u32}], index: 3, docs: [See [`Pallet::withdraw_unbonded`].]}, {name: validate, fields: [{name: prefs, type: 38, typeName: ValidatorPrefs}], index: 4, docs: [See [`Pallet::validate`].]}, {name: nominate, fields: [{name: targets, type: 119, typeName: Vec<AccountIdLookupOf<T>>}], index: 5, docs: [See [`Pallet::nominate`].]}, {name: chill, index: 6, docs: [See [`Pallet::chill`].]}, {name: set_payee, fields: [{name: payee, type: 36, typeName: RewardDestination<T::AccountId>}], index: 7, docs: [See [`Pallet::set_payee`].]}, {name: set_controller, index: 8, docs: [See [`Pallet::set_controller`].]}, {name: set_validator_count, fields: [{name: new, type: 63, typeName: u32}], index: 9, docs: [See [`Pallet::set_validator_count`].]}, {name: increase_validator_count, fields: [{name: additional, type: 63, typeName: u32}], index: 10, docs: [See [`Pallet::increase_validator_count`].]}, {name: scale_validator_count, fields: [{name: factor, type: 120, typeName: Percent}], index: 11, docs: [See [`Pallet::scale_validator_count`].]}, {name: force_no_eras, index: 12, docs: [See [`Pallet::force_no_eras`].]}, {name: force_new_era, index: 13, docs: [See [`Pallet::force_new_era`].]}, {name: set_invulnerables, fields: [{name: invulnerables, type: 116, typeName: Vec<T::AccountId>}], index: 14, docs: [See [`Pallet::set_invulnerables`].]}, {name: force_unstake, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: num_slashing_spans, type: 4, typeName: u32}], index: 15, docs: [See [`Pallet::force_unstake`].]}, {name: force_new_era_always, index: 16, docs: [See [`Pallet::force_new_era_always`].]}, {name: cancel_deferred_slash, fields: [{name: era, type: 4, typeName: EraIndex}, {name: slash_indices, type: 121, typeName: Vec<u32>}], index: 17, docs: [See [`Pallet::cancel_deferred_slash`].]}, {name: payout_stakers, fields: [{name: validator_stash, type: 0, typeName: T::AccountId}, {name: era, type: 4, typeName: EraIndex}], index: 18, docs: [See [`Pallet::payout_stakers`].]}, {name: rebond, fields: [{name: value, type: 55, typeName: BalanceOf<T>}], index: 19, docs: [See [`Pallet::rebond`].]}, {name: reap_stash, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: num_slashing_spans, type: 4, typeName: u32}], index: 20, docs: [See [`Pallet::reap_stash`].]}, {name: kick, fields: [{name: who, type: 119, typeName: Vec<AccountIdLookupOf<T>>}], index: 21, docs: [See [`Pallet::kick`].]}, {name: set_staking_configs, fields: [{name: min_nominator_bond, type: 122, typeName: ConfigOp<BalanceOf<T>>}, {name: min_validator_bond, type: 122, typeName: ConfigOp<BalanceOf<T>>}, {name: max_nominator_count, type: 123, typeName: ConfigOp<u32>}, {name: max_validator_count, type: 123, typeName: ConfigOp<u32>}, {name: chill_threshold, type: 124, typeName: ConfigOp<Percent>}, {name: min_commission, type: 125, typeName: ConfigOp<Perbill>}], index: 22, docs: [See [`Pallet::set_staking_configs`].]}, {name: chill_other, fields: [{name: stash, type: 0, typeName: T::AccountId}], index: 23, docs: [See [`Pallet::chill_other`].]}, {name: force_apply_min_commission, fields: [{name: validator_stash, type: 0, typeName: T::AccountId}], index: 24, docs: [See [`Pallet::force_apply_min_commission`].]}, {name: set_min_commission, fields: [{name: new, type: 37, typeName: Perbill}], index: 25, docs: [See [`Pallet::set_min_commission`].]}, {name: payout_stakers_by_page, fields: [{name: validator_stash, type: 0, typeName: T::AccountId}, {name: era, type: 4, typeName: EraIndex}, {name: page, type: 4, typeName: Page}], index: 26, docs: [See [`Pallet::payout_stakers_by_page`].]}, {name: update_payee, fields: [{name: controller, type: 0, typeName: T::AccountId}], index: 27, docs: [See [`Pallet::update_payee`].]}, {name: deprecate_controller_batch, fields: [{name: controllers, type: 126, typeName: BoundedVec<T::AccountId, T::MaxControllersInDeprecationBatch>}], index: 28, docs: [See [`Pallet::deprecate_controller_batch`].]}, {name: restore_ledger, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: maybe_controller, type: 127, typeName: Option<T::AccountId>}, {name: maybe_total, type: 128, typeName: Option<BalanceOf<T>>}, {name: maybe_unlocking, type: 129, typeName: Option<BoundedVec<UnlockChunk<BalanceOf<T>>, T::
MaxUnlockingChunks>>}], index: 29, docs: [See [`Pallet::restore_ledger`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 119, type: {def: {type: 112}}}, {id: 120, type: {path: [sp_arithmetic, per_things, Percent], def: {fields: [{type: 2, typeName: u8}]}}}, {id: 121, type: {def: {type: 4}}}, {id: 122, type: {path: [pallet_staking, pallet, pallet, ConfigOp], params: [{name: T, type: 6}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 6, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 123, type: {path: [pallet_staking, pallet, pallet, ConfigOp], params: [{name: T, type: 4}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 4, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 124, type: {path: [pallet_staking, pallet, pallet, ConfigOp], params: [{name: T, type: 120}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 120, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 125, type: {path: [pallet_staking, pallet, pallet, ConfigOp], params: [{name: T, type: 37}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 37, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 126, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 0}, {name: S, type: null}], def: {fields: [{type: 116, typeName: Vec<T>}]}}}, {id: 127, type: {path: [Option], params: [{name: T, type: 0}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 0}], index: 1}]}}}, {id: 128, type: {path: [Option], params: [{name: T, type: 6}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 6}], index: 1}]}}}, {id: 129, type: {path: [Option], params: [{name: T, type: 130}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 130}], index: 1}]}}}, {id: 130, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 131}, {name: S, type: null}], def: {fields: [{type: 132, typeName: Vec<T>}]}}}, {id: 131, type: {path: [pallet_staking, UnlockChunk], params: [{name: Balance, type: 6}], def: {fields: [{name: value, type: 55, typeName: Balance}, {name: era, type: 63, typeName: EraIndex}]}}}, {id: 132, type: {def: {type: 131}}}, {id: 133, type: {path: [pallet_session, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: set_keys, fields: [{name: keys, type: 134, typeName: T::Keys}, {name: proof, type: 13, typeName: Vec<u8>}], index: 0, docs: [See [`Pallet::set_keys`].]}, {name: purge_keys, index: 1, docs: [See [`Pallet::purge_keys`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 134, type: {path: [staging_kusama_runtime, SessionKeys], def: {fields: [{name: grandpa, type: 47, typeName: <Grandpa as $crate::BoundToRuntimeAppPublic>::Public}, {name: babe, type: 104, typeName: <Babe as $crate::BoundToRuntimeAppPublic>::Public}, {name: para_validator, type: 135, typeName: <Initializer as $crate::BoundToRuntimeAppPublic>::Public}, {name: para_assignment, type: 136, typeName: <ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public}, {name: authority_discovery, type: 137, typeName: <AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public}, {name: beefy, type: 138, typeName: <Beefy as $crate::BoundToRuntimeAppPublic>::Public}]}}}, {id: 135, type: {path: [polkadot_primitives, v6, validator_app, Public], def: {fields: [{type: 51, typeName: sr25519::Public}]}}}, {id: 136, type: {path: [polkadot_primitives, v6, assignment_app, Public], def: {fields: [{type: 51, typeName: sr25519::Public}]}}}, {id: 137, type: {path: [sp_authority_discovery, app, Public], def: {fields: [{type: 51, typeName: sr25519::Public}]}}}, {id: 138, type: {path: [sp_consensus_beefy, ecdsa_crypto, Public], def: {fields: [{type: 139, typeName: ecdsa::Public}]}}}, {id: 139, type: {path: [sp_core, ecdsa, Public], def: {fields: [{type: 140, typeName: [u8; PUBLIC_KEY_SERIALIZED_SIZE]}]}}}, {id: 140, type: {def: {len: 33, type: 2}}}, {id: 141, type: {path: [pallet_grandpa, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: report_equivocation, fields: [{name: equivocation_proof, type: 142, typeName: Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>}, {name: key_owner_proof, type: 106, typeName: T::KeyOwnerProof}], index: 0, docs: [See [`Pallet::report_equivocation`].]}, {name: report_equivocation_unsigned, fields: [{name: equivocation_proof, type: 142, typeName: Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>}, {name: key_owner_proof, type: 106, typeName: T::KeyOwnerProof}], index: 1, docs: [See [`Pallet::report_equivocation_unsigned`].]}, {name: note_stalled, fields: [{name: delay, type: 4, typeName: BlockNumberFor<T>}, {name: best_finalized_block_number, type: 4, typeName: BlockNumberFor<T>}], index: 2, docs: [See [`Pallet::note_stalled`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 142, type: {path: [sp_consensus_grandpa, EquivocationProof], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: set_id, type: 11, typeName: SetId}, {name: equivocation, type: 143, typeName: Equivocation<H, N>}]}}}, {id: 143, type: {path: [sp_consensus_grandpa, Equivocation], params: [{name: H, type: 12}, {name: N, type: 4}], def: {variants: [{name: Prevote, fields: [{type: 144, typeName: grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,
AuthoritySignature>}], index: 0}, {name: Precommit, fields: [{type: 150, typeName: grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,
AuthoritySignature>}], index: 1}]}}}, {id: 144, type: {path: [finality_grandpa, Equivocation], params: [{name: Id, type: 47}, {name: V, type: 145}, {name: S, type: 146}], def: {fields: [{name: round_number, type: 11, typeName: u64}, {name: identity, type: 47, typeName: Id}, {name: first, type: 149, typeName: (V, S)}, {name: second, type: 149, typeName: (V, S)}]}}}, {id: 145, type: {path: [finality_grandpa, Prevote], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: target_hash, type: 12, typeName: H}, {name: target_number, type: 4, typeName: N}]}}}, {id: 146, type: {path: [sp_consensus_grandpa, app, Signature], def: {fields: [{type: 147, typeName: ed25519::Signature}]}}}, {id: 147, type: {path: [sp_core, ed25519, Signature], def: {fields: [{type: 148, typeName: [u8; 64]}]}}}, {id: 148, type: {def: {len: 64, type: 2}}}, {id: 149, type: {def: {fields: [145, 146]}}}, {id: 150, type: {path: [finality_grandpa, Equivocation], params: [{name: Id, type: 47}, {name: V, type: 151}, {name: S, type: 146}], def: {fields: [{name: round_number, type: 11, typeName: u64}, {name: identity, type: 47, typeName: Id}, {name: first, type: 152, typeName: (V, S)}, {name: second, type: 152, typeName: (V, S)}]}}}, {id: 151, type: {path: [finality_grandpa, Precommit], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: target_hash, type: 12, typeName: H}, {name: target_number, type: 4, typeName: N}]}}}, {id: 152, type: {def: {fields: [151, 146]}}}, {id: 153, type: {path: [pallet_treasury, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: propose_spend, fields: [{name: value, type: 55, typeName: BalanceOf<T, I>}, {name: beneficiary, type: 112, typeName: AccountIdLookupOf<T>}], index: 0, docs: [See [`Pallet::propose_spend`].]}, {name: reject_proposal, fields: [{name: proposal_id, type: 63, typeName: ProposalIndex}], index: 1, docs: [See [`Pallet::reject_proposal`].]}, {name: approve_proposal, fields: [{name: proposal_id, type: 63, typeName: ProposalIndex}], index: 2, docs: [See [`Pallet::approve_proposal`].]}, {name: spend_local, fields: [{name: amount, type: 55, typeName: BalanceOf<T, I>}, {name: beneficiary, type: 112, typeName: AccountIdLookupOf<T>}], index: 3, docs: [See [`Pallet::spend_local`].]}, {name: remove_approval, fields: [{name: proposal_id, type: 63, typeName: ProposalIndex}], index: 4, docs: [See [`Pallet::remove_approval`].]}, {name: spend, fields: [{name: asset_kind, type: 59, typeName: Box<T::AssetKind>}, {name: amount, type: 55, typeName: AssetBalanceOf<T, I>}, {name: beneficiary, type: 84, typeName: Box<BeneficiaryLookupOf<T, I>>}, {name: valid_from, type: 154, typeName: Option<BlockNumberFor<T>>}], index: 5, docs: [See [`Pallet::spend`].]}, {name: payout, fields: [{name: index, type: 4, typeName: SpendIndex}], index: 6, docs: [See [`Pallet::payout`].]}, {name: check_status, fields: [{name: index, type: 4, typeName: SpendIndex}], index: 7, docs: [See [`Pallet::check_status`].]}, {name: void_spend, fields: [{name: index, type: 4, typeName: SpendIndex}], index: 8, docs: [See [`Pallet::void_spend`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 154, type: {path: [Option], params: [{name: T, type: 4}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 4}], index: 1}]}}}, {id: 155, type: {path: [pallet_conviction_voting, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: vote, fields: [{name: poll_index, type: 63, typeName: PollIndexOf<T, I>}, {name: vote, type: 156, typeName: AccountVote<BalanceOf<T, I>>}], index: 0, docs: [See [`Pallet::vote`].]}, {name: delegate, fields: [{name: class, type: 94, typeName: ClassOf<T, I>}, {name: to, type: 112, typeName: AccountIdLookupOf<T>}, {name: conviction, type: 158, typeName: Conviction}, {name: balance, type: 6, typeName: BalanceOf<T, I>}], index: 1, docs: [See [`Pallet::delegate`].]}, {name: undelegate, fields: [{name: class, type: 94, typeName: ClassOf<T, I>}], index: 2, docs: [See [`Pallet::undelegate`].]}, {name: unlock, fields: [{name: class, type: 94, typeName: ClassOf<T, I>}, {name: target, type: 112, typeName: AccountIdLookupOf<T>}], index: 3, docs: [See [`Pallet::unlock`].]}, {name: remove_vote, fields: [{name: class, type: 159, typeName: Option<ClassOf<T, I>>}, {name: index, type: 4, typeName: PollIndexOf<T, I>}], index: 4, docs: [See [`Pallet::remove_vote`].]}, {name: remove_other_vote, fields: [{name: target, type: 112, typeName: AccountIdLookupOf<T>}, {name: class, type: 94, typeName: ClassOf<T, I>}, {name: index, type: 4, typeName: PollIndexOf<T, I>}], index: 5, docs: [See [`Pallet::remove_other_vote`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 156, type: {path: [pallet_conviction_voting, vote, AccountVote], params: [{name: Balance, type: 6}], def: {variants: [{name: Standard, fields: [{name: vote, type: 157, typeName: Vote}, {name: balance, type: 6, typeName: Balance}], index: 0}, {name: Split, fields: [{name: aye, type: 6, typeName: Balance}, {name: nay, type: 6, typeName: Balance}], index: 1}, {name: SplitAbstain, fields: [{name: aye, type: 6, typeName: Balance}, {name: nay, type: 6, typeName: Balance}, {name: abstain, type: 6, typeName: Balance}], index: 2}]}}}, {id: 157, type: {path: [pallet_conviction_voting, vote, Vote], def: {fields: [{type: 2}]}}}, {id: 158, type: {path: [pallet_conviction_voting, conviction, Conviction], def: {variants: [{name: None, index: 0}, {name: Locked1x, index: 1}, {name: Locked2x, index: 2}, {name: Locked3x, index: 3}, {name: Locked4x, index: 4}, {name: Locked5x, index: 5}, {name: Locked6x, index: 6}]}}}, {id: 159, type: {path: [Option], params: [{name: T, type: 94}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 94}], index: 1}]}}}, {id: 160, type: {path: [pallet_referenda, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: submit, fields: [{name: proposal_origin, type: 161, typeName: Box<PalletsOriginOf<T>>}, {name: proposal, type: 95, typeName: BoundedCallOf<T, I>}, {name: enactment_moment, type: 168, typeName: DispatchTime<BlockNumberFor<T>>}], index: 0, docs: [See [`Pallet::submit`].]}, {name: place_decision_deposit, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 1, docs: [See [`Pallet::place_decision_deposit`].]}, {name: refund_decision_deposit, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 2, docs: [See [`Pallet::refund_decision_deposit`].]}, {name: cancel, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 3, docs: [See [`Pallet::cancel`].]}, {name: kill, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 4, docs: [See [`Pallet::kill`].]}, {name: nudge_referendum, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 5, docs: [See [`Pallet::nudge_referendum`].]}, {name: one_fewer_deciding, fields: [{name: track, type: 94, typeName: TrackIdOf<T, I>}], index: 6, docs: [See [`Pallet::one_fewer_deciding`].]}, {name: refund_submission_deposit, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 7, docs: [See [`Pallet::refund_submission_deposit`].]}, {name: set_metadata, fields: [{name: index, type: 4, typeName: ReferendumIndex}, {name: maybe_hash, type: 169, typeName: Option<T::Hash>}], index: 8, docs: [See [`Pallet::set_metadata`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 161, type: {path: [staging_kusama_runtime, OriginCaller], def: {variants: [{name: system, fields: [{type: 162, typeName: frame_system::Origin<Runtime>}], index: 0}, {name: Origins, fields: [{type: 163, typeName: pallet_custom_origins::Origin}], index: 43}, {name: ParachainsOrigin, fields: [{type: 164, typeName: parachains_origin::Origin}], index: 50}, {name: XcmPallet, fields: [{type: 166, typeName: pallet_xcm::Origin}], index: 99}, {name: Void, fields: [{type: 167, typeName: self::sp_api_hidden_includes_construct_runtime::hidden_include::
__private::Void}], index: 4}]}}}, {id: 162, type: {path: [frame_support, dispatch, RawOrigin], params: [{name: AccountId, type: 0}], def: {variants: [{name: Root, index: 0}, {name: Signed, fields: [{type: 0, typeName: AccountId}], index: 1}, {name: None, index: 2}]}}}, {id: 163, type: {path: [staging_kusama_runtime, governance, origins, pallet_custom_origins, Origin], def: {variants: [{name: StakingAdmin, index: 0}, {name: Treasurer, index: 1}, {name: FellowshipAdmin, index: 2}, {name: GeneralAdmin, index: 3}, {name: AuctionAdmin, index: 4}, {name: LeaseAdmin, index: 5}, {name: ReferendumCanceller, index: 6}, {name: ReferendumKiller, index: 7}, {name: SmallTipper, index: 8}, {name: BigTipper, index: 9}, {name: SmallSpender, index: 10}, {name: MediumSpender, index: 11}, {name: BigSpender, index: 12}, {name: WhitelistedCaller, index: 13}, {name: FellowshipInitiates, index: 14}, {name: Fellows, index: 15}, {name: FellowshipExperts, index: 16}, {name: FellowshipMasters, index: 17}, {name: Fellowship1Dan, index: 18}, {name: Fellowship2Dan, index: 19}, {name: Fellowship3Dan, index: 20}, {name: Fellowship4Dan, index: 21}, {name: Fellowship5Dan, index: 22}, {name: Fellowship6Dan, index: 23}, {name: Fellowship7Dan, index: 24}, {name: Fellowship8Dan, index: 25}, {name: Fellowship9Dan, index: 26}, {name: WishForChange, index: 27}]}}}, {id: 164, type: {path: [polkadot_runtime_parachains, origin, pallet, Origin], def: {variants: [{name: Parachain, fields: [{type: 165, typeName: ParaId}], index: 0}]}}}, {id: 165, type: {path: [polkadot_parachain_primitives, primitives, Id], def: {fields: [{type: 4, typeName: u32}]}}}, {id: 166, type: {path: [pallet_xcm, pallet, Origin], def: {variants: [{name: Xcm, fields: [{type: 70, typeName: Location}], index: 0}, {name: Response, fields: [{type: 70, typeName: Location}], index: 1}]}}}, {id: 167, type: {path: [sp_core, Void], def: {}}}, {id: 168, type: {path: [frame_support, traits, schedule, DispatchTime], params: [{name: BlockNumber, type: 4}], def: {variants: [{name: At, fields: [{type: 4, typeName: BlockNumber}], index: 0}, {name: After, fields: [{type: 4, typeName: BlockNumber}], index: 1}]}}}, {id: 169, type: {path: [Option], params: [{name: T, type: 12}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 12}], index: 1}]}}}, {id: 170, type: {path: [pallet_ranked_collective, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: add_member, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}], index: 0, docs: [See [`Pallet::add_member`].]}, {name: promote_member, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}], index: 1, docs: [See [`Pallet::promote_member`].]}, {name: demote_member, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}], index: 2, docs: [See [`Pallet::demote_member`].]}, {name: remove_member, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: min_rank, type: 94, typeName: Rank}], index: 3, docs: [See [`Pallet::remove_member`].]}, {name: vote, fields: [{name: poll, type: 4, typeName: PollIndexOf<T, I>}, {name: aye, type: 30, typeName: bool}], index: 4, docs: [See [`Pallet::vote`].]}, {name: cleanup_poll, fields: [{name: poll_index, type: 4, typeName: PollIndexOf<T, I>}, {name: max, type: 4, typeName: u32}], index: 5, docs: [See [`Pallet::cleanup_poll`].]}, {name: exchange_member, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: new_who, type: 112, typeName: AccountIdLookupOf<T>}], index: 6, docs: [See [`Pallet::exchange_member`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 171, type: {path: [pallet_referenda, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: submit, fields: [{name: proposal_origin, type: 161, typeName: Box<PalletsOriginOf<T>>}, {name: proposal, type: 95, typeName: BoundedCallOf<T, I>}, {name: enactment_moment, type: 168, typeName: DispatchTime<BlockNumberFor<T>>}], index: 0, docs: [See [`Pallet::submit`].]}, {name: place_decision_deposit, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 1, docs: [See [`Pallet::place_decision_deposit`].]}, {name: refund_decision_deposit, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 2, docs: [See [`Pallet::refund_decision_deposit`].]}, {name: cancel, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 3, docs: [See [`Pallet::cancel`].]}, {name: kill, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 4, docs: [See [`Pallet::kill`].]}, {name: nudge_referendum, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 5, docs: [See [`Pallet::nudge_referendum`].]}, {name: one_fewer_deciding, fields: [{name: track, type: 94, typeName: TrackIdOf<T, I>}], index: 6, docs: [See [`Pallet::one_fewer_deciding`].]}, {name: refund_submission_deposit, fields: [{name: index, type: 4, typeName: ReferendumIndex}], index: 7, docs: [See [`Pallet::refund_submission_deposit`].]}, {name: set_metadata, fields: [{name: index, type: 4, typeName: ReferendumIndex}, {name: maybe_hash, type: 169, typeName: Option<T::Hash>}], index: 8, docs: [See [`Pallet::set_metadata`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 172, type: {path: [pallet_whitelist, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: whitelist_call, fields: [{name: call_hash, type: 12, typeName: T::Hash}], index: 0, docs: [See [`Pallet::whitelist_call`].]}, {name: remove_whitelisted_call, fields: [{name: call_hash, type: 12, typeName: T::Hash}], index: 1, docs: [See [`Pallet::remove_whitelisted_call`].]}, {name: dispatch_whitelisted_call, fields: [{name: call_hash, type: 12, typeName: T::Hash}, {name: call_encoded_len, type: 4, typeName: u32}, {name: call_weight_witness, type: 9, typeName: Weight}], index: 2, docs: [See [`Pallet::dispatch_whitelisted_call`].]}, {name: dispatch_whitelisted_call_with_preimage, fields: [{name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 3, docs: [See [`Pallet::dispatch_whitelisted_call_with_preimage`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 173, type: {path: [polkadot_runtime_common, claims, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: claim, fields: [{name: dest, type: 0, typeName: T::AccountId}, {name: ethereum_signature, type: 174, typeName: EcdsaSignature}], index: 0, docs: [See [`Pallet::claim`].]}, {name: mint_claim, fields: [{name: who, type: 176, typeName: EthereumAddress}, {name: value, type: 6, typeName: BalanceOf<T>}, {name: vesting_schedule, type: 177, typeName: Option<(BalanceOf<T>, BalanceOf<T>, BlockNumberFor<T>)>}, {name: statement, type: 179, typeName: Option<StatementKind>}], index: 1, docs: [See [`Pallet::mint_claim`].]}, {name: claim_attest, fields: [{name: dest, type: 0, typeName: T::AccountId}, {name: ethereum_signature, type: 174, typeName: EcdsaSignature}, {name: statement, type: 13, typeName: Vec<u8>}], index: 2, docs: [See [`Pallet::claim_attest`].]}, {name: attest, fields: [{name: statement, type: 13, typeName: Vec<u8>}], index: 3, docs: [See [`Pallet::attest`].]}, {name: move_claim, fields: [{name: old, type: 176, typeName: EthereumAddress}, {name: new, type: 176, typeName: EthereumAddress}, {name: maybe_preclaim, type: 127, typeName: Option<T::AccountId>}], index: 4, docs: [See [`Pallet::move_claim`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 174, type: {path: [polkadot_runtime_common, claims, EcdsaSignature], def: {fields: [{type: 175, typeName: [u8; 65]}]}}}, {id: 175, type: {def: {len: 65, type: 2}}}, {id: 176, type: {path: [polkadot_runtime_common, claims, EthereumAddress], def: {fields: [{type: 66, typeName: [u8; 20]}]}}}, {id: 177, type: {path: [Option], params: [{name: T, type: 178}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 178}], index: 1}]}}}, {id: 178, type: {def: {fields: [6, 6, 4]}}}, {id: 179, type: {path: [Option], params: [{name: T, type: 180}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 180}], index: 1}]}}}, {id: 180, type: {path: [polkadot_runtime_common, claims, StatementKind], def: {variants: [{name: Regular, index: 0}, {name: Saft, index: 1}]}}}, {id: 181, type: {path: [pallet_utility, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: batch, fields: [{name: calls, type: 182, typeName: Vec<<T as Config>::RuntimeCall>}], index: 0, docs: [See [`Pallet::batch`].]}, {name: as_derivative, fields: [{name: index, type: 94, typeName: u16}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 1, docs: [See [`Pallet::as_derivative`].]}, {name: batch_all, fields: [{name: calls, type: 182, typeName: Vec<<T as Config>::RuntimeCall>}], index: 2, docs: [See [`Pallet::batch_all`].]}, {name: dispatch_as, fields: [{name: as_origin, type: 161, typeName: Box<T::PalletsOrigin>}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 3, docs: [See [`Pallet::dispatch_as`].]}, {name: force_batch, fields: [{name: calls, type: 182, typeName: Vec<<T as Config>::RuntimeCall>}], index: 4, docs: [See [`Pallet::force_batch`].]}, {name: with_weight, fields: [{name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}, {name: weight, type: 9, typeName: Weight}], index: 5, docs: [See [`Pallet::with_weight`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 182, type: {def: {type: 96}}}, {id: 183, type: {path: [pallet_society, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: bid, fields: [{name: value, type: 6, typeName: BalanceOf<T, I>}], index: 0, docs: [See [`Pallet::bid`].]}, {name: unbid, index: 1, docs: [See [`Pallet::unbid`].]}, {name: vouch, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: value, type: 6, typeName: BalanceOf<T, I>}, {name: tip, type: 6, typeName: BalanceOf<T, I>}], index: 2, docs: [See [`Pallet::vouch`].]}, {name: unvouch, index: 3, docs: [See [`Pallet::unvouch`].]}, {name: vote, fields: [{name: candidate, type: 112, typeName: AccountIdLookupOf<T>}, {name: approve, type: 30, typeName: bool}], index: 4, docs: [See [`Pallet::vote`].]}, {name: defender_vote, fields: [{name: approve, type: 30, typeName: bool}], index: 5, docs: [See [`Pallet::defender_vote`].]}, {name: payout, index: 6, docs: [See [`Pallet::payout`].]}, {name: waive_repay, fields: [{name: amount, type: 6, typeName: BalanceOf<T, I>}], index: 7, docs: [See [`Pallet::waive_repay`].]}, {name: found_society, fields: [{name: founder, type: 112, typeName: AccountIdLookupOf<T>}, {name: max_members, type: 4, typeName: u32}, {name: max_intake, type: 4, typeName: u32}, {name: max_strikes, type: 4, typeName: u32}, {name: candidate_deposit, type: 6, typeName: BalanceOf<T, I>}, {name: rules, type: 13, typeName: Vec<u8>}], index: 8, docs: [See [`Pallet::found_society`].]}, {name: dissolve, index: 9, docs: [See [`Pallet::dissolve`].]}, {name: judge_suspended_member, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: forgive, type: 30, typeName: bool}], index: 10, docs: [See [`Pallet::judge_suspended_member`].]}, {name: set_parameters, fields: [{name: max_members, type: 4, typeName: u32}, {name: max_intake, type: 4, typeName: u32}, {name: max_strikes, type: 4, typeName: u32}, {name: candidate_deposit, type: 6, typeName: BalanceOf<T, I>}], index: 11, docs: [See [`Pallet::set_parameters`].]}, {name: punish_skeptic, index: 12, docs: [See [`Pallet::punish_skeptic`].]}, {name: claim_membership, index: 13, docs: [See [`Pallet::claim_membership`].]}, {name: bestow_membership, fields: [{name: candidate, type: 0, typeName: T::AccountId}], index: 14, docs: [See [`Pallet::bestow_membership`].]}, {name: kick_candidate, fields: [{name: candidate, type: 0, typeName: T::AccountId}], index: 15, docs: [See [`Pallet::kick_candidate`].]}, {name: resign_candidacy, index: 16, docs: [See [`Pallet::resign_candidacy`].]}, {name: drop_candidate, fields: [{name: candidate, type: 0, typeName: T::AccountId}], index: 17, docs: [See [`Pallet::drop_candidate`].]}, {name: cleanup_candidacy, fields: [{name: candidate, type: 0, typeName: T::AccountId}, {name: max, type: 4, typeName: u32}], index: 18, docs: [See [`Pallet::cleanup_candidacy`].]}, {name: cleanup_challenge, fields: [{name: challenge_round, type: 4, typeName: RoundIndex}, {name: max, type: 4, typeName: u32}], index: 19, docs: [See [`Pallet::cleanup_challenge`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 184, type: {path: [pallet_recovery, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: as_recovered, fields: [{name: account, type: 112, typeName: AccountIdLookupOf<T>}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 0, docs: [See [`Pallet::as_recovered`].]}, {name: set_recovered, fields: [{name: lost, type: 112, typeName: AccountIdLookupOf<T>}, {name: rescuer, type: 112, typeName: AccountIdLookupOf<T>}], index: 1, docs: [See [`Pallet::set_recovered`].]}, {name: create_recovery, fields: [{name: friends, type: 116, typeName: Vec<T::AccountId>}, {name: threshold, type: 94, typeName: u16}, {name: delay_period, type: 4, typeName: BlockNumberFor<T>}], index: 2, docs: [See [`Pallet::create_recovery`].]}, {name: initiate_recovery, fields: [{name: account, type: 112, typeName: AccountIdLookupOf<T>}], index: 3, docs: [See [`Pallet::initiate_recovery`].]}, {name: vouch_recovery, fields: [{name: lost, type: 112, typeName: AccountIdLookupOf<T>}, {name: rescuer, type: 112, typeName: AccountIdLookupOf<T>}], index: 4, docs: [See [`Pallet::vouch_recovery`].]}, {name: claim_recovery, fields: [{name: account, type: 112, typeName: AccountIdLookupOf<T>}], index: 5, docs: [See [`Pallet::claim_recovery`].]}, {name: close_recovery, fields: [{name: rescuer, type: 112, typeName: AccountIdLookupOf<T>}], index: 6, docs: [See [`Pallet::close_recovery`].]}, {name: remove_recovery, index: 7, docs: [See [`Pallet::remove_recovery`].]}, {name: cancel_recovered, fields: [{name: account, type: 112, typeName: AccountIdLookupOf<T>}], index: 8, docs: [See [`Pallet::cancel_recovered`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 185, type: {path: [pallet_vesting, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: vest, index: 0, docs: [See [`Pallet::vest`].]}, {name: vest_other, fields: [{name: target, type: 112, typeName: AccountIdLookupOf<T>}], index: 1, docs: [See [`Pallet::vest_other`].]}, {name: vested_transfer, fields: [{name: target, type: 112, typeName: AccountIdLookupOf<T>}, {name: schedule, type: 186, typeName: VestingInfo<BalanceOf<T>, BlockNumberFor<T>>}], index: 2, docs: [See [`Pallet::vested_transfer`].]}, {name: force_vested_transfer, fields: [{name: source, type: 112, typeName: AccountIdLookupOf<T>}, {name: target, type: 112, typeName: AccountIdLookupOf<T>}, {name: schedule, type: 186, typeName: VestingInfo<BalanceOf<T>, BlockNumberFor<T>>}], index: 3, docs: [See [`Pallet::force_vested_transfer`].]}, {name: merge_schedules, fields: [{name: schedule1_index, type: 4, typeName: u32}, {name: schedule2_index, type: 4, typeName: u32}], index: 4, docs: [See [`Pallet::merge_schedules`].]}, {name: force_remove_vesting_schedule, fields: [{name: target, type: 112, typeName: <T::Lookup as StaticLookup>::Source}, {name: schedule_index, type: 4, typeName: u32}], index: 5, docs: [See [`Pallet::force_remove_vesting_schedule`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 186, type: {path: [pallet_vesting, vesting_info, VestingInfo], params: [{name: Balance, type: 6}, {name: BlockNumber, type: 4}], def: {fields: [{name: locked, type: 6, typeName: Balance}, {name: per_block, type: 6, typeName: Balance}, {name: starting_block, type: 4, typeName: BlockNumber}]}}}, {id: 187, type: {path: [pallet_scheduler, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: schedule, fields: [{name: when, type: 4, typeName: BlockNumberFor<T>}, {name: maybe_periodic, type: 188, typeName: Option<schedule::Period<BlockNumberFor<T>>>}, {name: priority, type: 2, typeName: schedule::Priority}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 0, docs: [See [`Pallet::schedule`].]}, {name: cancel, fields: [{name: when, type: 4, typeName: BlockNumberFor<T>}, {name: index, type: 4, typeName: u32}], index: 1, docs: [See [`Pallet::cancel`].]}, {name: schedule_named, fields: [{name: id, type: 1, typeName: TaskName}, {name: when, type: 4, typeName: BlockNumberFor<T>}, {name: maybe_periodic, type: 188, typeName: Option<schedule::Period<BlockNumberFor<T>>>}, {name: priority, type: 2, typeName: schedule::Priority}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 2, docs: [See [`Pallet::schedule_named`].]}, {name: cancel_named, fields: [{name: id, type: 1, typeName: TaskName}], index: 3, docs: [See [`Pallet::cancel_named`].]}, {name: schedule_after, fields: [{name: after, type: 4, typeName: BlockNumberFor<T>}, {name: maybe_periodic, type: 188, typeName: Option<schedule::Period<BlockNumberFor<T>>>}, {name: priority, type: 2, typeName: schedule::Priority}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 4, docs: [See [`Pallet::schedule_after`].]}, {name: schedule_named_after, fields: [{name: id, type: 1, typeName: TaskName}, {name: after, type: 4, typeName: BlockNumberFor<T>}, {name: maybe_periodic, type: 188, typeName: Option<schedule::Period<BlockNumberFor<T>>>}, {name: priority, type: 2, typeName: schedule::Priority}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 5, docs: [See [`Pallet::schedule_named_after`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 188, type: {path: [Option], params: [{name: T, type: 189}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 189}], index: 1}]}}}, {id: 189, type: {def: {fields: [4, 4]}}}, {id: 190, type: {path: [pallet_proxy, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: proxy, fields: [{name: real, type: 112, typeName: AccountIdLookupOf<T>}, {name: force_proxy_type, type: 191, typeName: Option<T::ProxyType>}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 0, docs: [See [`Pallet::proxy`].]}, {name: add_proxy, fields: [{name: delegate, type: 112, typeName: AccountIdLookupOf<T>}, {name: proxy_type, type: 192, typeName: T::ProxyType}, {name: delay, type: 4, typeName: BlockNumberFor<T>}], index: 1, docs: [See [`Pallet::add_proxy`].]}, {name: remove_proxy, fields: [{name: delegate, type: 112, typeName: AccountIdLookupOf<T>}, {name: proxy_type, type: 192, typeName: T::ProxyType}, {name: delay, type: 4, typeName: BlockNumberFor<T>}], index: 2, docs: [See [`Pallet::remove_proxy`].]}, {name: remove_proxies, index: 3, docs: [See [`Pallet::remove_proxies`].]}, {name: create_pure, fields: [{name: proxy_type, type: 192, typeName: T::ProxyType}, {name: delay, type: 4, typeName: BlockNumberFor<T>}, {name: index, type: 94, typeName: u16}], index: 4, docs: [See [`Pallet::create_pure`].]}, {name: kill_pure, fields: [{name: spawner, type: 112, typeName: AccountIdLookupOf<T>}, {name: proxy_type, type: 192, typeName: T::ProxyType}, {name: index, type: 94, typeName: u16}, {name: height, type: 63, typeName: BlockNumberFor<T>}, {name: ext_index, type: 63, typeName: u32}], index: 5, docs: [See [`Pallet::kill_pure`].]}, {name: announce, fields: [{name: real, type: 112, typeName: AccountIdLookupOf<T>}, {name: call_hash, type: 12, typeName: CallHashOf<T>}], index: 6, docs: [See [`Pallet::announce`].]}, {name: remove_announcement, fields: [{name: real, type: 112, typeName: AccountIdLookupOf<T>}, {name: call_hash, type: 12, typeName: CallHashOf<T>}], index: 7, docs: [See [`Pallet::remove_announcement`].]}, {name: reject_announcement, fields: [{name: delegate, type: 112, typeName: AccountIdLookupOf<T>}, {name: call_hash, type: 12, typeName: CallHashOf<T>}], index: 8, docs: [See [`Pallet::reject_announcement`].]}, {name: proxy_announced, fields: [{name: delegate, type: 112, typeName: AccountIdLookupOf<T>}, {name: real, type: 112, typeName: AccountIdLookupOf<T>}, {name: force_proxy_type, type: 191, typeName: Option<T::ProxyType>}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 9, docs: [See [`Pallet::proxy_announced`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 191, type: {path: [Option], params: [{name: T, type: 192}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 192}], index: 1}]}}}, {id: 192, type: {path: [staging_kusama_runtime, ProxyType], def: {variants: [{name: Any, index: 0}, {name: NonTransfer, index: 1}, {name: Governance, index: 2}, {name: Staking, index: 3}, {name: CancelProxy, index: 5}, {name: Auction, index: 6}, {name: Society, index: 7}, {name: NominationPools, index: 8}]}}}, {id: 193, type: {path: [pallet_multisig, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: as_multi_threshold_1, fields: [{name: other_signatories, type: 116, typeName: Vec<T::AccountId>}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}], index: 0, docs: [See [`Pallet::as_multi_threshold_1`].]}, {name: as_multi, fields: [{name: threshold, type: 94, typeName: u16}, {name: other_signatories, type: 116, typeName: Vec<T::AccountId>}, {name: maybe_timepoint, type: 194, typeName: Option<Timepoint<BlockNumberFor<T>>>}, {name: call, type: 96, typeName: Box<<T as Config>::RuntimeCall>}, {name: max_weight, type: 9, typeName: Weight}], index: 1, docs: [See [`Pallet::as_multi`].]}, {name: approve_as_multi, fields: [{name: threshold, type: 94, typeName: u16}, {name: other_signatories, type: 116, typeName: Vec<T::AccountId>}, {name: maybe_timepoint, type: 194, typeName: Option<Timepoint<BlockNumberFor<T>>>}, {name: call_hash, type: 1, typeName: [u8; 32]}, {name: max_weight, type: 9, typeName: Weight}], index: 2, docs: [See [`Pallet::approve_as_multi`].]}, {name: cancel_as_multi, fields: [{name: threshold, type: 94, typeName: u16}, {name: other_signatories, type: 116, typeName: Vec<T::AccountId>}, {name: timepoint, type: 195, typeName: Timepoint<BlockNumberFor<T>>}, {name: call_hash, type: 1, typeName: [u8; 32]}], index: 3, docs: [See [`Pallet::cancel_as_multi`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 194, type: {path: [Option], params: [{name: T, type: 195}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 195}], index: 1}]}}}, {id: 195, type: {path: [pallet_multisig, Timepoint], params: [{name: BlockNumber, type: 4}], def: {fields: [{name: height, type: 4, typeName: BlockNumber}, {name: index, type: 4, typeName: u32}]}}}, {id: 196, type: {path: [pallet_preimage, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: note_preimage, fields: [{name: bytes, type: 13, typeName: Vec<u8>}], index: 0, docs: [See [`Pallet::note_preimage`].]}, {name: unnote_preimage, fields: [{name: hash, type: 12, typeName: T::Hash}], index: 1, docs: [See [`Pallet::unnote_preimage`].]}, {name: request_preimage, fields: [{name: hash, type: 12, typeName: T::Hash}], index: 2, docs: [See [`Pallet::request_preimage`].]}, {name: unrequest_preimage, fields: [{name: hash, type: 12, typeName: T::Hash}], index: 3, docs: [See [`Pallet::unrequest_preimage`].]}, {name: ensure_updated, fields: [{name: hashes, type: 197, typeName: Vec<T::Hash>}], index: 4, docs: [See [`Pallet::ensure_updated`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 197, type: {def: {type: 12}}}, {id: 198, type: {path: [pallet_bounties, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: propose_bounty, fields: [{name: value, type: 55, typeName: BalanceOf<T, I>}, {name: description, type: 13, typeName: Vec<u8>}], index: 0, docs: [See [`Pallet::propose_bounty`].]}, {name: approve_bounty, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}], index: 1, docs: [See [`Pallet::approve_bounty`].]}, {name: propose_curator, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}, {name: curator, type: 112, typeName: AccountIdLookupOf<T>}, {name: fee, type: 55, typeName: BalanceOf<T, I>}], index: 2, docs: [See [`Pallet::propose_curator`].]}, {name: unassign_curator, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}], index: 3, docs: [See [`Pallet::unassign_curator`].]}, {name: accept_curator, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}], index: 4, docs: [See [`Pallet::accept_curator`].]}, {name: award_bounty, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}, {name: beneficiary, type: 112, typeName: AccountIdLookupOf<T>}], index: 5, docs: [See [`Pallet::award_bounty`].]}, {name: claim_bounty, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}], index: 6, docs: [See [`Pallet::claim_bounty`].]}, {name: close_bounty, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}], index: 7, docs: [See [`Pallet::close_bounty`].]}, {name: extend_bounty_expiry, fields: [{name: bounty_id, type: 63, typeName: BountyIndex}, {name: remark, type: 13, typeName: Vec<u8>}], index: 8, docs: [See [`Pallet::extend_bounty_expiry`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 199, type: {path: [pallet_child_bounties, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: add_child_bounty, fields: [{name: parent_bounty_id, type: 63, typeName: BountyIndex}, {name: value, type: 55, typeName: BalanceOf<T>}, {name: description, type: 13, typeName: Vec<u8>}], index: 0, docs: [See [`Pallet::add_child_bounty`].]}, {name: propose_curator, fields: [{name: parent_bounty_id, type: 63, typeName: BountyIndex}, {name: child_bounty_id, type: 63, typeName: BountyIndex}, {name: curator, type: 112, typeName: AccountIdLookupOf<T>}, {name: fee, type: 55, typeName: BalanceOf<T>}], index: 1, docs: [See [`Pallet::propose_curator`].]}, {name: accept_curator, fields: [{name: parent_bounty_id, type: 63, typeName: BountyIndex}, {name: child_bounty_id, type: 63, typeName: BountyIndex}], index: 2, docs: [See [`Pallet::accept_curator`].]}, {name: unassign_curator, fields: [{name: parent_bounty_id, type: 63, typeName: BountyIndex}, {name: child_bounty_id, type: 63, typeName: BountyIndex}], index: 3, docs: [See [`Pallet::unassign_curator`].]}, {name: award_child_bounty, fields: [{name: parent_bounty_id, type: 63, typeName: BountyIndex}, {name: child_bounty_id, type: 63, typeName: BountyIndex}, {name: beneficiary, type: 112, typeName: AccountIdLookupOf<T>}], index: 4, docs: [See [`Pallet::award_child_bounty`].]}, {name: claim_child_bounty, fields: [{name: parent_bounty_id, type: 63, typeName: BountyIndex}, {name: child_bounty_id, type: 63, typeName: BountyIndex}], index: 5, docs: [See [`Pallet::claim_child_bounty`].]}, {name: close_child_bounty, fields: [{name: parent_bounty_id, type: 63, typeName: BountyIndex}, {name: child_bounty_id, type: 63, typeName: BountyIndex}], index: 6, docs: [See [`Pallet::close_child_bounty`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 200, type: {path: [pallet_election_provider_multi_phase, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: submit_unsigned, fields: [{name: raw_solution, type: 201, typeName: Box<RawSolution<SolutionOf<T::MinerConfig>>>}, {name: witness, type: 278, typeName: SolutionOrSnapshotSize}], index: 0, docs: [See [`Pallet::submit_unsigned`].]}, {name: set_minimum_untrusted_score, fields: [{name: maybe_next_score, type: 279, typeName: Option<ElectionScore>}], index: 1, docs: [See [`Pallet::set_minimum_untrusted_score`].]}, {name: set_emergency_election_result, fields: [{name: supports, type: 280, typeName: Supports<T::AccountId>}], index: 2, docs: [See [`Pallet::set_emergency_election_result`].]}, {name: submit, fields: [{name: raw_solution, type: 201, typeName: Box<RawSolution<SolutionOf<T::MinerConfig>>>}], index: 3, docs: [See [`Pallet::submit`].]}, {name: governance_fallback, fields: [{name: maybe_max_voters, type: 154, typeName: Option<u32>}, {name: maybe_max_targets, type: 154, typeName: Option<u32>}], index: 4, docs: [See [`Pallet::governance_fallback`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 201, type: {path: [pallet_election_provider_multi_phase, RawSolution], params: [{name: S, type: 202}], def: {fields: [{name: solution, type: 202, typeName: S}, {name: score, type: 277, typeName: ElectionScore}, {name: round, type: 4, typeName: u32}]}}}, {id: 202, type: {path: [staging_kusama_runtime, NposCompactSolution24], def: {fields: [{name: votes1, type: 203}, {name: votes2, type: 206}, {name: votes3, type: 211}, {name: votes4, type: 214}, {name: votes5, type: 217}, {name: votes6, type: 220}, {name: votes7, type: 223}, {name: votes8, type: 226}, {name: votes9, type: 229}, {name: votes10, type: 232}, {name: votes11, type: 235}, {name: votes12, type: 238}, {name: votes13, type: 241}, {name: votes14, type: 244}, {name: votes15, type: 247}, {name: votes16, type: 250}, {name: votes17, type: 253}, {name: votes18, type: 256}, {name: votes19, type: 259}, {name: votes20, type: 262}, {name: votes21, type: 265}, {name: votes22, type: 268}, {name: votes23, type: 271}, {name: votes24, type: 274}]}}}, {id: 203, type: {def: {type: 204}}}, {id: 204, type: {def: {fields: [63, 205]}}}, {id: 205, type: {def: {type: 94}}}, {id: 206, type: {def: {type: 207}}}, {id: 207, type: {def: {fields: [63, 208, 205]}}}, {id: 208, type: {def: {fields: [205, 209]}}}, {id: 209, type: {def: {type: 210}}}, {id: 210, type: {path: [sp_arithmetic, per_things, PerU16], def: {fields: [{type: 94, typeName: u16}]}}}, {id: 211, type: {def: {type: 212}}}, {id: 212, type: {def: {fields: [63, 213, 205]}}}, {id: 213, type: {def: {len: 2, type: 208}}}, {id: 214, type: {def: {type: 215}}}, {id: 215, type: {def: {fields: [63, 216, 205]}}}, {id: 216, type: {def: {len: 3, type: 208}}}, {id: 217, type: {def: {type: 218}}}, {id: 218, type: {def: {fields: [63, 219, 205]}}}, {id: 219, type: {def: {len: 4, type: 208}}}, {id: 220, type: {def: {type: 221}}}, {id: 221, type: {def: {fields: [63, 222, 205]}}}, {id: 222, type: {def: {len: 5, type: 208}}}, {id: 223, type: {def: {type: 224}}}, {id: 224, type: {def: {fields: [63, 225, 205]}}}, {id: 225, type: {def: {len: 6, type: 208}}}, {id: 226, type: {def: {type: 227}}}, {id: 227, type: {def: {fields: [63, 228, 205]}}}, {id: 228, type: {def: {len: 7, type: 208}}}, {id: 229, type: {def: {type: 230}}}, {id: 230, type: {def: {fields: [63, 231, 205]}}}, {id: 231, type: {def: {len: 8, type: 208}}}, {id: 232, type: {def: {type: 233}}}, {id: 233, type: {def: {fields: [63, 234, 205]}}}, {id: 234, type: {def: {len: 9, type: 208}}}, {id: 235, type: {def: {type: 236}}}, {id: 236, type: {def: {fields: [63, 237, 205]}}}, {id: 237, type: {def: {len: 10, type: 208}}}, {id: 238, type: {def: {type: 239}}}, {id: 239, type: {def: {fields: [63, 240, 205]}}}, {id: 240, type: {def: {len: 11, type: 208}}}, {id: 241, type: {def: {type: 242}}}, {id: 242, type: {def: {fields: [63, 243, 205]}}}, {id: 243, type: {def: {len: 12, type: 208}}}, {id: 244, type: {def: {type: 245}}}, {id: 245, type: {def: {fields: [63, 246, 205]}}}, {id: 246, type: {def: {len: 13, type: 208}}}, {id: 247, type: {def: {type: 248}}}, {id: 248, type: {def: {fields: [63, 249, 205]}}}, {id: 249, type: {def: {len: 14, type: 208}}}, {id: 250, type: {def: {type: 251}}}, {id: 251, type: {def: {fields: [63, 252, 205]}}}, {id: 252, type: {def: {len: 15, type: 208}}}, {id: 253, type: {def: {type: 254}}}, {id: 254, type: {def: {fields: [63, 255, 205]}}}, {id: 255, type: {def: {len: 16, type: 208}}}, {id: 256, type: {def: {type: 257}}}, {id: 257, type: {def: {fields: [63, 258, 205]}}}, {id: 258, type: {def: {len: 17, type: 208}}}, {id: 259, type: {def: {type: 260}}}, {id: 260, type: {def: {fields: [63, 261, 205]}}}, {id: 261, type: {def: {len: 18, type: 208}}}, {id: 262, type: {def: {type: 263}}}, {id: 263, type: {def: {fields: [63, 264, 205]}}}, {id: 264, type: {def: {len: 19, type: 208}}}, {id: 265, type: {def: {type: 266}}}, {id: 266, type: {def: {fields: [63, 267, 205]}}}, {id: 267, type: {def: {len: 20, type: 208}}}, {id: 268, type: {def: {type: 269}}}, {id: 269, type: {def: {fields: [63, 270, 205]}}}, {id: 270, type: {def: {len: 21, type: 208}}}, {id: 271, type: {def: {type: 272}}}, {id: 272, type: {def: {fields: [63, 273, 205]}}}, {id: 273, type: {def: {len: 22, type: 208}}}, {id: 274, type: {def: {type: 275}}}, {id: 275, type: {def: {fields: [63, 276, 205]}}}, {id: 276, type: {def: {len: 23, type: 208}}}, {id: 277, type: {path: [sp_npos_elections, ElectionScore], def: {fields: [{name: minimal_stake, type: 6, typeName: ExtendedBalance}, {name: sum_stake, type: 6, typeName: ExtendedBalance}, {name: sum_stake_squared, type: 6, typeName: ExtendedBalance}]}}}, {id: 278, type: {path: [pallet_election_provider_multi_phase, SolutionOrSnapshotSize], def: {fields: [{name: voters, type: 63, typeName: u32}, {name: targets, type: 63, typeName: u32}]}}}, {id: 279, type: {path: [Option], params: [{name: T, type: 277}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 277}], index: 1}]}}}, {id: 280, type: {def: {type: 281}}}, {id: 281, type: {def: {fields: [0, 282]}}}, {id: 282, type: {path: [sp_npos_elections, Support], params: [{name: AccountId, type: 0}], def: {fields: [{name: total, type: 6, typeName: ExtendedBalance}, {name: voters, type: 283, typeName: Vec<(AccountId, ExtendedBalance)>}]}}}, {id: 283, type: {def: {type: 284}}}, {id: 284, type: {def: {fields: [0, 6]}}}, {id: 285, type: {path: [pallet_nis, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: place_bid, fields: [{name: amount, type: 55, typeName: BalanceOf<T>}, {name: duration, type: 4, typeName: u32}], index: 0, docs: [See [`Pallet::place_bid`].]}, {name: retract_bid, fields: [{name: amount, type: 55, typeName: BalanceOf<T>}, {name: duration, type: 4, typeName: u32}], index: 1, docs: [See [`Pallet::retract_bid`].]}, {name: fund_deficit, index: 2, docs: [See [`Pallet::fund_deficit`].]}, {name: thaw_private, fields: [{name: index, type: 63, typeName: ReceiptIndex}, {name: maybe_proportion, type: 286, typeName: Option<Perquintill>}], index: 3, docs: [See [`Pallet::thaw_private`].]}, {name: thaw_communal, fields: [{name: index, type: 63, typeName: ReceiptIndex}], index: 4, docs: [See [`Pallet::thaw_communal`].]}, {name: communify, fields: [{name: index, type: 63, typeName: ReceiptIndex}], index: 5, docs: [See [`Pallet::communify`].]}, {name: privatize, fields: [{name: index, type: 63, typeName: ReceiptIndex}], index: 6, docs: [See [`Pallet::privatize`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 286, type: {path: [Option], params: [{name: T, type: 287}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 287}], index: 1}]}}}, {id: 287, type: {path: [sp_arithmetic, per_things, Perquintill], def: {fields: [{type: 11, typeName: u64}]}}}, {id: 288, type: {path: [pallet_balances, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: transfer_allow_death, fields: [{name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: value, type: 55, typeName: T::Balance}], index: 0, docs: [See [`Pallet::transfer_allow_death`].]}, {name: force_transfer, fields: [{name: source, type: 112, typeName: AccountIdLookupOf<T>}, {name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: value, type: 55, typeName: T::Balance}], index: 2, docs: [See [`Pallet::force_transfer`].]}, {name: transfer_keep_alive, fields: [{name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: value, type: 55, typeName: T::Balance}], index: 3, docs: [See [`Pallet::transfer_keep_alive`].]}, {name: transfer_all, fields: [{name: dest, type: 112, typeName: AccountIdLookupOf<T>}, {name: keep_alive, type: 30, typeName: bool}], index: 4, docs: [See [`Pallet::transfer_all`].]}, {name: force_unreserve, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: amount, type: 6, typeName: T::Balance}], index: 5, docs: [See [`Pallet::force_unreserve`].]}, {name: upgrade_accounts, fields: [{name: who, type: 116, typeName: Vec<T::AccountId>}], index: 6, docs: [See [`Pallet::upgrade_accounts`].]}, {name: force_set_balance, fields: [{name: who, type: 112, typeName: AccountIdLookupOf<T>}, {name: new_free, type: 55, typeName: T::Balance}], index: 8, docs: [See [`Pallet::force_set_balance`].]}, {name: force_adjust_total_issuance, fields: [{name: direction, type: 117, typeName: AdjustmentDirection}, {name: delta, type: 55, typeName: T::Balance}], index: 9, docs: [See [`Pallet::force_adjust_total_issuance`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 289, type: {path: [pallet_bags_list, pallet, Call], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: rebag, fields: [{name: dislocated, type: 112, typeName: AccountIdLookupOf<T>}], index: 0, docs: [See [`Pallet::rebag`].]}, {name: put_in_front_of, fields: [{name: lighter, type: 112, typeName: AccountIdLookupOf<T>}], index: 1, docs: [See [`Pallet::put_in_front_of`].]}, {name: put_in_front_of_other, fields: [{name: heavier, type: 112, typeName: AccountIdLookupOf<T>}, {name: lighter, type: 112, typeName: AccountIdLookupOf<T>}], index: 2, docs: [See [`Pallet::put_in_front_of_other`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 290, type: {path: [pallet_nomination_pools, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: join, fields: [{name: amount, type: 55, typeName: BalanceOf<T>}, {name: pool_id, type: 4, typeName: PoolId}], index: 0, docs: [See [`Pallet::join`].]}, {name: bond_extra, fields: [{name: extra, type: 291, typeName: BondExtra<BalanceOf<T>>}], index: 1, docs: [See [`Pallet::bond_extra`].]}, {name: claim_payout, index: 2, docs: [See [`Pallet::claim_payout`].]}, {name: unbond, fields: [{name: member_account, type: 112, typeName: AccountIdLookupOf<T>}, {name: unbonding_points, type: 55, typeName: BalanceOf<T>}], index: 3, docs: [See [`Pallet::unbond`].]}, {name: pool_withdraw_unbonded, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: num_slashing_spans, type: 4, typeName: u32}], index: 4, docs: [See [`Pallet::pool_withdraw_unbonded`].]}, {name: withdraw_unbonded, fields: [{name: member_account, type: 112, typeName: AccountIdLookupOf<T>}, {name: num_slashing_spans, type: 4, typeName: u32}], index: 5, docs: [See [`Pallet::withdraw_unbonded`].]}, {name: create, fields: [{name: amount, type: 55, typeName: BalanceOf<T>}, {name: root, type: 112, typeName: AccountIdLookupOf<T>}, {name: nominator, type: 112, typeName: AccountIdLookupOf<T>}, {name: bouncer, type: 112, typeName: AccountIdLookupOf<T>}], index: 6, docs: [See [`Pallet::create`].]}, {name: create_with_pool_id, fields: [{name: amount, type: 55, typeName: BalanceOf<T>}, {name: root, type: 112, typeName: AccountIdLookupOf<T>}, {name: nominator, type: 112, typeName: AccountIdLookupOf<T>}, {name: bouncer, type: 112, typeName: AccountIdLookupOf<T>}, {name: pool_id, type: 4, typeName: PoolId}], index: 7, docs: [See [`Pallet::create_with_pool_id`].]}, {name: nominate, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: validators, type: 116, typeName: Vec<T::AccountId>}], index: 8, docs: [See [`Pallet::nominate`].]}, {name: set_state, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: state, type: 292, typeName: PoolState}], index: 9, docs: [See [`Pallet::set_state`].]}, {name: set_metadata, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: metadata, type: 13, typeName: Vec<u8>}], index: 10, docs: [See [`Pallet::set_metadata`].]}, {name: set_configs, fields: [{name: min_join_bond, type: 293, typeName: ConfigOp<BalanceOf<T>>}, {name: min_create_bond, type: 293, typeName: ConfigOp<BalanceOf<T>>}, {name: max_pools, type: 294, typeName: ConfigOp<u32>}, {name: max_members, type: 294, typeName: ConfigOp<u32>}, {name: max_members_per_pool, type: 294, typeName: ConfigOp<u32>}, {name: global_max_commission, type: 295, typeName: ConfigOp<Perbill>}], index: 11, docs: [See [`Pallet::set_configs`].]}, {name: update_roles, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: new_root, type: 296, typeName: ConfigOp<T::AccountId>}, {name: new_nominator, type: 296, typeName: ConfigOp<T::AccountId>}, {name: new_bouncer, type: 296, typeName: ConfigOp<T::AccountId>}], index: 12, docs: [See [`Pallet::update_roles`].]}, {name: chill, fields: [{name: pool_id, type: 4, typeName: PoolId}], index: 13, docs: [See [`Pallet::chill`].]}, {name: bond_extra_other, fields: [{name: member, type: 112, typeName: AccountIdLookupOf<T>}, {name: extra, type: 291, typeName: BondExtra<BalanceOf<T>>}], index: 14, docs: [See [`Pallet::bond_extra_other`].]}, {name: set_claim_permission, fields: [{name: permission, type: 297, typeName: ClaimPermission}], index: 15, docs: [See [`Pallet::set_claim_permission`].]}, {name: claim_payout_other, fields: [{name: other, type: 0, typeName: T::AccountId}], index: 16, docs: [See [`Pallet::claim_payout_other`].]}, {name: set_commission, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: new_commission, type: 298, typeName: Option<(Perbill, T::AccountId)>}], index: 17, docs: [See [`Pallet::set_commission`].]}, {name: set_commission_max, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: max_commission, type: 37, typeName: Perbill}], index: 18, docs: [See [`Pallet::set_commission_max`].]}, {name: set_commission_change_rate, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: change_rate, type: 300, typeName: CommissionChangeRate<BlockNumberFor<T>>}], index: 19, docs: [See [`Pallet::set_commission_change_rate`].]}, {name: claim_commission, fields: [{name: pool_id, type: 4, typeName: PoolId}], index: 20, docs: [See [`Pallet::claim_commission`].]}, {name: adjust_pool_deposit, fields: [{name: pool_id, type: 4, typeName: PoolId}], index: 21, docs: [See [`Pallet::adjust_pool_deposit`].]}, {name: set_commission_claim_permission, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: permission, type: 301, typeName: Option<CommissionClaimPermission<T::AccountId>>}], index: 22, docs: [See [`Pallet::set_commission_claim_permission`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 291, type: {path: [pallet_nomination_pools, BondExtra], params: [{name: Balance, type: 6}], def: {variants: [{name: FreeBalance, fields: [{type: 6, typeName: Balance}], index: 0}, {name: Rewards, index: 1}]}}}, {id: 292, type: {path: [pallet_nomination_pools, PoolState], def: {variants: [{name: Open, index: 0}, {name: Blocked, index: 1}, {name: Destroying, index: 2}]}}}, {id: 293, type: {path: [pallet_nomination_pools, ConfigOp], params: [{name: T, type: 6}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 6, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 294, type: {path: [pallet_nomination_pools, ConfigOp], params: [{name: T, type: 4}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 4, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 295, type: {path: [pallet_nomination_pools, ConfigOp], params: [{name: T, type: 37}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 37, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 296, type: {path: [pallet_nomination_pools, ConfigOp], params: [{name: T, type: 0}], def: {variants: [{name: Noop, index: 0}, {name: Set, fields: [{type: 0, typeName: T}], index: 1}, {name: Remove, index: 2}]}}}, {id: 297, type: {path: [pallet_nomination_pools, ClaimPermission], def: {variants: [{name: Permissioned, index: 0}, {name: PermissionlessCompound, index: 1}, {name: PermissionlessWithdraw, index: 2}, {name: PermissionlessAll, index: 3}]}}}, {id: 298, type: {path: [Option], params: [{name: T, type: 299}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 299}], index: 1}]}}}, {id: 299, type: {def: {fields: [37, 0]}}}, {id: 300, type: {path: [pallet_nomination_pools, CommissionChangeRate], params: [{name: BlockNumber, type: 4}], def: {fields: [{name: max_increase, type: 37, typeName: Perbill}, {name: min_delay, type: 4, typeName: BlockNumber}]}}}, {id: 301, type: {path: [Option], params: [{name: T, type: 302}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 302}], index: 1}]}}}, {id: 302, type: {path: [pallet_nomination_pools, CommissionClaimPermission], params: [{name: AccountId, type: 0}], def: {variants: [{name: Permissionless, index: 0}, {name: Account, fields: [{type: 0, typeName: AccountId}], index: 1}]}}}, {id: 303, type: {path: [pallet_fast_unstake, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: register_fast_unstake, index: 0, docs: [See [`Pallet::register_fast_unstake`].]}, {name: deregister, index: 1, docs: [See [`Pallet::deregister`].]}, {name: control, fields: [{name: eras_to_check, type: 4, typeName: EraIndex}], index: 2, docs: [See [`Pallet::control`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 304, type: {path: [polkadot_runtime_parachains, configuration, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: set_validation_upgrade_cooldown, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 0, docs: [See [`Pallet::set_validation_upgrade_cooldown`].]}, {name: set_validation_upgrade_delay, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 1, docs: [See [`Pallet::set_validation_upgrade_delay`].]}, {name: set_code_retention_period, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 2, docs: [See [`Pallet::set_code_retention_period`].]}, {name: set_max_code_size, fields: [{name: new, type: 4, typeName: u32}], index: 3, docs: [See [`Pallet::set_max_code_size`].]}, {name: set_max_pov_size, fields: [{name: new, type: 4, typeName: u32}], index: 4, docs: [See [`Pallet::set_max_pov_size`].]}, {name: set_max_head_data_size, fields: [{name: new, type: 4, typeName: u32}], index: 5, docs: [See [`Pallet::set_max_head_data_size`].]}, {name: set_coretime_cores, fields: [{name: new, type: 4, typeName: u32}], index: 6, docs: [See [`Pallet::set_coretime_cores`].]}, {name: set_on_demand_retries, fields: [{name: new, type: 4, typeName: u32}], index: 7, docs: [See [`Pallet::set_on_demand_retries`].]}, {name: set_group_rotation_frequency, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 8, docs: [See [`Pallet::set_group_rotation_frequency`].]}, {name: set_paras_availability_period, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 9, docs: [See [`Pallet::set_paras_availability_period`].]}, {name: set_scheduling_lookahead, fields: [{name: new, type: 4, typeName: u32}], index: 11, docs: [See [`Pallet::set_scheduling_lookahead`].]}, {name: set_max_validators_per_core, fields: [{name: new, type: 154, typeName: Option<u32>}], index: 12, docs: [See [`Pallet::set_max_validators_per_core`].]}, {name: set_max_validators, fields: [{name: new, type: 154, typeName: Option<u32>}], index: 13, docs: [See [`Pallet::set_max_validators`].]}, {name: set_dispute_period, fields: [{name: new, type: 4, typeName: SessionIndex}], index: 14, docs: [See [`Pallet::set_dispute_period`].]}, {name: set_dispute_post_conclusion_acceptance_period, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 15, docs: [See [`Pallet::set_dispute_post_conclusion_acceptance_period`].]}, {name: set_no_show_slots, fields: [{name: new, type: 4, typeName: u32}], index: 18, docs: [See [`Pallet::set_no_show_slots`].]}, {name: set_n_delay_tranches, fields: [{name: new, type: 4, typeName: u32}], index: 19, docs: [See [`Pallet::set_n_delay_tranches`].]}, {name: set_zeroth_delay_tranche_width, fields: [{name: new, type: 4, typeName: u32}], index: 20, docs: [See [`Pallet::set_zeroth_delay_tranche_width`].]}, {name: set_needed_approvals, fields: [{name: new, type: 4, typeName: u32}], index: 21, docs: [See [`Pallet::set_needed_approvals`].]}, {name: set_relay_vrf_modulo_samples, fields: [{name: new, type: 4, typeName: u32}], index: 22, docs: [See [`Pallet::set_relay_vrf_modulo_samples`].]}, {name: set_max_upward_queue_count, fields: [{name: new, type: 4, typeName: u32}], index: 23, docs: [See [`Pallet::set_max_upward_queue_count`].]}, {name: set_max_upward_queue_size, fields: [{name: new, type: 4, typeName: u32}], index: 24, docs: [See [`Pallet::set_max_upward_queue_size`].]}, {name: set_max_downward_message_size, fields: [{name: new, type: 4, typeName: u32}], index: 25, docs: [See [`Pallet::set_max_downward_message_size`].]}, {name: set_max_upward_message_size, fields: [{name: new, type: 4, typeName: u32}], index: 27, docs: [See [`Pallet::set_max_upward_message_size`].]}, {name: set_max_upward_message_num_per_candidate, fields: [{name: new, type: 4, typeName: u32}], index: 28, docs: [See [`Pallet::set_max_upward_message_num_per_candidate`].]}, {name: set_hrmp_open_request_ttl, fields: [{name: new, type: 4, typeName: u32}], index: 29, docs: [See [`Pallet::set_hrmp_open_request_ttl`].]}, {name: set_hrmp_sender_deposit, fields: [{name: new, type: 6, typeName: Balance}], index: 30, docs: [See [`Pallet::set_hrmp_sender_deposit`].]}, {name: set_hrmp_recipient_deposit, fields: [{name: new, type: 6, typeName: Balance}], index: 31, docs: [See [`Pallet::set_hrmp_recipient_deposit`].]}, {name: set_hrmp_channel_max_capacity, fields: [{name: new, type: 4, typeName: u32}], index: 32, docs: [See [`Pallet::set_hrmp_channel_max_capacity`].]}, {name: set_hrmp_channel_max_total_size, fields: [{name: new, type: 4, typeName: u32}], index: 33, docs: [See [`Pallet::set_hrmp_channel_max_total_size`].]}, {name: set_hrmp_max_parachain_inbound_channels, fields: [{name: new, type: 4, typeName: u32}], index: 34, docs: [See [`Pallet::set_hrmp_max_parachain_inbound_channels`].]}, {name: set_hrmp_channel_max_message_size, fields: [{name: new, type: 4, typeName: u32}], index: 36, docs: [See [`Pallet::set_hrmp_channel_max_message_size`].]}, {name: set_hrmp_max_parachain_outbound_channels, fields: [{name: new, type: 4, typeName: u32}], index: 37, docs: [See [`Pallet::set_hrmp_max_parachain_outbound_channels`].]}, {name: set_hrmp_max_message_num_per_candidate, fields: [{name: new, type: 4, typeName: u32}], index: 39, docs: [See [`Pallet::set_hrmp_max_message_num_per_candidate`].]}, {name: set_pvf_voting_ttl, fields: [{name: new, type: 4, typeName: SessionIndex}], index: 42, docs: [See [`Pallet::set_pvf_voting_ttl`].]}, {name: set_minimum_validation_upgrade_delay, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 43, docs: [See [`Pallet::set_minimum_validation_upgrade_delay`].]}, {name: set_bypass_consistency_check, fields: [{name: new, type: 30, typeName: bool}], index: 44, docs: [See [`Pallet::set_bypass_consistency_check`].]}, {name: set_async_backing_params, fields: [{name: new, type: 305, typeName: AsyncBackingParams}], index: 45, docs: [See [`Pallet::set_async_backing_params`].]}, {name: set_executor_params, fields: [{name: new, type: 306, typeName: ExecutorParams}], index: 46, docs: [See [`Pallet::set_executor_params`].]}, {name: set_on_demand_base_fee, fields: [{name: new, type: 6, typeName: Balance}], index: 47, docs: [See [`Pallet::set_on_demand_base_fee`].]}, {name: set_on_demand_fee_variability, fields: [{name: new, type: 37, typeName: Perbill}], index: 48, docs: [See [`Pallet::set_on_demand_fee_variability`].]}, {name: set_on_demand_queue_max_size, fields: [{name: new, type: 4, typeName: u32}], index: 49, docs: [See [`Pallet::set_on_demand_queue_max_size`].]}, {name: set_on_demand_target_queue_utilization, fields: [{name: new, type: 37, typeName: Perbill}], index: 50, docs: [See [`Pallet::set_on_demand_target_queue_utilization`].]}, {name: set_on_demand_ttl, fields: [{name: new, type: 4, typeName: BlockNumberFor<T>}], index: 51, docs: [See [`Pallet::set_on_demand_ttl`].]}, {name: set_minimum_backing_votes, fields: [{name: new, type: 4, typeName: u32}], index: 52, docs: [See [`Pallet::set_minimum_backing_votes`].]}, {name: set_node_feature, fields: [{name: index, type: 2, typeName: u8}, {name: value, type: 30, typeName: bool}], index: 53, docs: [See [`Pallet::set_node_feature`].]}, {name: set_approval_voting_params, fields: [{name: new, type: 311, typeName: ApprovalVotingParams}], index: 54, docs: [See [`Pallet::set_approval_voting_params`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 305, type: {path: [polkadot_primitives, v6, async_backing, AsyncBackingParams], def: {fields: [{name: max_candidate_depth, type: 4, typeName: u32}, {name: allowed_ancestry_len, type: 4, typeName: u32}]}}}, {id: 306, type: {path: [polkadot_primitives, v6, executor_params, ExecutorParams], def: {fields: [{type: 307, typeName: Vec<ExecutorParam>}]}}}, {id: 307, type: {def: {type: 308}}}, {id: 308, type: {path: [polkadot_primitives, v6, executor_params, ExecutorParam], def: {variants: [{name: MaxMemoryPages, fields: [{type: 4, typeName: u32}], index: 1}, {name: StackLogicalMax, fields: [{type: 4, typeName: u32}], index: 2}, {name: StackNativeMax, fields: [{type: 4, typeName: u32}], index: 3}, {name: PrecheckingMaxMemory, fields: [{type: 11, typeName: u64}], index: 4}, {name: PvfPrepTimeout, fields: [{type: 309, typeName: PvfPrepKind}, {type: 11, typeName: u64}], index: 5}, {name: PvfExecTimeout, fields: [{type: 310, typeName: PvfExecKind}, {type: 11, typeName: u64}], index: 6}, {name: WasmExtBulkMemory, index: 7}]}}}, {id: 309, type: {path: [polkadot_primitives, v6, PvfPrepKind], def: {variants: [{name: Precheck, index: 0}, {name: Prepare, index: 1}]}}}, {id: 310, type: {path: [polkadot_primitives, v6, PvfExecKind], def: {variants: [{name: Backing, index: 0}, {name: Approval, index: 1}]}}}, {id: 311, type: {path: [polkadot_primitives, vstaging, ApprovalVotingParams], def: {fields: [{name: max_approval_coalesce_count, type: 4, typeName: u32}]}}}, {id: 312, type: {path: [polkadot_runtime_parachains, shared, pallet, Call], params: [{name: T, type: null}], def: {}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 313, type: {path: [polkadot_runtime_parachains, inclusion, pallet, Call], params: [{name: T, type: null}], def: {}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 314, type: {path: [polkadot_runtime_parachains, paras_inherent, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: enter, fields: [{name: data, type: 315, typeName: ParachainsInherentData<HeaderFor<T>>}], index: 0, docs: [See [`Pallet::enter`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 315, type: {path: [polkadot_primitives, v6, InherentData], params: [{name: HDR, type: 103}], def: {fields: [{name: bitfields, type: 316, typeName: UncheckedSignedAvailabilityBitfields}, {name: backed_candidates, type: 324, typeName: Vec<BackedCandidate<HDR::Hash>>}, {name: disputes, type: 341, typeName: MultiDisputeStatementSet}, {name: parent_header, type: 103, typeName: HDR}]}}}, {id: 316, type: {def: {type: 317}}}, {id: 317, type: {path: [polkadot_primitives, v6, signed, UncheckedSigned], params: [{name: Payload, type: 318}, {name: RealPayload, type: 318}], def: {fields: [{name: payload, type: 318, typeName: Payload}, {name: validator_index, type: 321, typeName: ValidatorIndex}, {name: signature, type: 322, typeName: ValidatorSignature}]}}}, {id: 318, type: {path: [polkadot_primitives, v6, AvailabilityBitfield], def: {fields: [{type: 319, typeName: BitVec<u8, bitvec::order::Lsb0>}]}}}, {id: 319, type: {def: {bitStoreType: 2, bitOrderType: 320}}}, {id: 320, type: {path: [bitvec, order, Lsb0], def: {}}}, {id: 321, type: {path: [polkadot_primitives, v6, ValidatorIndex], def: {fields: [{type: 4, typeName: u32}]}}}, {id: 322, type: {path: [polkadot_primitives, v6, validator_app, Signature], def: {fields: [{type: 323, typeName: sr25519::Signature}]}}}, {id: 323, type: {path: [sp_core, sr25519, Signature], def: {fields: [{type: 148, typeName: [u8; 64]}]}}}, {id: 324, type: {def: {type: 325}}}, {id: 325, type: {path: [polkadot_primitives, v6, BackedCandidate], params: [{name: H, type: 12}], def: {fields: [{name: candidate, type: 326, typeName: CommittedCandidateReceipt<H>}, {name: validity_votes, type: 339, typeName: Vec<ValidityAttestation>}, {name: validator_indices, type: 319, typeName: BitVec<u8, bitvec::order::Lsb0>}]}}}, {id: 326, type: {path: [polkadot_primitives, v6, CommittedCandidateReceipt], params: [{name: H, type: 12}], def: {fields: [{name: descriptor, type: 327, typeName: CandidateDescriptor<H>}, {name: commitments, type: 331, typeName: CandidateCommitments}]}}}, {id: 327, type: {path: [polkadot_primitives, v6, CandidateDescriptor], params: [{name: H, type: 12}], def: {fields: [{name: para_id, type: 165, typeName: Id}, {name: relay_parent, type: 12, typeName: H}, {name: collator, type: 328, typeName: CollatorId}, {name: persisted_validation_data_hash, type: 12, typeName: Hash}, {name: pov_hash, type: 12, typeName: Hash}, {name: erasure_root, type: 12, typeName: Hash}, {name: signature, type: 329, typeName: CollatorSignature}, {name: para_head, type: 12, typeName: Hash}, {name: validation_code_hash, type: 330, typeName: ValidationCodeHash}]}}}, {id: 328, type: {path: [polkadot_primitives, v6, collator_app, Public], def: {fields: [{type: 51, typeName: sr25519::Public}]}}}, {id: 329, type: {path: [polkadot_primitives, v6, collator_app, Signature], def: {fields: [{type: 323, typeName: sr25519::Signature}]}}}, {id: 330, type: {path: [polkadot_parachain_primitives, primitives, ValidationCodeHash], def: {fields: [{type: 12, typeName: Hash}]}}}, {id: 331, type: {path: [polkadot_primitives, v6, CandidateCommitments], params: [{name: N, type: 4}], def: {fields: [{name: upward_messages, type: 332, typeName: UpwardMessages}, {name: horizontal_messages, type: 333, typeName: HorizontalMessages}, {name: new_validation_code, type: 336, typeName: Option<ValidationCode>}, {name: head_data, type: 338, typeName: HeadData}, {name: processed_downward_messages, type: 4, typeName: u32}, {name: hrmp_watermark, type: 4, typeName: N}]}}}, {id: 332, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 13}, {name: S, type: null}], def: {fields: [{type: 100, typeName: Vec<T>}]}}}, {id: 333, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 334}, {name: S, type: null}], def: {fields: [{type: 335, typeName: Vec<T>}]}}}, {id: 334, type: {path: [polkadot_core_primitives, OutboundHrmpMessage], params: [{name: Id, type: 165}], def: {fields: [{name: recipient, type: 165, typeName: Id}, {name: data, type: 13, typeName: sp_std::vec::Vec<u8>}]}}}, {id: 335, type: {def: {type: 334}}}, {id: 336, type: {path: [Option], params: [{name: T, type: 337}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 337}], index: 1}]}}}, {id: 337, type: {path: [polkadot_parachain_primitives, primitives, ValidationCode], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 338, type: {path: [polkadot_parachain_primitives, primitives, HeadData], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 339, type: {def: {type: 340}}}, {id: 340, type: {path: [polkadot_primitives, v6, ValidityAttestation], def: {variants: [{name: Implicit, fields: [{type: 322, typeName: ValidatorSignature}], index: 1}, {name: Explicit, fields: [{type: 322, typeName: ValidatorSignature}], index: 2}]}}}, {id: 341, type: {def: {type: 342}}}, {id: 342, type: {path: [polkadot_primitives, v6, DisputeStatementSet], def: {fields: [{name: candidate_hash, type: 343, typeName: CandidateHash}, {name: session, type: 4, typeName: SessionIndex}, {name: statements, type: 344, typeName: Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>}]}}}, {id: 343, type: {path: [polkadot_core_primitives, CandidateHash], def: {fields: [{type: 12, typeName: Hash}]}}}, {id: 344, type: {def: {type: 345}}}, {id: 345, type: {def: {fields: [346, 321, 322]}}}, {id: 346, type: {path: [polkadot_primitives, v6, DisputeStatement], def: {variants: [{name: Valid, fields: [{type: 347, typeName: ValidDisputeStatementKind}], index: 0}, {name: Invalid, fields: [{type: 349, typeName: InvalidDisputeStatementKind}], index: 1}]}}}, {id: 347, type: {path: [polkadot_primitives, v6, ValidDisputeStatementKind], def: {variants: [{name: Explicit, index: 0}, {name: BackingSeconded, fields: [{type: 12, typeName: Hash}], index: 1}, {name: BackingValid, fields: [{type: 12, typeName: Hash}], index: 2}, {name: ApprovalChecking, index: 3}, {name: ApprovalCheckingMultipleCandidates, fields: [{type: 348, typeName: Vec<CandidateHash>}], index: 4}]}}}, {id: 348, type: {def: {type: 343}}}, {id: 349, type: {path: [polkadot_primitives, v6, InvalidDisputeStatementKind], def: {variants: [{name: Explicit, index: 0}]}}}, {id: 350, type: {path: [polkadot_runtime_parachains, paras, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: force_set_current_code, fields: [{name: para, type: 165, typeName: ParaId}, {name: new_code, type: 337, typeName: ValidationCode}], index: 0, docs: [See [`Pallet::force_set_current_code`].]}, {name: force_set_current_head, fields: [{name: para, type: 165, typeName: ParaId}, {name: new_head, type: 338, typeName: HeadData}], index: 1, docs: [See [`Pallet::force_set_current_head`].]}, {name: force_schedule_code_upgrade, fields: [{name: para, type: 165, typeName: ParaId}, {name: new_code, type: 337, typeName: ValidationCode}, {name: relay_parent_number, type: 4, typeName: BlockNumberFor<T>}], index: 2, docs: [See [`Pallet::force_schedule_code_upgrade`].]}, {name: force_note_new_head, fields: [{name: para, type: 165, typeName: ParaId}, {name: new_head, type: 338, typeName: HeadData}], index: 3, docs: [See [`Pallet::force_note_new_head`].]}, {name: force_queue_action, fields: [{name: para, type: 165, typeName: ParaId}], index: 4, docs: [See [`Pallet::force_queue_action`].]}, {name: add_trusted_validation_code, fields: [{name: validation_code, type: 337, typeName: ValidationCode}], index: 5, docs: [See [`Pallet::add_trusted_validation_code`].]}, {name: poke_unused_validation_code, fields: [{name: validation_code_hash, type: 330, typeName: ValidationCodeHash}], index: 6, docs: [See [`Pallet::poke_unused_validation_code`].]}, {name: include_pvf_check_statement, fields: [{name: stmt, type: 351, typeName: PvfCheckStatement}, {name: signature, type: 322, typeName: ValidatorSignature}], index: 7, docs: [See [`Pallet::include_pvf_check_statement`].]}, {name: force_set_most_recent_context, fields: [{name: para, type: 165, typeName: ParaId}, {name: context, type: 4, typeName: BlockNumberFor<T>}], index: 8, docs: [See [`Pallet::force_set_most_recent_context`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 351, type: {path: [polkadot_primitives, v6, PvfCheckStatement], def: {fields: [{name: accept, type: 30, typeName: bool}, {name: subject, type: 330, typeName: ValidationCodeHash}, {name: session_index, type: 4, typeName: SessionIndex}, {name: validator_index, type: 321, typeName: ValidatorIndex}]}}}, {id: 352, type: {path: [polkadot_runtime_parachains, initializer, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: force_approve, fields: [{name: up_to, type: 4, typeName: BlockNumber}], index: 0, docs: [See [`Pallet::force_approve`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 353, type: {path: [polkadot_runtime_parachains, hrmp, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: hrmp_init_open_channel, fields: [{name: recipient, type: 165, typeName: ParaId}, {name: proposed_max_capacity, type: 4, typeName: u32}, {name: proposed_max_message_size, type: 4, typeName: u32}], index: 0, docs: [See [`Pallet::hrmp_init_open_channel`].]}, {name: hrmp_accept_open_channel, fields: [{name: sender, type: 165, typeName: ParaId}], index: 1, docs: [See [`Pallet::hrmp_accept_open_channel`].]}, {name: hrmp_close_channel, fields: [{name: channel_id, type: 354, typeName: HrmpChannelId}], index: 2, docs: [See [`Pallet::hrmp_close_channel`].]}, {name: force_clean_hrmp, fields: [{name: para, type: 165, typeName: ParaId}, {name: num_inbound, type: 4, typeName: u32}, {name: num_outbound, type: 4, typeName: u32}], index: 3, docs: [See [`Pallet::force_clean_hrmp`].]}, {name: force_process_hrmp_open, fields: [{name: channels, type: 4, typeName: u32}], index: 4, docs: [See [`Pallet::force_process_hrmp_open`].]}, {name: force_process_hrmp_close, fields: [{name: channels, type: 4, typeName: u32}], index: 5, docs: [See [`Pallet::force_process_hrmp_close`].]}, {name: hrmp_cancel_open_request, fields: [{name: channel_id, type: 354, typeName: HrmpChannelId}, {name: open_requests, type: 4, typeName: u32}], index: 6, docs: [See [`Pallet::hrmp_cancel_open_request`].]}, {name: force_open_hrmp_channel, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}, {name: max_capacity, type: 4, typeName: u32}, {name: max_message_size, type: 4, typeName: u32}], index: 7, docs: [See [`Pallet::force_open_hrmp_channel`].]}, {name: establish_system_channel, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}], index: 8, docs: [See [`Pallet::establish_system_channel`].]}, {name: poke_channel_deposits, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}], index: 9, docs: [See [`Pallet::poke_channel_deposits`].]}, {name: establish_channel_with_system, fields: [{name: target_system_chain, type: 165, typeName: ParaId}], index: 10, docs: [See [`Pallet::establish_channel_with_system`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 354, type: {path: [polkadot_parachain_primitives, primitives, HrmpChannelId], def: {fields: [{name: sender, type: 165, typeName: Id}, {name: recipient, type: 165, typeName: Id}]}}}, {id: 355, type: {path: [polkadot_runtime_parachains, disputes, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: force_unfreeze, index: 0, docs: [See [`Pallet::force_unfreeze`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 356, type: {path: [polkadot_runtime_parachains, disputes, slashing, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: report_dispute_lost_unsigned, fields: [{name: dispute_proof, type: 357, typeName: Box<DisputeProof>}, {name: key_owner_proof, type: 106, typeName: T::KeyOwnerProof}], index: 0, docs: [See [`Pallet::report_dispute_lost_unsigned`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 357, type: {path: [polkadot_primitives, v6, slashing, DisputeProof], def: {fields: [{name: time_slot, type: 358, typeName: DisputesTimeSlot}, {name: kind, type: 359, typeName: SlashingOffenceKind}, {name: validator_index, type: 321, typeName: ValidatorIndex}, {name: validator_id, type: 135, typeName: ValidatorId}]}}}, {id: 358, type: {path: [polkadot_primitives, v6, slashing, DisputesTimeSlot], def: {fields: [{name: session_index, type: 4, typeName: SessionIndex}, {name: candidate_hash, type: 343, typeName: CandidateHash}]}}}, {id: 359, type: {path: [polkadot_primitives, v6, slashing, SlashingOffenceKind], def: {variants: [{name: ForInvalid, index: 0}, {name: AgainstValid, index: 1}]}}}, {id: 360, type: {path: [polkadot_runtime_parachains, assigner_on_demand, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: place_order_allow_death, fields: [{name: max_amount, type: 6, typeName: BalanceOf<T>}, {name: para_id, type: 165, typeName: ParaId}], index: 0, docs: [See [`Pallet::place_order_allow_death`].]}, {name: place_order_keep_alive, fields: [{name: max_amount, type: 6, typeName: BalanceOf<T>}, {name: para_id, type: 165, typeName: ParaId}], index: 1, docs: [See [`Pallet::place_order_keep_alive`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 361, type: {path: [polkadot_runtime_common, paras_registrar, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: register, fields: [{name: id, type: 165, typeName: ParaId}, {name: genesis_head, type: 338, typeName: HeadData}, {name: validation_code, type: 337, typeName: ValidationCode}], index: 0, docs: [See [`Pallet::register`].]}, {name: force_register, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: deposit, type: 6, typeName: BalanceOf<T>}, {name: id, type: 165, typeName: ParaId}, {name: genesis_head, type: 338, typeName: HeadData}, {name: validation_code, type: 337, typeName: ValidationCode}], index: 1, docs: [See [`Pallet::force_register`].]}, {name: deregister, fields: [{name: id, type: 165, typeName: ParaId}], index: 2, docs: [See [`Pallet::deregister`].]}, {name: swap, fields: [{name: id, type: 165, typeName: ParaId}, {name: other, type: 165, typeName: ParaId}], index: 3, docs: [See [`Pallet::swap`].]}, {name: remove_lock, fields: [{name: para, type: 165, typeName: ParaId}], index: 4, docs: [See [`Pallet::remove_lock`].]}, {name: reserve, index: 5, docs: [See [`Pallet::reserve`].]}, {name: add_lock, fields: [{name: para, type: 165, typeName: ParaId}], index: 6, docs: [See [`Pallet::add_lock`].]}, {name: schedule_code_upgrade, fields: [{name: para, type: 165, typeName: ParaId}, {name: new_code, type: 337, typeName: ValidationCode}], index: 7, docs: [See [`Pallet::schedule_code_upgrade`].]}, {name: set_current_head, fields: [{name: para, type: 165, typeName: ParaId}, {name: new_head, type: 338, typeName: HeadData}], index: 8, docs: [See [`Pallet::set_current_head`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 362, type: {path: [polkadot_runtime_common, slots, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: force_lease, fields: [{name: para, type: 165, typeName: ParaId}, {name: leaser, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}, {name: period_begin, type: 4, typeName: LeasePeriodOf<T>}, {name: period_count, type: 4, typeName: LeasePeriodOf<T>}], index: 0, docs: [See [`Pallet::force_lease`].]}, {name: clear_all_leases, fields: [{name: para, type: 165, typeName: ParaId}], index: 1, docs: [See [`Pallet::clear_all_leases`].]}, {name: trigger_onboard, fields: [{name: para, type: 165, typeName: ParaId}], index: 2, docs: [See [`Pallet::trigger_onboard`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 363, type: {path: [polkadot_runtime_common, auctions, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: new_auction, fields: [{name: duration, type: 63, typeName: BlockNumberFor<T>}, {name: lease_period_index, type: 63, typeName: LeasePeriodOf<T>}], index: 0, docs: [See [`Pallet::new_auction`].]}, {name: bid, fields: [{name: para, type: 364, typeName: ParaId}, {name: auction_index, type: 63, typeName: AuctionIndex}, {name: first_slot, type: 63, typeName: LeasePeriodOf<T>}, {name: last_slot, type: 63, typeName: LeasePeriodOf<T>}, {name: amount, type: 55, typeName: BalanceOf<T>}], index: 1, docs: [See [`Pallet::bid`].]}, {name: cancel_auction, index: 2, docs: [See [`Pallet::cancel_auction`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 364, type: {def: {type: 165}}}, {id: 365, type: {path: [polkadot_runtime_common, crowdloan, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: create, fields: [{name: index, type: 364, typeName: ParaId}, {name: cap, type: 55, typeName: BalanceOf<T>}, {name: first_period, type: 63, typeName: LeasePeriodOf<T>}, {name: last_period, type: 63, typeName: LeasePeriodOf<T>}, {name: end, type: 63, typeName: BlockNumberFor<T>}, {name: verifier, type: 366, typeName: Option<MultiSigner>}], index: 0, docs: [See [`Pallet::create`].]}, {name: contribute, fields: [{name: index, type: 364, typeName: ParaId}, {name: value, type: 55, typeName: BalanceOf<T>}, {name: signature, type: 368, typeName: Option<MultiSignature>}], index: 1, docs: [See [`Pallet::contribute`].]}, {name: withdraw, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: index, type: 364, typeName: ParaId}], index: 2, docs: [See [`Pallet::withdraw`].]}, {name: refund, fields: [{name: index, type: 364, typeName: ParaId}], index: 3, docs: [See [`Pallet::refund`].]}, {name: dissolve, fields: [{name: index, type: 364, typeName: ParaId}], index: 4, docs: [See [`Pallet::dissolve`].]}, {name: edit, fields: [{name: index, type: 364, typeName: ParaId}, {name: cap, type: 55, typeName: BalanceOf<T>}, {name: first_period, type: 63, typeName: LeasePeriodOf<T>}, {name: last_period, type: 63, typeName: LeasePeriodOf<T>}, {name: end, type: 63, typeName: BlockNumberFor<T>}, {name: verifier, type: 366, typeName: Option<MultiSigner>}], index: 5, docs: [See [`Pallet::edit`].]}, {name: add_memo, fields: [{name: index, type: 165, typeName: ParaId}, {name: memo, type: 13, typeName: Vec<u8>}], index: 6, docs: [See [`Pallet::add_memo`].]}, {name: poke, fields: [{name: index, type: 165, typeName: ParaId}], index: 7, docs: [See [`Pallet::poke`].]}, {name: contribute_all, fields: [{name: index, type: 364, typeName: ParaId}, {name: signature, type: 368, typeName: Option<MultiSignature>}], index: 8, docs: [See [`Pallet::contribute_all`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 366, type: {path: [Option], params: [{name: T, type: 367}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 367}], index: 1}]}}}, {id: 367, type: {path: [sp_runtime, MultiSigner], def: {variants: [{name: Ed25519, fields: [{type: 48, typeName: ed25519::Public}], index: 0}, {name: Sr25519, fields: [{type: 51, typeName: sr25519::Public}], index: 1}, {name: Ecdsa, fields: [{type: 139, typeName: ecdsa::Public}], index: 2}]}}}, {id: 368, type: {path: [Option], params: [{name: T, type: 369}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 369}], index: 1}]}}}, {id: 369, type: {path: [sp_runtime, MultiSignature], def: {variants: [{name: Ed25519, fields: [{type: 147, typeName: ed25519::Signature}], index: 0}, {name: Sr25519, fields: [{type: 323, typeName: sr25519::Signature}], index: 1}, {name: Ecdsa, fields: [{type: 370, typeName: ecdsa::Signature}], index: 2}]}}}, {id: 370, type: {path: [sp_core, ecdsa, Signature], def: {fields: [{type: 175, typeName: [u8; SIGNATURE_SERIALIZED_SIZE]}]}}}, {id: 371, type: {path: [polkadot_runtime_parachains, coretime, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: request_core_count, fields: [{name: count, type: 94, typeName: u16}], index: 1, docs: [See [`Pallet::request_core_count`].]}, {name: assign_core, fields: [{name: core, type: 94, typeName: BrokerCoreIndex}, {name: begin, type: 4, typeName: BlockNumberFor<T>}, {name: assignment, type: 372, typeName: Vec<(CoreAssignment, PartsOf57600)>}, {name: end_hint, type: 154, typeName: Option<BlockNumberFor<T>>}], index: 4, docs: [See [`Pallet::assign_core`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 372, type: {def: {type: 373}}}, {id: 373, type: {def: {fields: [374, 375]}}}, {id: 374, type: {path: [pallet_broker, coretime_interface, CoreAssignment], def: {variants: [{name: Idle, index: 0}, {name: Pool, index: 1}, {name: Task, fields: [{type: 4, typeName: TaskId}], index: 2}]}}}, {id: 375, type: {path: [polkadot_runtime_parachains, assigner_coretime, PartsOf57600], def: {fields: [{type: 94, typeName: u16}]}}}, {id: 376, type: {path: [pallet_xcm, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: send, fields: [{name: dest, type: 84, typeName: Box<VersionedLocation>}, {name: message, type: 377, typeName: Box<VersionedXcm<()>>}], index: 0, docs: [See [`Pallet::send`].]}, {name: teleport_assets, fields: [{name: dest, type: 84, typeName: Box<VersionedLocation>}, {name: beneficiary, type: 84, typeName: Box<VersionedLocation>}, {name: assets, type: 440, typeName: Box<VersionedAssets>}, {name: fee_asset_item, type: 4, typeName: u32}], index: 1, docs: [See [`Pallet::teleport_assets`].]}, {name: reserve_transfer_assets, fields: [{name: dest, type: 84, typeName: Box<VersionedLocation>}, {name: beneficiary, type: 84, typeName: Box<VersionedLocation>}, {name: assets, type: 440, typeName: Box<VersionedAssets>}, {name: fee_asset_item, type: 4, typeName: u32}], index: 2, docs: [See [`Pallet::reserve_transfer_assets`].]}, {name: execute, fields: [{name: message, type: 441, typeName: Box<VersionedXcm<<T as Config>::RuntimeCall>>}, {name: max_weight, type: 9, typeName: Weight}], index: 3, docs: [See [`Pallet::execute`].]}, {name: force_xcm_version, fields: [{name: location, type: 70, typeName: Box<Location>}, {name: version, type: 4, typeName: XcmVersion}], index: 4, docs: [See [`Pallet::force_xcm_version`].]}, {name: force_default_xcm_version, fields: [{name: maybe_xcm_version, type: 154, typeName: Option<XcmVersion>}], index: 5, docs: [See [`Pallet::force_default_xcm_version`].]}, {name: force_subscribe_version_notify, fields: [{name: location, type: 84, typeName: Box<VersionedLocation>}], index: 6, docs: [See [`Pallet::force_subscribe_version_notify`].]}, {name: force_unsubscribe_version_notify, fields: [{name: location, type: 84, typeName: Box<VersionedLocation>}], index: 7, docs: [See [`Pallet::force_unsubscribe_version_notify`].]}, {name: limited_reserve_transfer_assets, fields: [{name: dest, type: 84, typeName: Box<VersionedLocation>}, {name: beneficiary, type: 84, typeName: Box<VersionedLocation>}, {name: assets, type: 440, typeName: Box<VersionedAssets>}, {name: fee_asset_item, type: 4, typeName: u32}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 8, docs: [See [`Pallet::limited_reserve_transfer_assets`].]}, {name: limited_teleport_assets, fields: [{name: dest, type: 84, typeName: Box<VersionedLocation>}, {name: beneficiary, type: 84, typeName: Box<VersionedLocation>}, {name: assets, type: 440, typeName: Box<VersionedAssets>}, {name: fee_asset_item, type: 4, typeName: u32}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 9, docs: [See [`Pallet::limited_teleport_assets`].]}, {name: force_suspension, fields: [{name: suspended, type: 30, typeName: bool}], index: 10, docs: [See [`Pallet::force_suspension`].]}, {name: transfer_assets, fields: [{name: dest, type: 84, typeName: Box<VersionedLocation>}, {name: beneficiary, type: 84, typeName: Box<VersionedLocation>}, {name: assets, type: 440, typeName: Box<VersionedAssets>}, {name: fee_asset_item, type: 4, typeName: u32}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 11, docs: [See [`Pallet::transfer_assets`].]}, {name: claim_assets, fields: [{name: assets, type: 440, typeName: Box<VersionedAssets>}, {name: beneficiary, type: 84, typeName: Box<VersionedLocation>}], index: 12, docs: [See [`Pallet::claim_assets`].]}, {name: transfer_assets_using_type_and_then, fields: [{name: dest, type: 84, typeName: Box<VersionedLocation>}, {name: assets, type: 440, typeName: Box<VersionedAssets>}, {name: assets_transfer_type, type: 452, typeName: Box<TransferType>}, {name: remote_fees_id, type: 453, typeName: Box<VersionedAssetId>}, {name: fees_transfer_type, type: 452, typeName: Box<TransferType>}, {name: custom_xcm_on_dest, type: 377, typeName: Box<VersionedXcm<()>>}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 13, docs: [See [`Pallet::transfer_assets_using_type_and_then`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 377, type: {path: [xcm, VersionedXcm], params: [{name: RuntimeCall, type: null}], def: {variants: [{name: V2, fields: [{type: 378, typeName: v2::Xcm<RuntimeCall>}], index: 2}, {name: V3, fields: [{type: 398, typeName: v3::Xcm<RuntimeCall>}], index: 3}, {name: V4, fields: [{type: 422, typeName: v4::Xcm<RuntimeCall>}], index: 4}]}}}, {id: 378, type: {path: [xcm, v2, Xcm], params: [{name: RuntimeCall, type: null}], def: {fields: [{type: 379, typeName: Vec<Instruction<RuntimeCall>>}]}}}, {id: 379, type: {def: {type: 380}}}, {id: 380, type: {path: [xcm, v2, Instruction], params: [{name: RuntimeCall, type: null}], def: {variants: [{name: WithdrawAsset, fields: [{type: 381, typeName: MultiAssets}], index: 0}, {name: ReserveAssetDeposited, fields: [{type: 381, typeName: MultiAssets}], index: 1}, {name: ReceiveTeleportedAsset, fields: [{type: 381, typeName: MultiAssets}], index: 2}, {name: QueryResponse, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: response, type: 388, typeName: Response}, {name: max_weight, type: 10, typeName: u64}], index: 3}, {name: TransferAsset, fields: [{name: assets, type: 381, typeName: MultiAssets}, {name: beneficiary, type: 85, typeName: MultiLocation}], index: 4}, {name: TransferReserveAsset, fields: [{name: assets, type: 381, typeName: MultiAssets}, {name: dest, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 5}, {name: Transact, fields: [{name: origin_type, type: 392, typeName: OriginKind}, {name: require_weight_at_most, type: 10, typeName: u64}, {name: call, type: 393, typeName: DoubleEncoded<RuntimeCall>}], index: 6}, {name: HrmpNewChannelOpenRequest, fields: [{name: sender, type: 63, typeName: u32}, {name: max_message_size, type: 63, typeName: u32}, {name: max_capacity, type: 63, typeName: u32}], index: 7}, {name: HrmpChannelAccepted, fields: [{name: recipient, type: 63, typeName: u32}], index: 8}, {name: HrmpChannelClosing, fields: [{name: initiator, type: 63, typeName: u32}, {name: sender, type: 63, typeName: u32}, {name: recipient, type: 63, typeName: u32}], index: 9}, {name: ClearOrigin, index: 10}, {name: DescendOrigin, fields: [{type: 86, typeName: InteriorMultiLocation}], index: 11}, {name: ReportError, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: dest, type: 85, typeName: MultiLocation}, {name: max_response_weight, type: 10, typeName: u64}], index: 12}, {name: DepositAsset, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: max_assets, type: 63, typeName: u32}, {name: beneficiary, type: 85, typeName: MultiLocation}], index: 13}, {name: DepositReserveAsset, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: max_assets, type: 63, typeName: u32}, {name: dest, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 14}, {name: ExchangeAsset, fields: [{name: give, type: 394, typeName: MultiAssetFilter}, {name: receive, type: 381, typeName: MultiAssets}], index: 15}, {name: InitiateReserveWithdraw, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: reserve, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 16}, {name: InitiateTeleport, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: dest, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 17}, {name: QueryHolding, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: dest, type: 85, typeName: MultiLocation}, {name: assets, type: 394, typeName: MultiAssetFilter}, {name: max_response_weight, type: 10, typeName: u64}], index: 18}, {name: BuyExecution, fields: [{name: fees, type: 383, typeName: MultiAsset}, {name: weight_limit, type: 397, typeName: WeightLimit}], index: 19}, {name: RefundSurplus, index: 20}, {name: SetErrorHandler, fields: [{type: 378, typeName: Xcm<RuntimeCall>}], index: 21}, {name: SetAppendix, fields: [{type: 378, typeName: Xcm<RuntimeCall>}], index: 22}, {name: ClearError, index: 23}, {name: ClaimAsset, fields: [{name: assets, type: 381, typeName: MultiAssets}, {name: ticket, type: 85, typeName: MultiLocation}], index: 24}, {name: Trap, fields: [{type: 10, typeName: u64}], index: 25}, {name: SubscribeVersion, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: max_response_weight, type: 10, typeName: u64}], index: 26}, {name: UnsubscribeVersion, index: 27}]}}}, {id: 381, type: {path: [xcm, v2, multiasset, MultiAssets], def: {fields: [{type: 382, typeName: Vec<MultiAsset>}]}}}, {id: 382, type: {def: {type: 383}}}, {id: 383, type: {path: [xcm, v2, multiasset, MultiAsset], def: {fields: [{name: id, type: 384, typeName: AssetId}, {name: fun, type: 385, typeName: Fungibility}]}}}, {id: 384, type: {path: [xcm, v2, multiasset, AssetId], def: {variants: [{name: Concrete, fields: [{type: 85, typeName: MultiLocation}], index: 0}, {name: Abstract, fields: [{type: 13, typeName: Vec<u8>}], index: 1}]}}}, {id: 385, type: {path: [xcm, v2, multiasset, Fungibility], def: {variants: [{name: Fungible, fields: [{type: 55, typeName: u128}], index: 0}, {name: NonFungible, fields: [{type: 386, typeName: AssetInstance}], index: 1}]}}}, {id: 386, type: {path: [xcm, v2, multiasset, AssetInstance], def: {variants: [{name: Undefined, index: 0}, {name: Index, fields: [{type: 55, typeName: u128}], index: 1}, {name: Array4, fields: [{type: 17, typeName: [u8; 4]}], index: 2}, {name: Array8, fields: [{type: 387, typeName: [u8; 8]}], index: 3}, {name: Array16, fields: [{type: 42, typeName: [u8; 16]}], index: 4}, {name: Array32, fields: [{type: 1, typeName: [u8; 32]}], index: 5}, {name: Blob, fields: [{type: 13, typeName: Vec<u8>}], index: 6}]}}}, {id: 387, type: {def: {len: 8, type: 2}}}, {id: 388, type: {path: [xcm, v2, Response], def: {variants: [{name: Null, index: 0}, {name: Assets, fields: [{type: 381, typeName: MultiAssets}], index: 1}, {name: ExecutionResult, fields: [{type: 389, typeName: Option<(u32, Error)>}], index: 2}, {name: Version, fields: [{type: 4, typeName: super::Version}], index: 3}]}}}, {id: 389, type: {path: [Option], params: [{name: T, type: 390}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 390}], index: 1}]}}}, {id: 390, type: {def: {fields: [4, 391]}}}, {id: 391, type: {path: [xcm, v2, traits, Error], def: {variants: [{name: Overflow, index: 0}, {name: Unimplemented, index: 1}, {name: UntrustedReserveLocation, index: 2}, {name: UntrustedTeleportLocation, index: 3}, {name: MultiLocationFull, index: 4}, {name: MultiLocationNotInvertible, index: 5}, {name: BadOrigin, index: 6}, {name: InvalidLocation, index: 7}, {name: AssetNotFound, index: 8}, {name: FailedToTransactAsset, index: 9}, {name: NotWithdrawable, index: 10}, {name: LocationCannotHold, index: 11}, {name: ExceedsMaxMessageSize, index: 12}, {name: DestinationUnsupported, index: 13}, {name: Transport, index: 14}, {name: Unroutable, index: 15}, {name: UnknownClaim, index: 16}, {name: FailedToDecode, index: 17}, {name: MaxWeightInvalid, index: 18}, {name: NotHoldingFees, index: 19}, {name: TooExpensive, index: 20}, {name: Trap, fields: [{type: 11, typeName: u64}], index: 21}, {name: UnhandledXcmVersion, index: 22}, {name: WeightLimitReached, fields: [{type: 11, typeName: Weight}], index: 23}, {name: Barrier, index: 24}, {name: WeightNotComputable, index: 25}]}}}, {id: 392, type: {path: [xcm, v2, OriginKind], def: {variants: [{name: Native, index: 0}, {name: SovereignAccount, index: 1}, {name: Superuser, index: 2}, {name: Xcm, index: 3}]}}}, {id: 393, type: {path: [xcm, double_encoded, DoubleEncoded], params: [{name: T, type: null}], def: {fields: [{name: encoded, type: 13, typeName: Vec<u8>}]}}}, {id: 394, type: {path: [xcm, v2, multiasset, MultiAssetFilter], def: {variants: [{name: Definite, fields: [{type: 381, typeName: MultiAssets}], index: 0}, {name: Wild, fields: [{type: 395, typeName: WildMultiAsset}], index: 1}]}}}, {id: 395, type: {path: [xcm, v2, multiasset, WildMultiAsset], def: {variants: [{name: All, index: 0}, {name: AllOf, fields: [{name: id, type: 384, typeName: AssetId}, {name: fun, type: 396, typeName: WildFungibility}], index: 1}]}}}, {id: 396, type: {path: [xcm, v2, multiasset, WildFungibility], def: {variants: [{name: Fungible, index: 0}, {name: NonFungible, index: 1}]}}}, {id: 397, type: {path: [xcm, v2, WeightLimit], def: {variants: [{name: Unlimited, index: 0}, {name: Limited, fields: [{type: 10, typeName: u64}], index: 1}]}}}, {id: 398, type: {path: [xcm, v3, Xcm], params: [{name: Call, type: null}], def: {fields: [{type: 399, typeName: Vec<Instruction<Call>>}]}}}, {id: 399, type: {def: {type: 400}}}, {id: 400, type: {path: [xcm, v3, Instruction], params: [{name: Call, type: null}], def: {variants: [{name: WithdrawAsset, fields: [{type: 401, typeName: MultiAssets}], index: 0}, {name: ReserveAssetDeposited, fields: [{type: 401, typeName: MultiAssets}], index: 1}, {name: ReceiveTeleportedAsset, fields: [{type: 401, typeName: MultiAssets}], index: 2}, {name: QueryResponse, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: response, type: 406, typeName: Response}, {name: max_weight, type: 9, typeName: Weight}, {name: querier, type: 416, typeName: Option<MultiLocation>}], index: 3}, {name: TransferAsset, fields: [{name: assets, type: 401, typeName: MultiAssets}, {name: beneficiary, type: 60, typeName: MultiLocation}], index: 4}, {name: TransferReserveAsset, fields: [{name: assets, type: 401, typeName: MultiAssets}, {name: dest, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 5}, {name: Transact, fields: [{name: origin_kind, type: 392, typeName: OriginKind}, {name: require_weight_at_most, type: 9, typeName: Weight}, {name: call, type: 393, typeName: DoubleEncoded<Call>}], index: 6}, {name: HrmpNewChannelOpenRequest, fields: [{name: sender, type: 63, typeName: u32}, {name: max_message_size, type: 63, typeName: u32}, {name: max_capacity, type: 63, typeName: u32}], index: 7}, {name: HrmpChannelAccepted, fields: [{name: recipient, type: 63, typeName: u32}], index: 8}, {name: HrmpChannelClosing, fields: [{name: initiator, type: 63, typeName: u32}, {name: sender, type: 63, typeName: u32}, {name: recipient, type: 63, typeName: u32}], index: 9}, {name: ClearOrigin, index: 10}, {name: DescendOrigin, fields: [{type: 61, typeName: InteriorMultiLocation}], index: 11}, {name: ReportError, fields: [{type: 417, typeName: QueryResponseInfo}], index: 12}, {name: DepositAsset, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: beneficiary, type: 60, typeName: MultiLocation}], index: 13}, {name: DepositReserveAsset, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: dest, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 14}, {name: ExchangeAsset, fields: [{name: give, type: 418, typeName: MultiAssetFilter}, {name: want, type: 401, typeName: MultiAssets}, {name: maximal, type: 30, typeName: bool}], index: 15}, {name: InitiateReserveWithdraw, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: reserve, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 16}, {name: InitiateTeleport, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: dest, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 17}, {name: ReportHolding, fields: [{name: response_info, type: 417, typeName: QueryResponseInfo}, {name: assets, type: 418, typeName: MultiAssetFilter}], index: 18}, {name: BuyExecution, fields: [{name: fees, type: 403, typeName: MultiAsset}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 19}, {name: RefundSurplus, index: 20}, {name: SetErrorHandler, fields: [{type: 398, typeName: Xcm<Call>}], index: 21}, {name: SetAppendix, fields: [{type: 398, typeName: Xcm<Call>}], index: 22}, {name: ClearError, index: 23}, {name: ClaimAsset, fields: [{name: assets, type: 401, typeName: MultiAssets}, {name: ticket, type: 60, typeName: MultiLocation}], index: 24}, {name: Trap, fields: [{type: 10, typeName: u64}], index: 25}, {name: SubscribeVersion, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: max_response_weight, type: 9, typeName: Weight}], index: 26}, {name: UnsubscribeVersion, index: 27}, {name: BurnAsset, fields: [{type: 401, typeName: MultiAssets}], index: 28}, {name: ExpectAsset, fields: [{type: 401, typeName: MultiAssets}], index: 29}, {name: ExpectOrigin, fields: [{type: 416, typeName: Option<MultiLocation>}], index: 30}, {name: ExpectError, fields: [{type: 407, typeName: Option<(u32, Error)>}], index: 31}, {name: ExpectTransactStatus, fields: [{type: 414, typeName: MaybeErrorCode}], index: 32}, {name: QueryPallet, fields: [{name: module_name, type: 13, typeName: Vec<u8>}, {name: response_info, type: 417, typeName: QueryResponseInfo}], index: 33}, {name: ExpectPallet, fields: [{name: index, type: 63, typeName: u32}, {name: name, type: 13, typeName: Vec<u8>}, {name: module_name, type: 13, typeName: Vec<u8>}, {name: crate_major, type: 63, typeName: u32}, {name: min_crate_minor, type: 63, typeName: u32}], index: 34}, {name: ReportTransactStatus, fields: [{type: 417, typeName: QueryResponseInfo}], index: 35}, {name: ClearTransactStatus, index: 36}, {name: UniversalOrigin, fields: [{type: 62, typeName: Junction}], index: 37}, {name: ExportMessage, fields: [{name: network, type: 65, typeName: NetworkId}, {name: destination, type: 61, typeName: InteriorMultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 38}, {name: LockAsset, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: unlocker, type: 60, typeName: MultiLocation}], index: 39}, {name: UnlockAsset, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: target, type: 60, typeName: MultiLocation}], index: 40}, {name: NoteUnlockable, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: owner, type: 60, typeName: MultiLocation}], index: 41}, {name: RequestUnlock, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: locker, type: 60, typeName: MultiLocation}], index: 42}, {name: SetFeesMode, fields: [{name: jit_withdraw, type: 30, typeName: bool}], index: 43}, {name: SetTopic, fields: [{type: 1, typeName: [u8; 32]}], index: 44}, {name: ClearTopic, index: 45}, {name: AliasOrigin, fields: [{type: 60, typeName: MultiLocation}], index: 46}, {name: UnpaidExecution, fields: [{name: weight_limit, type: 421, typeName: WeightLimit}, {name: check_origin, type: 416, typeName: Option<MultiLocation>}], index: 47}]}}}, {id: 401, type: {path: [xcm, v3, multiasset, MultiAssets], def: {fields: [{type: 402, typeName: Vec<MultiAsset>}]}}}, {id: 402, type: {def: {type: 403}}}, {id: 403, type: {path: [xcm, v3, multiasset, MultiAsset], def: {fields: [{name: id, type: 69, typeName: AssetId}, {name: fun, type: 404, typeName: Fungibility}]}}}, {id: 404, type: {path: [xcm, v3, multiasset, Fungibility], def: {variants: [{name: Fungible, fields: [{type: 55, typeName: u128}], index: 0}, {name: NonFungible, fields: [{type: 405, typeName: AssetInstance}], index: 1}]}}}, {id: 405, type: {path: [xcm, v3, multiasset, AssetInstance], def: {variants: [{name: Undefined, index: 0}, {name: Index, fields: [{type: 55, typeName: u128}], index: 1}, {name: Array4, fields: [{type: 17, typeName: [u8; 4]}], index: 2}, {name: Array8, fields: [{type: 387, typeName: [u8; 8]}], index: 3}, {name: Array16, fields: [{type: 42, typeName: [u8; 16]}], index: 4}, {name: Array32, fields: [{type: 1, typeName: [u8; 32]}], index: 5}]}}}, {id: 406, type: {path: [xcm, v3, Response], def: {variants: [{name: Null, index: 0}, {name: Assets, fields: [{type: 401, typeName: MultiAssets}], index: 1}, {name: ExecutionResult, fields: [{type: 407, typeName: Option<(u32, Error)>}], index: 2}, {name: Version, fields: [{type: 4, typeName: super::Version}], index: 3}, {name: PalletsInfo, fields: [{type: 410, typeName: BoundedVec<PalletInfo, MaxPalletsInfo>}], index: 4}, {name: DispatchResult, fields: [{type: 414, typeName: MaybeErrorCode}], index: 5}]}}}, {id: 407, type: {path: [Option], params: [{name: T, type: 408}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 408}], index: 1}]}}}, {id: 408, type: {def: {fields: [4, 409]}}}, {id: 409, type: {path: [xcm, v3, traits, Error], def: {variants: [{name: Overflow, index: 0}, {name: Unimplemented, index: 1}, {name: UntrustedReserveLocation, index: 2}, {name: UntrustedTeleportLocation, index: 3}, {name: LocationFull, index: 4}, {name: LocationNotInvertible, index: 5}, {name: BadOrigin, index: 6}, {name: InvalidLocation, index: 7}, {name: AssetNotFound, index: 8}, {name: FailedToTransactAsset, index: 9}, {name: NotWithdrawable, index: 10}, {name: LocationCannotHold, index: 11}, {name: ExceedsMaxMessageSize, index: 12}, {name: DestinationUnsupported, index: 13}, {name: Transport, index: 14}, {name: Unroutable, index: 15}, {name: UnknownClaim, index: 16}, {name: FailedToDecode, index: 17}, {name: MaxWeightInvalid, index: 18}, {name: NotHoldingFees, index: 19}, {name: TooExpensive, index: 20}, {name: Trap, fields: [{type: 11, typeName: u64}], index: 21}, {name: ExpectationFalse, index: 22}, {name: PalletNotFound, index: 23}, {name: NameMismatch, index: 24}, {name: VersionIncompatible, index: 25}, {name: HoldingWouldOverflow, index: 26}, {name: ExportError, index: 27}, {name: ReanchorFailed, index: 28}, {name: NoDeal, index: 29}, {name: FeesNotMet, index: 30}, {name: LockError, index: 31}, {name: NoPermission, index: 32}, {name: Unanchored, index: 33}, {name: NotDepositable, index: 34}, {name: UnhandledXcmVersion, index: 35}, {name: WeightLimitReached, fields: [{type: 9, typeName: Weight}], index: 36}, {name: Barrier, index: 37}, {name: WeightNotComputable, index: 38}, {name: ExceedsStackLimit, index: 39}]}}}, {id: 410, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 411}, {name: S, type: null}], def: {fields: [{type: 413, typeName: Vec<T>}]}}}, {id: 411, type: {path: [xcm, v3, PalletInfo], def: {fields: [{name: index, type: 63, typeName: u32}, {name: name, type: 412, typeName: BoundedVec<u8, MaxPalletNameLen>}, {name: module_name, type: 412, typeName: BoundedVec<u8, MaxPalletNameLen>}, {name: major, type: 63, typeName: u32}, {name: minor, type: 63, typeName: u32}, {name: patch, type: 63, typeName: u32}]}}}, {id: 412, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 413, type: {def: {type: 411}}}, {id: 414, type: {path: [xcm, v3, MaybeErrorCode], def: {variants: [{name: Success, index: 0}, {name: Error, fields: [{type: 415, typeName: BoundedVec<u8, MaxDispatchErrorLen>}], index: 1}, {name: TruncatedError, fields: [{type: 415, typeName: BoundedVec<u8, MaxDispatchErrorLen>}], index: 2}]}}}, {id: 415, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 416, type: {path: [Option], params: [{name: T, type: 60}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 60}], index: 1}]}}}, {id: 417, type: {path: [xcm, v3, QueryResponseInfo], def: {fields: [{name: destination, type: 60, typeName: MultiLocation}, {name: query_id, type: 10, typeName: QueryId}, {name: max_weight, type: 9, typeName: Weight}]}}}, {id: 418, type: {path: [xcm, v3, multiasset, MultiAssetFilter], def: {variants: [{name: Definite, fields: [{type: 401, typeName: MultiAssets}], index: 0}, {name: Wild, fields: [{type: 419, typeName: WildMultiAsset}], index: 1}]}}}, {id: 419, type: {path: [xcm, v3, multiasset, WildMultiAsset], def: {variants: [{name: All, index: 0}, {name: AllOf, fields: [{name: id, type: 69, typeName: AssetId}, {name: fun, type: 420, typeName: WildFungibility}], index: 1}, {name: AllCounted, fields: [{type: 63, typeName: u32}], index: 2}, {name: AllOfCounted, fields: [{name: id, type: 69, typeName: AssetId}, {name: fun, type: 420, typeName: WildFungibility}, {name: count, type: 63, typeName: u32}], index: 3}]}}}, {id: 420, type: {path: [xcm, v3, multiasset, WildFungibility], def: {variants: [{name: Fungible, index: 0}, {name: NonFungible, index: 1}]}}}, {id: 421, type: {path: [xcm, v3, WeightLimit], def: {variants: [{name: Unlimited, index: 0}, {name: Limited, fields: [{type: 9, typeName: Weight}], index: 1}]}}}, {id: 422, type: {path: [staging_xcm, v4, Xcm], params: [{name: Call, type: null}], def: {fields: [{type: 423, typeName: Vec<Instruction<Call>>}]}}}, {id: 423, type: {def: {type: 424}}}, {id: 424, type: {path: [staging_xcm, v4, Instruction], params: [{name: Call, type: null}], def: {variants: [{name: WithdrawAsset, fields: [{type: 425, typeName: Assets}], index: 0}, {name: ReserveAssetDeposited, fields: [{type: 425, typeName: Assets}], index: 1}, {name: ReceiveTeleportedAsset, fields: [{type: 425, typeName: Assets}], index: 2}, {name: QueryResponse, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: response, type: 430, typeName: Response}, {name: max_weight, type: 9, typeName: Weight}, {name: querier, type: 435, typeName: Option<Location>}], index: 3}, {name: TransferAsset, fields: [{name: assets, type: 425, typeName: Assets}, {name: beneficiary, type: 70, typeName: Location}], index: 4}, {name: TransferReserveAsset, fields: [{name: assets, type: 425, typeName: Assets}, {name: dest, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 5}, {name: Transact, fields: [{name: origin_kind, type: 392, typeName: OriginKind}, {name: require_weight_at_most, type: 9, typeName: Weight}, {name: call, type: 393, typeName: DoubleEncoded<Call>}], index: 6}, {name: HrmpNewChannelOpenRequest, fields: [{name: sender, type: 63, typeName: u32}, {name: max_message_size, type: 63, typeName: u32}, {name: max_capacity, type: 63, typeName: u32}], index: 7}, {name: HrmpChannelAccepted, fields: [{name: recipient, type: 63, typeName: u32}], index: 8}, {name: HrmpChannelClosing, fields: [{name: initiator, type: 63, typeName: u32}, {name: sender, type: 63, typeName: u32}, {name: recipient, type: 63, typeName: u32}], index: 9}, {name: ClearOrigin, index: 10}, {name: DescendOrigin, fields: [{type: 71, typeName: InteriorLocation}], index: 11}, {name: ReportError, fields: [{type: 436, typeName: QueryResponseInfo}], index: 12}, {name: DepositAsset, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: beneficiary, type: 70, typeName: Location}], index: 13}, {name: DepositReserveAsset, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: dest, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 14}, {name: ExchangeAsset, fields: [{name: give, type: 437, typeName: AssetFilter}, {name: want, type: 425, typeName: Assets}, {name: maximal, type: 30, typeName: bool}], index: 15}, {name: InitiateReserveWithdraw, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: reserve, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 16}, {name: InitiateTeleport, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: dest, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 17}, {name: ReportHolding, fields: [{name: response_info, type: 436, typeName: QueryResponseInfo}, {name: assets, type: 437, typeName: AssetFilter}], index: 18}, {name: BuyExecution, fields: [{name: fees, type: 427, typeName: Asset}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 19}, {name: RefundSurplus, index: 20}, {name: SetErrorHandler, fields: [{type: 422, typeName: Xcm<Call>}], index: 21}, {name: SetAppendix, fields: [{type: 422, typeName: Xcm<Call>}], index: 22}, {name: ClearError, index: 23}, {name: ClaimAsset, fields: [{name: assets, type: 425, typeName: Assets}, {name: ticket, type: 70, typeName: Location}], index: 24}, {name: Trap, fields: [{type: 10, typeName: u64}], index: 25}, {name: SubscribeVersion, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: max_response_weight, type: 9, typeName: Weight}], index: 26}, {name: UnsubscribeVersion, index: 27}, {name: BurnAsset, fields: [{type: 425, typeName: Assets}], index: 28}, {name: ExpectAsset, fields: [{type: 425, typeName: Assets}], index: 29}, {name: ExpectOrigin, fields: [{type: 435, typeName: Option<Location>}], index: 30}, {name: ExpectError, fields: [{type: 407, typeName: Option<(u32, Error)>}], index: 31}, {name: ExpectTransactStatus, fields: [{type: 414, typeName: MaybeErrorCode}], index: 32}, {name: QueryPallet, fields: [{name: module_name, type: 13, typeName: Vec<u8>}, {name: response_info, type: 436, typeName: QueryResponseInfo}], index: 33}, {name: ExpectPallet, fields: [{name: index, type: 63, typeName: u32}, {name: name, type: 13, typeName: Vec<u8>}, {name: module_name, type: 13, typeName: Vec<u8>}, {name: crate_major, type: 63, typeName: u32}, {name: min_crate_minor, type: 63, typeName: u32}], index: 34}, {name: ReportTransactStatus, fields: [{type: 436, typeName: QueryResponseInfo}], index: 35}, {name: ClearTransactStatus, index: 36}, {name: UniversalOrigin, fields: [{type: 73, typeName: Junction}], index: 37}, {name: ExportMessage, fields: [{name: network, type: 75, typeName: NetworkId}, {name: destination, type: 71, typeName: InteriorLocation}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 38}, {name: LockAsset, fields: [{name: asset, type: 427, typeName: Asset}, {name: unlocker, type: 70, typeName: Location}], index: 39}, {name: UnlockAsset, fields: [{name: asset, type: 427, typeName: Asset}, {name: target, type: 70, typeName: Location}], index: 40}, {name: NoteUnlockable, fields: [{name: asset, type: 427, typeName: Asset}, {name: owner, type: 70, typeName: Location}], index: 41}, {name: RequestUnlock, fields: [{name: asset, type: 427, typeName: Asset}, {name: locker, type: 70, typeName: Location}], index: 42}, {name: SetFeesMode, fields: [{name: jit_withdraw, type: 30, typeName: bool}], index: 43}, {name: SetTopic, fields: [{type: 1, typeName: [u8; 32]}], index: 44}, {name: ClearTopic, index: 45}, {name: AliasOrigin, fields: [{type: 70, typeName: Location}], index: 46}, {name: UnpaidExecution, fields: [{name: weight_limit, type: 421, typeName: WeightLimit}, {name: check_origin, type: 435, typeName: Option<Location>}], index: 47}]}}}, {id: 425, type: {path: [staging_xcm, v4, asset, Assets], def: {fields: [{type: 426, typeName: Vec<Asset>}]}}}, {id: 426, type: {def: {type: 427}}}, {id: 427, type: {path: [staging_xcm, v4, asset, Asset], def: {fields: [{name: id, type: 83, typeName: AssetId}, {name: fun, type: 428, typeName: Fungibility}]}}}, {id: 428, type: {path: [staging_xcm, v4, asset, Fungibility], def: {variants: [{name: Fungible, fields: [{type: 55, typeName: u128}], index: 0}, {name: NonFungible, fields: [{type: 429, typeName: AssetInstance}], index: 1}]}}}, {id: 429, type: {path: [staging_xcm, v4, asset, AssetInstance], def: {variants: [{name: Undefined, index: 0}, {name: Index, fields: [{type: 55, typeName: u128}], index: 1}, {name: Array4, fields: [{type: 17, typeName: [u8; 4]}], index: 2}, {name: Array8, fields: [{type: 387, typeName: [u8; 8]}], index: 3}, {name: Array16, fields: [{type: 42, typeName: [u8; 16]}], index: 4}, {name: Array32, fields: [{type: 1, typeName: [u8; 32]}], index: 5}]}}}, {id: 430, type: {path: [staging_xcm, v4, Response], def: {variants: [{name: Null, index: 0}, {name: Assets, fields: [{type: 425, typeName: Assets}], index: 1}, {name: ExecutionResult, fields: [{type: 407, typeName: Option<(u32, Error)>}], index: 2}, {name: Version, fields: [{type: 4, typeName: super::Version}], index: 3}, {name: PalletsInfo, fields: [{type: 431, typeName: BoundedVec<PalletInfo, MaxPalletsInfo>}], index: 4}, {name: DispatchResult, fields: [{type: 414, typeName: MaybeErrorCode}], index: 5}]}}}, {id: 431, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 432}, {name: S, type: null}], def: {fields: [{type: 434, typeName: Vec<T>}]}}}, {id: 432, type: {path: [staging_xcm, v4, PalletInfo], def: {fields: [{name: index, type: 63, typeName: u32}, {name: name, type: 433, typeName: BoundedVec<u8, MaxPalletNameLen>}, {name: module_name, type: 433, typeName: BoundedVec<u8, MaxPalletNameLen>}, {name: major, type: 63, typeName: u32}, {name: minor, type: 63, typeName: u32}, {name: patch, type: 63, typeName: u32}]}}}, {id: 433, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 434, type: {def: {type: 432}}}, {id: 435, type: {path: [Option], params: [{name: T, type: 70}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 70}], index: 1}]}}}, {id: 436, type: {path: [staging_xcm, v4, QueryResponseInfo], def: {fields: [{name: destination, type: 70, typeName: Location}, {name: query_id, type: 10, typeName: QueryId}, {name: max_weight, type: 9, typeName: Weight}]}}}, {id: 437, type: {path: [staging_xcm, v4, asset, AssetFilter], def: {variants: [{name: Definite, fields: [{type: 425, typeName: Assets}], index: 0}, {name: Wild, fields: [{type: 438, typeName: WildAsset}], index: 1}]}}}, {id: 438, type: {path: [staging_xcm, v4, asset, WildAsset], def: {variants: [{name: All, index: 0}, {name: AllOf, fields: [{name: id, type: 83, typeName: AssetId}, {name: fun, type: 439, typeName: WildFungibility}], index: 1}, {name: AllCounted, fields: [{type: 63, typeName: u32}], index: 2}, {name: AllOfCounted, fields: [{name: id, type: 83, typeName: AssetId}, {name: fun, type: 439, typeName: WildFungibility}, {name: count, type: 63, typeName: u32}], index: 3}]}}}, {id: 439, type: {path: [staging_xcm, v4, asset, WildFungibility], def: {variants: [{name: Fungible, index: 0}, {name: NonFungible, index: 1}]}}}, {id: 440, type: {path: [xcm, VersionedAssets], def: {variants: [{name: V2, fields: [{type: 381, typeName: v2::MultiAssets}], index: 1}, {name: V3, fields: [{type: 401, typeName: v3::MultiAssets}], index: 3}, {name: V4, fields: [{type: 425, typeName: v4::Assets}], index: 4}]}}}, {id: 441, type: {path: [xcm, VersionedXcm], params: [{name: RuntimeCall, type: null}], def: {variants: [{name: V2, fields: [{type: 442, typeName: v2::Xcm<RuntimeCall>}], index: 2}, {name: V3, fields: [{type: 446, typeName: v3::Xcm<RuntimeCall>}], index: 3}, {name: V4, fields: [{type: 449, typeName: v4::Xcm<RuntimeCall>}], index: 4}]}}}, {id: 442, type: {path: [xcm, v2, Xcm], params: [{name: RuntimeCall, type: null}], def: {fields: [{type: 443, typeName: Vec<Instruction<RuntimeCall>>}]}}}, {id: 443, type: {def: {type: 444}}}, {id: 444, type: {path: [xcm, v2, Instruction], params: [{name: RuntimeCall, type: null}], def: {variants: [{name: WithdrawAsset, fields: [{type: 381, typeName: MultiAssets}], index: 0}, {name: ReserveAssetDeposited, fields: [{type: 381, typeName: MultiAssets}], index: 1}, {name: ReceiveTeleportedAsset, fields: [{type: 381, typeName: MultiAssets}], index: 2}, {name: QueryResponse, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: response, type: 388, typeName: Response}, {name: max_weight, type: 10, typeName: u64}], index: 3}, {name: TransferAsset, fields: [{name: assets, type: 381, typeName: MultiAssets}, {name: beneficiary, type: 85, typeName: MultiLocation}], index: 4}, {name: TransferReserveAsset, fields: [{name: assets, type: 381, typeName: MultiAssets}, {name: dest, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 5}, {name: Transact, fields: [{name: origin_type, type: 392, typeName: OriginKind}, {name: require_weight_at_most, type: 10, typeName: u64}, {name: call, type: 445, typeName: DoubleEncoded<RuntimeCall>}], index: 6}, {name: HrmpNewChannelOpenRequest, fields: [{name: sender, type: 63, typeName: u32}, {name: max_message_size, type: 63, typeName: u32}, {name: max_capacity, type: 63, typeName: u32}], index: 7}, {name: HrmpChannelAccepted, fields: [{name: recipient, type: 63, typeName: u32}], index: 8}, {name: HrmpChannelClosing, fields: [{name: initiator, type: 63, typeName: u32}, {name: sender, type: 63, typeName: u32}, {name: recipient, type: 63, typeName: u32}], index: 9}, {name: ClearOrigin, index: 10}, {name: DescendOrigin, fields: [{type: 86, typeName: InteriorMultiLocation}], index: 11}, {name: ReportError, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: dest, type: 85, typeName: MultiLocation}, {name: max_response_weight, type: 10, typeName: u64}], index: 12}, {name: DepositAsset, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: max_assets, type: 63, typeName: u32}, {name: beneficiary, type: 85, typeName: MultiLocation}], index: 13}, {name: DepositReserveAsset, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: max_assets, type: 63, typeName: u32}, {name: dest, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 14}, {name: ExchangeAsset, fields: [{name: give, type: 394, typeName: MultiAssetFilter}, {name: receive, type: 381, typeName: MultiAssets}], index: 15}, {name: InitiateReserveWithdraw, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: reserve, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 16}, {name: InitiateTeleport, fields: [{name: assets, type: 394, typeName: MultiAssetFilter}, {name: dest, type: 85, typeName: MultiLocation}, {name: xcm, type: 378, typeName: Xcm<()>}], index: 17}, {name: QueryHolding, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: dest, type: 85, typeName: MultiLocation}, {name: assets, type: 394, typeName: MultiAssetFilter}, {name: max_response_weight, type: 10, typeName: u64}], index: 18}, {name: BuyExecution, fields: [{name: fees, type: 383, typeName: MultiAsset}, {name: weight_limit, type: 397, typeName: WeightLimit}], index: 19}, {name: RefundSurplus, index: 20}, {name: SetErrorHandler, fields: [{type: 442, typeName: Xcm<RuntimeCall>}], index: 21}, {name: SetAppendix, fields: [{type: 442, typeName: Xcm<RuntimeCall>}], index: 22}, {name: ClearError, index: 23}, {name: ClaimAsset, fields: [{name: assets, type: 381, typeName: MultiAssets}, {name: ticket, type: 85, typeName: MultiLocation}], index: 24}, {name: Trap, fields: [{type: 10, typeName: u64}], index: 25}, {name: SubscribeVersion, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: max_response_weight, type: 10, typeName: u64}], index: 26}, {name: UnsubscribeVersion, index: 27}]}}}, {id: 445, type: {path: [xcm, double_encoded, DoubleEncoded], params: [{name: T, type: null}], def: {fields: [{name: encoded, type: 13, typeName: Vec<u8>}]}}}, {id: 446, type: {path: [xcm, v3, Xcm], params: [{name: Call, type: null}], def: {fields: [{type: 447, typeName: Vec<Instruction<Call>>}]}}}, {id: 447, type: {def: {type: 448}}}, {id: 448, type: {path: [xcm, v3, Instruction], params: [{name: Call, type: null}], def: {variants: [{name: WithdrawAsset, fields: [{type: 401, typeName: MultiAssets}], index: 0}, {name: ReserveAssetDeposited, fields: [{type: 401, typeName: MultiAssets}], index: 1}, {name: ReceiveTeleportedAsset, fields: [{type: 401, typeName: MultiAssets}], index: 2}, {name: QueryResponse, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: response, type: 406, typeName: Response}, {name: max_weight, type: 9, typeName: Weight}, {name: querier, type: 416, typeName: Option<MultiLocation>}], index: 3}, {name: TransferAsset, fields: [{name: assets, type: 401, typeName: MultiAssets}, {name: beneficiary, type: 60, typeName: MultiLocation}], index: 4}, {name: TransferReserveAsset, fields: [{name: assets, type: 401, typeName: MultiAssets}, {name: dest, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 5}, {name: Transact, fields: [{name: origin_kind, type: 392, typeName: OriginKind}, {name: require_weight_at_most, type: 9, typeName: Weight}, {name: call, type: 445, typeName: DoubleEncoded<Call>}], index: 6}, {name: HrmpNewChannelOpenRequest, fields: [{name: sender, type: 63, typeName: u32}, {name: max_message_size, type: 63, typeName: u32}, {name: max_capacity, type: 63, typeName: u32}], index: 7}, {name: HrmpChannelAccepted, fields: [{name: recipient, type: 63, typeName: u32}], index: 8}, {name: HrmpChannelClosing, fields: [{name: initiator, type: 63, typeName: u32}, {name: sender, type: 63, typeName: u32}, {name: recipient, type: 63, typeName: u32}], index: 9}, {name: ClearOrigin, index: 10}, {name: DescendOrigin, fields: [{type: 61, typeName: InteriorMultiLocation}], index: 11}, {name: ReportError, fields: [{type: 417, typeName: QueryResponseInfo}], index: 12}, {name: DepositAsset, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: beneficiary, type: 60, typeName: MultiLocation}], index: 13}, {name: DepositReserveAsset, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: dest, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 14}, {name: ExchangeAsset, fields: [{name: give, type: 418, typeName: MultiAssetFilter}, {name: want, type: 401, typeName: MultiAssets}, {name: maximal, type: 30, typeName: bool}], index: 15}, {name: InitiateReserveWithdraw, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: reserve, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 16}, {name: InitiateTeleport, fields: [{name: assets, type: 418, typeName: MultiAssetFilter}, {name: dest, type: 60, typeName: MultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 17}, {name: ReportHolding, fields: [{name: response_info, type: 417, typeName: QueryResponseInfo}, {name: assets, type: 418, typeName: MultiAssetFilter}], index: 18}, {name: BuyExecution, fields: [{name: fees, type: 403, typeName: MultiAsset}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 19}, {name: RefundSurplus, index: 20}, {name: SetErrorHandler, fields: [{type: 446, typeName: Xcm<Call>}], index: 21}, {name: SetAppendix, fields: [{type: 446, typeName: Xcm<Call>}], index: 22}, {name: ClearError, index: 23}, {name: ClaimAsset, fields: [{name: assets, type: 401, typeName: MultiAssets}, {name: ticket, type: 60, typeName: MultiLocation}], index: 24}, {name: Trap, fields: [{type: 10, typeName: u64}], index: 25}, {name: SubscribeVersion, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: max_response_weight, type: 9, typeName: Weight}], index: 26}, {name: UnsubscribeVersion, index: 27}, {name: BurnAsset, fields: [{type: 401, typeName: MultiAssets}], index: 28}, {name: ExpectAsset, fields: [{type: 401, typeName: MultiAssets}], index: 29}, {name: ExpectOrigin, fields: [{type: 416, typeName: Option<MultiLocation>}], index: 30}, {name: ExpectError, fields: [{type: 407, typeName: Option<(u32, Error)>}], index: 31}, {name: ExpectTransactStatus, fields: [{type: 414, typeName: MaybeErrorCode}], index: 32}, {name: QueryPallet, fields: [{name: module_name, type: 13, typeName: Vec<u8>}, {name: response_info, type: 417, typeName: QueryResponseInfo}], index: 33}, {name: ExpectPallet, fields: [{name: index, type: 63, typeName: u32}, {name: name, type: 13, typeName: Vec<u8>}, {name: module_name, type: 13, typeName: Vec<u8>}, {name: crate_major, type: 63, typeName: u32}, {name: min_crate_minor, type: 63, typeName: u32}], index: 34}, {name: ReportTransactStatus, fields: [{type: 417, typeName: QueryResponseInfo}], index: 35}, {name: ClearTransactStatus, index: 36}, {name: UniversalOrigin, fields: [{type: 62, typeName: Junction}], index: 37}, {name: ExportMessage, fields: [{name: network, type: 65, typeName: NetworkId}, {name: destination, type: 61, typeName: InteriorMultiLocation}, {name: xcm, type: 398, typeName: Xcm<()>}], index: 38}, {name: LockAsset, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: unlocker, type: 60, typeName: MultiLocation}], index: 39}, {name: UnlockAsset, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: target, type: 60, typeName: MultiLocation}], index: 40}, {name: NoteUnlockable, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: owner, type: 60, typeName: MultiLocation}], index: 41}, {name: RequestUnlock, fields: [{name: asset, type: 403, typeName: MultiAsset}, {name: locker, type: 60, typeName: MultiLocation}], index: 42}, {name: SetFeesMode, fields: [{name: jit_withdraw, type: 30, typeName: bool}], index: 43}, {name: SetTopic, fields: [{type: 1, typeName: [u8; 32]}], index: 44}, {name: ClearTopic, index: 45}, {name: AliasOrigin, fields: [{type: 60, typeName: MultiLocation}], index: 46}, {name: UnpaidExecution, fields: [{name: weight_limit, type: 421, typeName: WeightLimit}, {name: check_origin, type: 416, typeName: Option<MultiLocation>}], index: 47}]}}}, {id: 449, type: {path: [staging_xcm, v4, Xcm], params: [{name: Call, type: null}], def: {fields: [{type: 450, typeName: Vec<Instruction<Call>>}]}}}, {id: 450, type: {def: {type: 451}}}, {id: 451, type: {path: [staging_xcm, v4, Instruction], params: [{name: Call, type: null}], def: {variants: [{name: WithdrawAsset, fields: [{type: 425, typeName: Assets}], index: 0}, {name: ReserveAssetDeposited, fields: [{type: 425, typeName: Assets}], index: 1}, {name: ReceiveTeleportedAsset, fields: [{type: 425, typeName: Assets}], index: 2}, {name: QueryResponse, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: response, type: 430, typeName: Response}, {name: max_weight, type: 9, typeName: Weight}, {name: querier, type: 435, typeName: Option<Location>}], index: 3}, {name: TransferAsset, fields: [{name: assets, type: 425, typeName: Assets}, {name: beneficiary, type: 70, typeName: Location}], index: 4}, {name: TransferReserveAsset, fields: [{name: assets, type: 425, typeName: Assets}, {name: dest, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 5}, {name: Transact, fields: [{name: origin_kind, type: 392, typeName: OriginKind}, {name: require_weight_at_most, type: 9, typeName: Weight}, {name: call, type: 445, typeName: DoubleEncoded<Call>}], index: 6}, {name: HrmpNewChannelOpenRequest, fields: [{name: sender, type: 63, typeName: u32}, {name: max_message_size, type: 63, typeName: u32}, {name: max_capacity, type: 63, typeName: u32}], index: 7}, {name: HrmpChannelAccepted, fields: [{name: recipient, type: 63, typeName: u32}], index: 8}, {name: HrmpChannelClosing, fields: [{name: initiator, type: 63, typeName: u32}, {name: sender, type: 63, typeName: u32}, {name: recipient, type: 63, typeName: u32}], index: 9}, {name: ClearOrigin, index: 10}, {name: DescendOrigin, fields: [{type: 71, typeName: InteriorLocation}], index: 11}, {name: ReportError, fields: [{type: 436, typeName: QueryResponseInfo}], index: 12}, {name: DepositAsset, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: beneficiary, type: 70, typeName: Location}], index: 13}, {name: DepositReserveAsset, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: dest, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 14}, {name: ExchangeAsset, fields: [{name: give, type: 437, typeName: AssetFilter}, {name: want, type: 425, typeName: Assets}, {name: maximal, type: 30, typeName: bool}], index: 15}, {name: InitiateReserveWithdraw, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: reserve, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 16}, {name: InitiateTeleport, fields: [{name: assets, type: 437, typeName: AssetFilter}, {name: dest, type: 70, typeName: Location}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 17}, {name: ReportHolding, fields: [{name: response_info, type: 436, typeName: QueryResponseInfo}, {name: assets, type: 437, typeName: AssetFilter}], index: 18}, {name: BuyExecution, fields: [{name: fees, type: 427, typeName: Asset}, {name: weight_limit, type: 421, typeName: WeightLimit}], index: 19}, {name: RefundSurplus, index: 20}, {name: SetErrorHandler, fields: [{type: 449, typeName: Xcm<Call>}], index: 21}, {name: SetAppendix, fields: [{type: 449, typeName: Xcm<Call>}], index: 22}, {name: ClearError, index: 23}, {name: ClaimAsset, fields: [{name: assets, type: 425, typeName: Assets}, {name: ticket, type: 70, typeName: Location}], index: 24}, {name: Trap, fields: [{type: 10, typeName: u64}], index: 25}, {name: SubscribeVersion, fields: [{name: query_id, type: 10, typeName: QueryId}, {name: max_response_weight, type: 9, typeName: Weight}], index: 26}, {name: UnsubscribeVersion, index: 27}, {name: BurnAsset, fields: [{type: 425, typeName: Assets}], index: 28}, {name: ExpectAsset, fields: [{type: 425, typeName: Assets}], index: 29}, {name: ExpectOrigin, fields: [{type: 435, typeName: Option<Location>}], index: 30}, {name: ExpectError, fields: [{type: 407, typeName: Option<(u32, Error)>}], index: 31}, {name: ExpectTransactStatus, fields: [{type: 414, typeName: MaybeErrorCode}], index: 32}, {name: QueryPallet, fields: [{name: module_name, type: 13, typeName: Vec<u8>}, {name: response_info, type: 436, typeName: QueryResponseInfo}], index: 33}, {name: ExpectPallet, fields: [{name: index, type: 63, typeName: u32}, {name: name, type: 13, typeName: Vec<u8>}, {name: module_name, type: 13, typeName: Vec<u8>}, {name: crate_major, type: 63, typeName: u32}, {name: min_crate_minor, type: 63, typeName: u32}], index: 34}, {name: ReportTransactStatus, fields: [{type: 436, typeName: QueryResponseInfo}], index: 35}, {name: ClearTransactStatus, index: 36}, {name: UniversalOrigin, fields: [{type: 73, typeName: Junction}], index: 37}, {name: ExportMessage, fields: [{name: network, type: 75, typeName: NetworkId}, {name: destination, type: 71, typeName: InteriorLocation}, {name: xcm, type: 422, typeName: Xcm<()>}], index: 38}, {name: LockAsset, fields: [{name: asset, type: 427, typeName: Asset}, {name: unlocker, type: 70, typeName: Location}], index: 39}, {name: UnlockAsset, fields: [{name: asset, type: 427, typeName: Asset}, {name: target, type: 70, typeName: Location}], index: 40}, {name: NoteUnlockable, fields: [{name: asset, type: 427, typeName: Asset}, {name: owner, type: 70, typeName: Location}], index: 41}, {name: RequestUnlock, fields: [{name: asset, type: 427, typeName: Asset}, {name: locker, type: 70, typeName: Location}], index: 42}, {name: SetFeesMode, fields: [{name: jit_withdraw, type: 30, typeName: bool}], index: 43}, {name: SetTopic, fields: [{type: 1, typeName: [u8; 32]}], index: 44}, {name: ClearTopic, index: 45}, {name: AliasOrigin, fields: [{type: 70, typeName: Location}], index: 46}, {name: UnpaidExecution, fields: [{name: weight_limit, type: 421, typeName: WeightLimit}, {name: check_origin, type: 435, typeName: Option<Location>}], index: 47}]}}}, {id: 452, type: {path: [staging_xcm_executor, traits, asset_transfer, TransferType], def: {variants: [{name: Teleport, index: 0}, {name: LocalReserve, index: 1}, {name: DestinationReserve, index: 2}, {name: RemoteReserve, fields: [{type: 84, typeName: VersionedLocation}], index: 3}]}}}, {id: 453, type: {path: [xcm, VersionedAssetId], def: {variants: [{name: V3, fields: [{type: 69, typeName: v3::AssetId}], index: 3}, {name: V4, fields: [{type: 83, typeName: v4::AssetId}], index: 4}]}}}, {id: 454, type: {path: [pallet_message_queue, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: reap_page, fields: [{name: message_origin, type: 455, typeName: MessageOriginOf<T>}, {name: page_index, type: 4, typeName: PageIndex}], index: 0, docs: [See [`Pallet::reap_page`].]}, {name: execute_overweight, fields: [{name: message_origin, type: 455, typeName: MessageOriginOf<T>}, {name: page, type: 4, typeName: PageIndex}, {name: index, type: 4, typeName: T::Size}, {name: weight_limit, type: 9, typeName: Weight}], index: 1, docs: [See [`Pallet::execute_overweight`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 455, type: {path: [polkadot_runtime_parachains, inclusion, AggregateMessageOrigin], def: {variants: [{name: Ump, fields: [{type: 456, typeName: UmpQueueId}], index: 0}]}}}, {id: 456, type: {path: [polkadot_runtime_parachains, inclusion, UmpQueueId], def: {variants: [{name: Para, fields: [{type: 165, typeName: ParaId}], index: 0}]}}}, {id: 457, type: {path: [pallet_asset_rate, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: create, fields: [{name: asset_kind, type: 59, typeName: Box<T::AssetKind>}, {name: rate, type: 458, typeName: FixedU128}], index: 0, docs: [See [`Pallet::create`].]}, {name: update, fields: [{name: asset_kind, type: 59, typeName: Box<T::AssetKind>}, {name: rate, type: 458, typeName: FixedU128}], index: 1, docs: [See [`Pallet::update`].]}, {name: remove, fields: [{name: asset_kind, type: 59, typeName: Box<T::AssetKind>}], index: 2, docs: [See [`Pallet::remove`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 458, type: {path: [sp_arithmetic, fixed_point, FixedU128], def: {fields: [{type: 6, typeName: u128}]}}}, {id: 459, type: {path: [pallet_beefy, pallet, Call], params: [{name: T, type: null}], def: {variants: [{name: report_equivocation, fields: [{name: equivocation_proof, type: 460, typeName: Box<EquivocationProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId
as RuntimeAppPublic>::Signature,>,>}, {name: key_owner_proof, type: 106, typeName: T::KeyOwnerProof}], index: 0, docs: [See [`Pallet::report_equivocation`].]}, {name: report_equivocation_unsigned, fields: [{name: equivocation_proof, type: 460, typeName: Box<EquivocationProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId
as RuntimeAppPublic>::Signature,>,>}, {name: key_owner_proof, type: 106, typeName: T::KeyOwnerProof}], index: 1, docs: [See [`Pallet::report_equivocation_unsigned`].]}, {name: set_new_genesis, fields: [{name: delay_in_blocks, type: 4, typeName: BlockNumberFor<T>}], index: 2, docs: [See [`Pallet::set_new_genesis`].]}]}, docs: [Contains a variant per dispatchable extrinsic that this pallet has.]}}, {id: 460, type: {path: [sp_consensus_beefy, EquivocationProof], params: [{name: Number, type: 4}, {name: Id, type: 138}, {name: Signature, type: 461}], def: {fields: [{name: first, type: 462, typeName: VoteMessage<Number, Id, Signature>}, {name: second, type: 462, typeName: VoteMessage<Number, Id, Signature>}]}}}, {id: 461, type: {path: [sp_consensus_beefy, ecdsa_crypto, Signature], def: {fields: [{type: 370, typeName: ecdsa::Signature}]}}}, {id: 462, type: {path: [sp_consensus_beefy, VoteMessage], params: [{name: Number, type: 4}, {name: Id, type: 138}, {name: Signature, type: 461}], def: {fields: [{name: commitment, type: 463, typeName: Commitment<Number>}, {name: id, type: 138, typeName: Id}, {name: signature, type: 461, typeName: Signature}]}}}, {id: 463, type: {path: [sp_consensus_beefy, commitment, Commitment], params: [{name: TBlockNumber, type: 4}], def: {fields: [{name: payload, type: 464, typeName: Payload}, {name: block_number, type: 4, typeName: TBlockNumber}, {name: validator_set_id, type: 11, typeName: ValidatorSetId}]}}}, {id: 464, type: {path: [sp_consensus_beefy, payload, Payload], def: {fields: [{type: 465, typeName: Vec<(BeefyPayloadId, Vec<u8>)>}]}}}, {id: 465, type: {def: {type: 466}}}, {id: 466, type: {def: {fields: [467, 13]}}}, {id: 467, type: {def: {len: 2, type: 2}}}, {id: 468, type: {path: [sp_runtime, traits, BlakeTwo256], def: {}}}, {id: 469, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 470, type: {path: [pallet_conviction_voting, types, Tally], params: [{name: Votes, type: 6}, {name: Total, type: null}], def: {fields: [{name: ayes, type: 6, typeName: Votes}, {name: nays, type: 6, typeName: Votes}, {name: support, type: 6, typeName: Votes}]}}}, {id: 471, type: {path: [pallet_ranked_collective, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: MemberAdded, fields: [{name: who, type: 0, typeName: T::AccountId}], index: 0, docs: [A member `who` has been added.]}, {name: RankChanged, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: rank, type: 94, typeName: Rank}], index: 1, docs: [The member `who`se rank has been changed to the given `rank`.]}, {name: MemberRemoved, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: rank, type: 94, typeName: Rank}], index: 2, docs: [The member `who` of given `rank` has been removed from the collective.]}, {name: Voted, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: poll, type: 4, typeName: PollIndexOf<T, I>}, {name: vote, type: 472, typeName: VoteRecord}, {name: tally, type: 473, typeName: TallyOf<T, I>}], index: 3, docs: [The member `who` has voted for the `poll` with the given `vote` leading to an updated, `tally`.]}, {name: MemberExchanged, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: new_who, type: 0, typeName: T::AccountId}], index: 4, docs: [The member `who` had their `AccountId` changed to `new_who`.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 472, type: {path: [pallet_ranked_collective, VoteRecord], def: {variants: [{name: Aye, fields: [{type: 4, typeName: Votes}], index: 0}, {name: Nay, fields: [{type: 4, typeName: Votes}], index: 1}]}}}, {id: 473, type: {path: [pallet_ranked_collective, Tally], params: [{name: T, type: null}, {name: I, type: null}, {name: M, type: null}], def: {fields: [{name: bare_ayes, type: 4, typeName: MemberIndex}, {name: ayes, type: 4, typeName: Votes}, {name: nays, type: 4, typeName: Votes}]}}}, {id: 474, type: {path: [pallet_referenda, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Submitted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: track, type: 94, typeName: TrackIdOf<T, I>, docs: [The track (and by extension proposal dispatch origin) of this referendum.]}, {name: proposal, type: 95, typeName: BoundedCallOf<T, I>, docs: [The proposal for the referendum.]}], index: 0, docs: [A referendum has been submitted.]}, {name: DecisionDepositPlaced, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 1, docs: [The decision deposit has been placed.]}, {name: DecisionDepositRefunded, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 2, docs: [The decision deposit has been refunded.]}, {name: DepositSlashed, fields: [{name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 3, docs: [A deposit has been slashed.]}, {name: DecisionStarted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: track, type: 94, typeName: TrackIdOf<T, I>, docs: [The track (and by extension proposal dispatch origin) of this referendum.]}, {name: proposal, type: 95, typeName: BoundedCallOf<T, I>, docs: [The proposal for the referendum.]}, {name: tally, type: 473, typeName: T::Tally, docs: [The current tally of votes in this referendum.]}], index: 4, docs: [A referendum has moved into the deciding phase.]}, {name: ConfirmStarted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}], index: 5}, {name: ConfirmAborted, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}], index: 6}, {name: Confirmed, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 473, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 7, docs: [A referendum has ended its confirmation phase and is ready for approval.]}, {name: Approved, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}], index: 8, docs: [A referendum has been approved and its proposal has been scheduled.]}, {name: Rejected, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 473, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 9, docs: [A proposal has been rejected by referendum.]}, {name: TimedOut, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 473, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 10, docs: [A referendum has been timed out without being decided.]}, {name: Cancelled, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 473, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 11, docs: [A referendum has been cancelled.]}, {name: Killed, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: tally, type: 473, typeName: T::Tally, docs: [The final tally of votes in this referendum.]}], index: 12, docs: [A referendum has been killed.]}, {name: SubmissionDepositRefunded, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The account who placed the deposit.]}, {name: amount, type: 6, typeName: BalanceOf<T, I>, docs: [The amount placed by the account.]}], index: 13, docs: [The submission deposit has been refunded.]}, {name: MetadataSet, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: hash, type: 12, typeName: T::Hash, docs: [Preimage hash.]}], index: 14, docs: [Metadata for a referendum has been set.]}, {name: MetadataCleared, fields: [{name: index, type: 4, typeName: ReferendumIndex, docs: [Index of the referendum.]}, {name: hash, type: 12, typeName: T::Hash, docs: [Preimage hash.]}], index: 15, docs: [Metadata for a referendum has been cleared.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 475, type: {path: [pallet_whitelist, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: CallWhitelisted, fields: [{name: call_hash, type: 12, typeName: T::Hash}], index: 0}, {name: WhitelistedCallRemoved, fields: [{name: call_hash, type: 12, typeName: T::Hash}], index: 1}, {name: WhitelistedCallDispatched, fields: [{name: call_hash, type: 12, typeName: T::Hash}, {name: result, type: 476, typeName: DispatchResultWithPostInfo}], index: 2}]}, docs: [The `Event` enum of this pallet]}}, {id: 476, type: {path: [Result], params: [{name: T, type: 477}, {name: E, type: 479}], def: {variants: [{name: Ok, fields: [{type: 477}], index: 0}, {name: Err, fields: [{type: 479}], index: 1}]}}}, {id: 477, type: {path: [frame_support, dispatch, PostDispatchInfo], def: {fields: [{name: actual_weight, type: 478, typeName: Option<Weight>}, {name: pays_fee, type: 24, typeName: Pays}]}}}, {id: 478, type: {path: [Option], params: [{name: T, type: 9}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 9}], index: 1}]}}}, {id: 479, type: {path: [sp_runtime, DispatchErrorWithPostInfo], params: [{name: Info, type: 477}], def: {fields: [{name: post_info, type: 477, typeName: Info}, {name: error, type: 25, typeName: DispatchError}]}}}, {id: 480, type: {path: [polkadot_runtime_common, claims, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Claimed, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: ethereum_address, type: 176, typeName: EthereumAddress}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 0, docs: [Someone claimed some DOTs.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 481, type: {path: [pallet_utility, pallet, Event], def: {variants: [{name: BatchInterrupted, fields: [{name: index, type: 4, typeName: u32}, {name: error, type: 25, typeName: DispatchError}], index: 0, docs: [Batch of dispatches did not complete fully. Index of first failing dispatch given, as, well as the error.]}, {name: BatchCompleted, index: 1, docs: [Batch of dispatches completed fully with no error.]}, {name: BatchCompletedWithErrors, index: 2, docs: [Batch of dispatches completed but has errors.]}, {name: ItemCompleted, index: 3, docs: [A single item within a Batch of dispatches has completed with no error.]}, {name: ItemFailed, fields: [{name: error, type: 25, typeName: DispatchError}], index: 4, docs: [A single item within a Batch of dispatches has completed with error.]}, {name: DispatchedAs, fields: [{name: result, type: 482, typeName: DispatchResult}], index: 5, docs: [A call was dispatched.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 482, type: {path: [Result], params: [{name: T, type: 113}, {name: E, type: 25}], def: {variants: [{name: Ok, fields: [{type: 113}], index: 0}, {name: Err, fields: [{type: 25}], index: 1}]}}}, {id: 483, type: {path: [pallet_society, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Founded, fields: [{name: founder, type: 0, typeName: T::AccountId}], index: 0, docs: [The society is founded by the given identity.]}, {name: Bid, fields: [{name: candidate_id, type: 0, typeName: T::AccountId}, {name: offer, type: 6, typeName: BalanceOf<T, I>}], index: 1, docs: [A membership bid just happened. The given account is the candidate's ID and their offer, is the second.]}, {name: Vouch, fields: [{name: candidate_id, type: 0, typeName: T::AccountId}, {name: offer, type: 6, typeName: BalanceOf<T, I>}, {name: vouching, type: 0, typeName: T::AccountId}], index: 2, docs: [A membership bid just happened by vouching. The given account is the candidate's ID and, their offer is the second. The vouching party is the third.]}, {name: AutoUnbid, fields: [{name: candidate, type: 0, typeName: T::AccountId}], index: 3, docs: [A candidate was dropped (due to an excess of bids in the system).]}, {name: Unbid, fields: [{name: candidate, type: 0, typeName: T::AccountId}], index: 4, docs: [A candidate was dropped (by their request).]}, {name: Unvouch, fields: [{name: candidate, type: 0, typeName: T::AccountId}], index: 5, docs: [A candidate was dropped (by request of who vouched for them).]}, {name: Inducted, fields: [{name: primary, type: 0, typeName: T::AccountId}, {name: candidates, type: 116, typeName: Vec<T::AccountId>}], index: 6, docs: [A group of candidates have been inducted. The batch's primary is the first value, the, batch in full is the second.]}, {name: SuspendedMemberJudgement, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: judged, type: 30, typeName: bool}], index: 7, docs: [A suspended member has been judged.]}, {name: CandidateSuspended, fields: [{name: candidate, type: 0, typeName: T::AccountId}], index: 8, docs: [A candidate has been suspended]}, {name: MemberSuspended, fields: [{name: member, type: 0, typeName: T::AccountId}], index: 9, docs: [A member has been suspended]}, {name: Challenged, fields: [{name: member, type: 0, typeName: T::AccountId}], index: 10, docs: [A member has been challenged]}, {name: Vote, fields: [{name: candidate, type: 0, typeName: T::AccountId}, {name: voter, type: 0, typeName: T::AccountId}, {name: vote, type: 30, typeName: bool}], index: 11, docs: [A vote has been placed]}, {name: DefenderVote, fields: [{name: voter, type: 0, typeName: T::AccountId}, {name: vote, type: 30, typeName: bool}], index: 12, docs: [A vote has been placed for a defending member]}, {name: NewParams, fields: [{name: params, type: 484, typeName: GroupParamsFor<T, I>}], index: 13, docs: [A new set of \[params\] has been set for the group.]}, {name: Unfounded, fields: [{name: founder, type: 0, typeName: T::AccountId}], index: 14, docs: [Society is unfounded.]}, {name: Deposit, fields: [{name: value, type: 6, typeName: BalanceOf<T, I>}], index: 15, docs: [Some funds were deposited into the society account.]}, {name: Elevated, fields: [{name: member, type: 0, typeName: T::AccountId}, {name: rank, type: 4, typeName: Rank}], index: 16, docs: [A \[member\] got elevated to \[rank\].]}]}, docs: [The `Event` enum of this pallet]}}, {id: 484, type: {path: [pallet_society, GroupParams], params: [{name: Balance, type: 6}], def: {fields: [{name: max_members, type: 4, typeName: u32}, {name: max_intake, type: 4, typeName: u32}, {name: max_strikes, type: 4, typeName: u32}, {name: candidate_deposit, type: 6, typeName: Balance}]}}}, {id: 485, type: {path: [pallet_recovery, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: RecoveryCreated, fields: [{name: account, type: 0, typeName: T::AccountId}], index: 0, docs: [A recovery process has been set up for an account.]}, {name: RecoveryInitiated, fields: [{name: lost_account, type: 0, typeName: T::AccountId}, {name: rescuer_account, type: 0, typeName: T::AccountId}], index: 1, docs: [A recovery process has been initiated for lost account by rescuer account.]}, {name: RecoveryVouched, fields: [{name: lost_account, type: 0, typeName: T::AccountId}, {name: rescuer_account, type: 0, typeName: T::AccountId}, {name: sender, type: 0, typeName: T::AccountId}], index: 2, docs: [A recovery process for lost account by rescuer account has been vouched for by sender.]}, {name: RecoveryClosed, fields: [{name: lost_account, type: 0, typeName: T::AccountId}, {name: rescuer_account, type: 0, typeName: T::AccountId}], index: 3, docs: [A recovery process for lost account by rescuer account has been closed.]}, {name: AccountRecovered, fields: [{name: lost_account, type: 0, typeName: T::AccountId}, {name: rescuer_account, type: 0, typeName: T::AccountId}], index: 4, docs: [Lost account has been successfully recovered by rescuer account.]}, {name: RecoveryRemoved, fields: [{name: lost_account, type: 0, typeName: T::AccountId}], index: 5, docs: [A recovery process has been removed for an account.]}]}, docs: [Events type.]}}, {id: 486, type: {path: [pallet_vesting, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: VestingUpdated, fields: [{name: account, type: 0, typeName: T::AccountId}, {name: unvested, type: 6, typeName: BalanceOf<T>}], index: 0, docs: [The amount vested has been updated. This could indicate a change in funds available., The balance given is the amount which is left unvested (and thus locked).]}, {name: VestingCompleted, fields: [{name: account, type: 0, typeName: T::AccountId}], index: 1, docs: [An \[account\] has become fully vested.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 487, type: {path: [pallet_scheduler, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Scheduled, fields: [{name: when, type: 4, typeName: BlockNumberFor<T>}, {name: index, type: 4, typeName: u32}], index: 0, docs: [Scheduled some task.]}, {name: Canceled, fields: [{name: when, type: 4, typeName: BlockNumberFor<T>}, {name: index, type: 4, typeName: u32}], index: 1, docs: [Canceled some task.]}, {name: Dispatched, fields: [{name: task, type: 189, typeName: TaskAddress<BlockNumberFor<T>>}, {name: id, type: 488, typeName: Option<TaskName>}, {name: result, type: 482, typeName: DispatchResult}], index: 2, docs: [Dispatched some task.]}, {name: CallUnavailable, fields: [{name: task, type: 189, typeName: TaskAddress<BlockNumberFor<T>>}, {name: id, type: 488, typeName: Option<TaskName>}], index: 3, docs: [The call for the provided hash was not found so the task has been aborted.]}, {name: PeriodicFailed, fields: [{name: task, type: 189, typeName: TaskAddress<BlockNumberFor<T>>}, {name: id, type: 488, typeName: Option<TaskName>}], index: 4, docs: [The given task was unable to be renewed since the agenda is full at that block.]}, {name: PermanentlyOverweight, fields: [{name: task, type: 189, typeName: TaskAddress<BlockNumberFor<T>>}, {name: id, type: 488, typeName: Option<TaskName>}], index: 5, docs: [The given task can never be executed since it is overweight.]}]}, docs: [Events type.]}}, {id: 488, type: {path: [Option], params: [{name: T, type: 1}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 1}], index: 1}]}}}, {id: 489, type: {path: [pallet_proxy, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: ProxyExecuted, fields: [{name: result, type: 482, typeName: DispatchResult}], index: 0, docs: [A proxy was executed correctly, with the given.]}, {name: PureCreated, fields: [{name: pure, type: 0, typeName: T::AccountId}, {name: who, type: 0, typeName: T::AccountId}, {name: proxy_type, type: 192, typeName: T::ProxyType}, {name: disambiguation_index, type: 94, typeName: u16}], index: 1, docs: [A pure account has been created by new proxy with given, disambiguation index and proxy type.]}, {name: Announced, fields: [{name: real, type: 0, typeName: T::AccountId}, {name: proxy, type: 0, typeName: T::AccountId}, {name: call_hash, type: 12, typeName: CallHashOf<T>}], index: 2, docs: [An announcement was placed to make a call in the future.]}, {name: ProxyAdded, fields: [{name: delegator, type: 0, typeName: T::AccountId}, {name: delegatee, type: 0, typeName: T::AccountId}, {name: proxy_type, type: 192, typeName: T::ProxyType}, {name: delay, type: 4, typeName: BlockNumberFor<T>}], index: 3, docs: [A proxy was added.]}, {name: ProxyRemoved, fields: [{name: delegator, type: 0, typeName: T::AccountId}, {name: delegatee, type: 0, typeName: T::AccountId}, {name: proxy_type, type: 192, typeName: T::ProxyType}, {name: delay, type: 4, typeName: BlockNumberFor<T>}], index: 4, docs: [A proxy was removed.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 490, type: {path: [pallet_multisig, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: NewMultisig, fields: [{name: approving, type: 0, typeName: T::AccountId}, {name: multisig, type: 0, typeName: T::AccountId}, {name: call_hash, type: 1, typeName: CallHash}], index: 0, docs: [A new multisig operation has begun.]}, {name: MultisigApproval, fields: [{name: approving, type: 0, typeName: T::AccountId}, {name: timepoint, type: 195, typeName: Timepoint<BlockNumberFor<T>>}, {name: multisig, type: 0, typeName: T::AccountId}, {name: call_hash, type: 1, typeName: CallHash}], index: 1, docs: [A multisig operation has been approved by someone.]}, {name: MultisigExecuted, fields: [{name: approving, type: 0, typeName: T::AccountId}, {name: timepoint, type: 195, typeName: Timepoint<BlockNumberFor<T>>}, {name: multisig, type: 0, typeName: T::AccountId}, {name: call_hash, type: 1, typeName: CallHash}, {name: result, type: 482, typeName: DispatchResult}], index: 2, docs: [A multisig operation has been executed.]}, {name: MultisigCancelled, fields: [{name: cancelling, type: 0, typeName: T::AccountId}, {name: timepoint, type: 195, typeName: Timepoint<BlockNumberFor<T>>}, {name: multisig, type: 0, typeName: T::AccountId}, {name: call_hash, type: 1, typeName: CallHash}], index: 3, docs: [A multisig operation has been cancelled.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 491, type: {path: [pallet_preimage, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Noted, fields: [{name: hash, type: 12, typeName: T::Hash}], index: 0, docs: [A preimage has been noted.]}, {name: Requested, fields: [{name: hash, type: 12, typeName: T::Hash}], index: 1, docs: [A preimage has been requested.]}, {name: Cleared, fields: [{name: hash, type: 12, typeName: T::Hash}], index: 2, docs: [A preimage has ben cleared.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 492, type: {path: [pallet_bounties, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: BountyProposed, fields: [{name: index, type: 4, typeName: BountyIndex}], index: 0, docs: [New bounty proposal.]}, {name: BountyRejected, fields: [{name: index, type: 4, typeName: BountyIndex}, {name: bond, type: 6, typeName: BalanceOf<T, I>}], index: 1, docs: [A bounty proposal was rejected; funds were slashed.]}, {name: BountyBecameActive, fields: [{name: index, type: 4, typeName: BountyIndex}], index: 2, docs: [A bounty proposal is funded and became active.]}, {name: BountyAwarded, fields: [{name: index, type: 4, typeName: BountyIndex}, {name: beneficiary, type: 0, typeName: T::AccountId}], index: 3, docs: [A bounty is awarded to a beneficiary.]}, {name: BountyClaimed, fields: [{name: index, type: 4, typeName: BountyIndex}, {name: payout, type: 6, typeName: BalanceOf<T, I>}, {name: beneficiary, type: 0, typeName: T::AccountId}], index: 4, docs: [A bounty is claimed by beneficiary.]}, {name: BountyCanceled, fields: [{name: index, type: 4, typeName: BountyIndex}], index: 5, docs: [A bounty is cancelled.]}, {name: BountyExtended, fields: [{name: index, type: 4, typeName: BountyIndex}], index: 6, docs: [A bounty expiry is extended.]}, {name: BountyApproved, fields: [{name: index, type: 4, typeName: BountyIndex}], index: 7, docs: [A bounty is approved.]}, {name: CuratorProposed, fields: [{name: bounty_id, type: 4, typeName: BountyIndex}, {name: curator, type: 0, typeName: T::AccountId}], index: 8, docs: [A bounty curator is proposed.]}, {name: CuratorUnassigned, fields: [{name: bounty_id, type: 4, typeName: BountyIndex}], index: 9, docs: [A bounty curator is unassigned.]}, {name: CuratorAccepted, fields: [{name: bounty_id, type: 4, typeName: BountyIndex}, {name: curator, type: 0, typeName: T::AccountId}], index: 10, docs: [A bounty curator is accepted.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 493, type: {path: [pallet_child_bounties, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Added, fields: [{name: index, type: 4, typeName: BountyIndex}, {name: child_index, type: 4, typeName: BountyIndex}], index: 0, docs: [A child-bounty is added.]}, {name: Awarded, fields: [{name: index, type: 4, typeName: BountyIndex}, {name: child_index, type: 4, typeName: BountyIndex}, {name: beneficiary, type: 0, typeName: T::AccountId}], index: 1, docs: [A child-bounty is awarded to a beneficiary.]}, {name: Claimed, fields: [{name: index, type: 4, typeName: BountyIndex}, {name: child_index, type: 4, typeName: BountyIndex}, {name: payout, type: 6, typeName: BalanceOf<T>}, {name: beneficiary, type: 0, typeName: T::AccountId}], index: 2, docs: [A child-bounty is claimed by beneficiary.]}, {name: Canceled, fields: [{name: index, type: 4, typeName: BountyIndex}, {name: child_index, type: 4, typeName: BountyIndex}], index: 3, docs: [A child-bounty is cancelled.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 494, type: {path: [pallet_election_provider_multi_phase, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: SolutionStored, fields: [{name: compute, type: 495, typeName: ElectionCompute}, {name: origin, type: 127, typeName: Option<T::AccountId>}, {name: prev_ejected, type: 30, typeName: bool}], index: 0, docs: [A solution was stored with the given compute., , The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,, the stored solution was submited in the signed phase by a miner with the `AccountId`., Otherwise, the solution was stored either during the unsigned phase or by, `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make, room for this one.]}, {name: ElectionFinalized, fields: [{name: compute, type: 495, typeName: ElectionCompute}, {name: score, type: 277, typeName: ElectionScore}], index: 1, docs: [The election has been finalized, with the given computation and score.]}, {name: ElectionFailed, index: 2, docs: [An election failed., , Not much can be said about which computes failed in the process.]}, {name: Rewarded, fields: [{name: account, type: 0, typeName: <T as frame_system::Config>::AccountId}, {name: value, type: 6, typeName: BalanceOf<T>}], index: 3, docs: [An account has been rewarded for their signed submission being finalized.]}, {name: Slashed, fields: [{name: account, type: 0, typeName: <T as frame_system::Config>::AccountId}, {name: value, type: 6, typeName: BalanceOf<T>}], index: 4, docs: [An account has been slashed for submitting an invalid signed submission.]}, {name: PhaseTransitioned, fields: [{name: from, type: 496, typeName: Phase<BlockNumberFor<T>>}, {name: to, type: 496, typeName: Phase<BlockNumberFor<T>>}, {name: round, type: 4, typeName: u32}], index: 5, docs: [There was a phase transition in a given round.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 495, type: {path: [pallet_election_provider_multi_phase, ElectionCompute], def: {variants: [{name: OnChain, index: 0}, {name: Signed, index: 1}, {name: Unsigned, index: 2}, {name: Fallback, index: 3}, {name: Emergency, index: 4}]}}}, {id: 496, type: {path: [pallet_election_provider_multi_phase, Phase], params: [{name: Bn, type: 4}], def: {variants: [{name: Off, index: 0}, {name: Signed, index: 1}, {name: Unsigned, fields: [{type: 497, typeName: (bool, Bn)}], index: 2}, {name: Emergency, index: 3}]}}}, {id: 497, type: {def: {fields: [30, 4]}}}, {id: 498, type: {path: [pallet_nis, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: BidPlaced, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}, {name: duration, type: 4, typeName: u32}], index: 0, docs: [A bid was successfully placed.]}, {name: BidRetracted, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}, {name: duration, type: 4, typeName: u32}], index: 1, docs: [A bid was successfully removed (before being accepted).]}, {name: BidDropped, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}, {name: duration, type: 4, typeName: u32}], index: 2, docs: [A bid was dropped from a queue because of another, more substantial, bid was present.]}, {name: Issued, fields: [{name: index, type: 4, typeName: ReceiptIndex, docs: [The identity of the receipt.]}, {name: expiry, type: 4, typeName: BlockNumberFor<T>, docs: [The block number at which the receipt may be thawed.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The owner of the receipt.]}, {name: proportion, type: 287, typeName: Perquintill, docs: [The proportion of the effective total issuance which the receipt represents.]}, {name: amount, type: 6, typeName: BalanceOf<T>, docs: [The amount of funds which were debited from the owner.]}], index: 3, docs: [A bid was accepted. The balance may not be released until expiry.]}, {name: Thawed, fields: [{name: index, type: 4, typeName: ReceiptIndex, docs: [The identity of the receipt.]}, {name: who, type: 0, typeName: T::AccountId, docs: [The owner.]}, {name: proportion, type: 287, typeName: Perquintill, docs: [The proportion of the effective total issuance by which the owner was debited.]}, {name: amount, type: 6, typeName: BalanceOf<T>, docs: [The amount by which the owner was credited.]}, {name: dropped, type: 30, typeName: bool, docs: [If `true` then the receipt is done.]}], index: 4, docs: [An receipt has been (at least partially) thawed.]}, {name: Funded, fields: [{name: deficit, type: 6, typeName: BalanceOf<T>}], index: 5, docs: [An automatic funding of the deficit was made.]}, {name: Transferred, fields: [{name: from, type: 0, typeName: T::AccountId}, {name: to, type: 0, typeName: T::AccountId}, {name: index, type: 4, typeName: ReceiptIndex}], index: 6, docs: [A receipt was transfered.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 499, type: {path: [pallet_balances, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Endowed, fields: [{name: account, type: 0, typeName: T::AccountId}, {name: free_balance, type: 6, typeName: T::Balance}], index: 0, docs: [An account was created with some free balance.]}, {name: DustLost, fields: [{name: account, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 1, docs: [An account was removed whose balance was non-zero but below ExistentialDeposit,, resulting in an outright loss.]}, {name: Transfer, fields: [{name: from, type: 0, typeName: T::AccountId}, {name: to, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 2, docs: [Transfer succeeded.]}, {name: BalanceSet, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: free, type: 6, typeName: T::Balance}], index: 3, docs: [A balance was set by root.]}, {name: Reserved, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 4, docs: [Some balance was reserved (moved from free to reserved).]}, {name: Unreserved, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 5, docs: [Some balance was unreserved (moved from reserved to free).]}, {name: ReserveRepatriated, fields: [{name: from, type: 0, typeName: T::AccountId}, {name: to, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}, {name: destination_status, type: 33, typeName: Status}], index: 6, docs: [Some balance was moved from the reserve of the first account to the second account., Final argument indicates the destination balance type.]}, {name: Deposit, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 7, docs: [Some amount was deposited (e.g. for transaction fees).]}, {name: Withdraw, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 8, docs: [Some amount was withdrawn from the account (e.g. for transaction fees).]}, {name: Slashed, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 9, docs: [Some amount was removed from the account (e.g. for misbehavior).]}, {name: Minted, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 10, docs: [Some amount was minted into an account.]}, {name: Burned, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 11, docs: [Some amount was burned from an account.]}, {name: Suspended, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 12, docs: [Some amount was suspended from an account (it can be restored later).]}, {name: Restored, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 13, docs: [Some amount was restored into an account.]}, {name: Upgraded, fields: [{name: who, type: 0, typeName: T::AccountId}], index: 14, docs: [An account was upgraded.]}, {name: Issued, fields: [{name: amount, type: 6, typeName: T::Balance}], index: 15, docs: [Total issuance was increased by `amount`, creating a credit to be balanced.]}, {name: Rescinded, fields: [{name: amount, type: 6, typeName: T::Balance}], index: 16, docs: [Total issuance was decreased by `amount`, creating a debt to be balanced.]}, {name: Locked, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 17, docs: [Some balance was locked.]}, {name: Unlocked, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 18, docs: [Some balance was unlocked.]}, {name: Frozen, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 19, docs: [Some balance was frozen.]}, {name: Thawed, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: T::Balance}], index: 20, docs: [Some balance was thawed.]}, {name: TotalIssuanceForced, fields: [{name: old, type: 6, typeName: T::Balance}, {name: new, type: 6, typeName: T::Balance}], index: 21, docs: [The `TotalIssuance` was forcefully changed.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 500, type: {path: [pallet_bags_list, pallet, Event], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: Rebagged, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: from, type: 11, typeName: T::Score}, {name: to, type: 11, typeName: T::Score}], index: 0, docs: [Moved an account from one bag to another.]}, {name: ScoreUpdated, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: new_score, type: 11, typeName: T::Score}], index: 1, docs: [Updated the score of some account to the given amount.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 501, type: {path: [pallet_nomination_pools, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Created, fields: [{name: depositor, type: 0, typeName: T::AccountId}, {name: pool_id, type: 4, typeName: PoolId}], index: 0, docs: [A pool has been created.]}, {name: Bonded, fields: [{name: member, type: 0, typeName: T::AccountId}, {name: pool_id, type: 4, typeName: PoolId}, {name: bonded, type: 6, typeName: BalanceOf<T>}, {name: joined, type: 30, typeName: bool}], index: 1, docs: [A member has became bonded in a pool.]}, {name: PaidOut, fields: [{name: member, type: 0, typeName: T::AccountId}, {name: pool_id, type: 4, typeName: PoolId}, {name: payout, type: 6, typeName: BalanceOf<T>}], index: 2, docs: [A payout has been made to a member.]}, {name: Unbonded, fields: [{name: member, type: 0, typeName: T::AccountId}, {name: pool_id, type: 4, typeName: PoolId}, {name: balance, type: 6, typeName: BalanceOf<T>}, {name: points, type: 6, typeName: BalanceOf<T>}, {name: era, type: 4, typeName: EraIndex}], index: 3, docs: [A member has unbonded from their pool., , - `balance` is the corresponding balance of the number of points that has been,   requested to be unbonded (the argument of the `unbond` transaction) from the bonded,   pool., - `points` is the number of points that are issued as a result of `balance` being, dissolved into the corresponding unbonding pool., - `era` is the era in which the balance will be unbonded., In the absence of slashing, these values will match. In the presence of slashing, the, number of points that are issued in the unbonding pool will be less than the amount, requested to be unbonded.]}, {name: Withdrawn, fields: [{name: member, type: 0, typeName: T::AccountId}, {name: pool_id, type: 4, typeName: PoolId}, {name: balance, type: 6, typeName: BalanceOf<T>}, {name: points, type: 6, typeName: BalanceOf<T>}], index: 4, docs: [A member has withdrawn from their pool., , The given number of `points` have been dissolved in return of `balance`., , Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance, will be 1.]}, {name: Destroyed, fields: [{name: pool_id, type: 4, typeName: PoolId}], index: 5, docs: [A pool has been destroyed.]}, {name: StateChanged, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: new_state, type: 292, typeName: PoolState}], index: 6, docs: [The state of a pool has changed]}, {name: MemberRemoved, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: member, type: 0, typeName: T::AccountId}], index: 7, docs: [A member has been removed from a pool., , The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).]}, {name: RolesUpdated, fields: [{name: root, type: 127, typeName: Option<T::AccountId>}, {name: bouncer, type: 127, typeName: Option<T::AccountId>}, {name: nominator, type: 127, typeName: Option<T::AccountId>}], index: 8, docs: [The roles of a pool have been updated to the given new roles. Note that the depositor, can never change.]}, {name: PoolSlashed, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: balance, type: 6, typeName: BalanceOf<T>}], index: 9, docs: [The active balance of pool `pool_id` has been slashed to `balance`.]}, {name: UnbondingPoolSlashed, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: era, type: 4, typeName: EraIndex}, {name: balance, type: 6, typeName: BalanceOf<T>}], index: 10, docs: [The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.]}, {name: PoolCommissionUpdated, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: current, type: 298, typeName: Option<(Perbill, T::AccountId)>}], index: 11, docs: [A pool's commission setting has been changed.]}, {name: PoolMaxCommissionUpdated, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: max_commission, type: 37, typeName: Perbill}], index: 12, docs: [A pool's maximum commission setting has been changed.]}, {name: PoolCommissionChangeRateUpdated, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: change_rate, type: 300, typeName: CommissionChangeRate<BlockNumberFor<T>>}], index: 13, docs: [A pool's commission `change_rate` has been changed.]}, {name: PoolCommissionClaimPermissionUpdated, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: permission, type: 301, typeName: Option<CommissionClaimPermission<T::AccountId>>}], index: 14, docs: [Pool commission claim permission has been updated.]}, {name: PoolCommissionClaimed, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: commission, type: 6, typeName: BalanceOf<T>}], index: 15, docs: [Pool commission has been claimed.]}, {name: MinBalanceDeficitAdjusted, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 16, docs: [Topped up deficit in frozen ED of the reward pool.]}, {name: MinBalanceExcessAdjusted, fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 17, docs: [Claimed excess frozen ED of af the reward pool.]}]}, docs: [Events of this pallet.]}}, {id: 502, type: {path: [pallet_fast_unstake, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Unstaked, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: result, type: 482, typeName: DispatchResult}], index: 0, docs: [A staker was unstaked.]}, {name: Slashed, fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 1, docs: [A staker was slashed for requesting fast-unstake whilst being exposed.]}, {name: BatchChecked, fields: [{name: eras, type: 121, typeName: Vec<EraIndex>}], index: 2, docs: [A batch was partially checked for the given eras, but the process did not finish.]}, {name: BatchFinished, fields: [{name: size, type: 4, typeName: u32}], index: 3, docs: [A batch of a given size was terminated., , This is always follows by a number of `Unstaked` or `Slashed` events, marking the end, of the batch. A new batch will be created upon next block.]}, {name: InternalError, index: 4, docs: [An internal error happened. Operations will be paused now.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 503, type: {path: [polkadot_runtime_parachains, inclusion, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: CandidateBacked, fields: [{type: 504, typeName: CandidateReceipt<T::Hash>}, {type: 338, typeName: HeadData}, {type: 505, typeName: CoreIndex}, {type: 506, typeName: GroupIndex}], index: 0, docs: [A candidate was backed. `[candidate, head_data]`]}, {name: CandidateIncluded, fields: [{type: 504, typeName: CandidateReceipt<T::Hash>}, {type: 338, typeName: HeadData}, {type: 505, typeName: CoreIndex}, {type: 506, typeName: GroupIndex}], index: 1, docs: [A candidate was included. `[candidate, head_data]`]}, {name: CandidateTimedOut, fields: [{type: 504, typeName: CandidateReceipt<T::Hash>}, {type: 338, typeName: HeadData}, {type: 505, typeName: CoreIndex}], index: 2, docs: [A candidate timed out. `[candidate, head_data]`]}, {name: UpwardMessagesReceived, fields: [{name: from, type: 165, typeName: ParaId}, {name: count, type: 4, typeName: u32}], index: 3, docs: [Some upward messages have been received and will be processed.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 504, type: {path: [polkadot_primitives, v6, CandidateReceipt], params: [{name: H, type: 12}], def: {fields: [{name: descriptor, type: 327, typeName: CandidateDescriptor<H>}, {name: commitments_hash, type: 12, typeName: Hash}]}}}, {id: 505, type: {path: [polkadot_primitives, v6, CoreIndex], def: {fields: [{type: 4, typeName: u32}]}}}, {id: 506, type: {path: [polkadot_primitives, v6, GroupIndex], def: {fields: [{type: 4, typeName: u32}]}}}, {id: 507, type: {path: [polkadot_runtime_parachains, paras, pallet, Event], def: {variants: [{name: CurrentCodeUpdated, fields: [{type: 165, typeName: ParaId}], index: 0, docs: [Current code has been updated for a Para. `para_id`]}, {name: CurrentHeadUpdated, fields: [{type: 165, typeName: ParaId}], index: 1, docs: [Current head has been updated for a Para. `para_id`]}, {name: CodeUpgradeScheduled, fields: [{type: 165, typeName: ParaId}], index: 2, docs: [A code upgrade has been scheduled for a Para. `para_id`]}, {name: NewHeadNoted, fields: [{type: 165, typeName: ParaId}], index: 3, docs: [A new head has been noted for a Para. `para_id`]}, {name: ActionQueued, fields: [{type: 165, typeName: ParaId}, {type: 4, typeName: SessionIndex}], index: 4, docs: [A para has been queued to execute pending actions. `para_id`]}, {name: PvfCheckStarted, fields: [{type: 330, typeName: ValidationCodeHash}, {type: 165, typeName: ParaId}], index: 5, docs: [The given para either initiated or subscribed to a PVF check for the given validation, code. `code_hash` `para_id`]}, {name: PvfCheckAccepted, fields: [{type: 330, typeName: ValidationCodeHash}, {type: 165, typeName: ParaId}], index: 6, docs: [The given validation code was accepted by the PVF pre-checking vote., `code_hash` `para_id`]}, {name: PvfCheckRejected, fields: [{type: 330, typeName: ValidationCodeHash}, {type: 165, typeName: ParaId}], index: 7, docs: [The given validation code was rejected by the PVF pre-checking vote., `code_hash` `para_id`]}]}, docs: [The `Event` enum of this pallet]}}, {id: 508, type: {path: [polkadot_runtime_parachains, hrmp, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: OpenChannelRequested, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}, {name: proposed_max_capacity, type: 4, typeName: u32}, {name: proposed_max_message_size, type: 4, typeName: u32}], index: 0, docs: [Open HRMP channel requested.]}, {name: OpenChannelCanceled, fields: [{name: by_parachain, type: 165, typeName: ParaId}, {name: channel_id, type: 354, typeName: HrmpChannelId}], index: 1, docs: [An HRMP channel request sent by the receiver was canceled by either party.]}, {name: OpenChannelAccepted, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}], index: 2, docs: [Open HRMP channel accepted.]}, {name: ChannelClosed, fields: [{name: by_parachain, type: 165, typeName: ParaId}, {name: channel_id, type: 354, typeName: HrmpChannelId}], index: 3, docs: [HRMP channel closed.]}, {name: HrmpChannelForceOpened, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}, {name: proposed_max_capacity, type: 4, typeName: u32}, {name: proposed_max_message_size, type: 4, typeName: u32}], index: 4, docs: [An HRMP channel was opened via Root origin.]}, {name: HrmpSystemChannelOpened, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}, {name: proposed_max_capacity, type: 4, typeName: u32}, {name: proposed_max_message_size, type: 4, typeName: u32}], index: 5, docs: [An HRMP channel was opened with a system chain.]}, {name: OpenChannelDepositsUpdated, fields: [{name: sender, type: 165, typeName: ParaId}, {name: recipient, type: 165, typeName: ParaId}], index: 6, docs: [An HRMP channel's deposits were updated.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 509, type: {path: [polkadot_runtime_parachains, disputes, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: DisputeInitiated, fields: [{type: 343, typeName: CandidateHash}, {type: 510, typeName: DisputeLocation}], index: 0, docs: [A dispute has been initiated. \[candidate hash, dispute location\]]}, {name: DisputeConcluded, fields: [{type: 343, typeName: CandidateHash}, {type: 511, typeName: DisputeResult}], index: 1, docs: [A dispute has concluded for or against a candidate., `\[para id, candidate hash, dispute result\]`]}, {name: Revert, fields: [{type: 4, typeName: BlockNumberFor<T>}], index: 2, docs: [A dispute has concluded with supermajority against a candidate., Block authors should no longer build on top of this head and should, instead revert the block at the given height. This should be the, number of the child of the last known valid block in the chain.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 510, type: {path: [polkadot_runtime_parachains, disputes, DisputeLocation], def: {variants: [{name: Local, index: 0}, {name: Remote, index: 1}]}}}, {id: 511, type: {path: [polkadot_runtime_parachains, disputes, DisputeResult], def: {variants: [{name: Valid, index: 0}, {name: Invalid, index: 1}]}}}, {id: 512, type: {path: [polkadot_runtime_parachains, assigner_on_demand, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: OnDemandOrderPlaced, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: spot_price, type: 6, typeName: BalanceOf<T>}], index: 0, docs: [An order was placed at some spot price amount.]}, {name: SpotTrafficSet, fields: [{name: traffic, type: 458, typeName: FixedU128}], index: 1, docs: [The value of the spot traffic multiplier changed.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 513, type: {path: [polkadot_runtime_common, paras_registrar, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Registered, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: manager, type: 0, typeName: T::AccountId}], index: 0}, {name: Deregistered, fields: [{name: para_id, type: 165, typeName: ParaId}], index: 1}, {name: Reserved, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: who, type: 0, typeName: T::AccountId}], index: 2}, {name: Swapped, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: other_id, type: 165, typeName: ParaId}], index: 3}]}, docs: [The `Event` enum of this pallet]}}, {id: 514, type: {path: [polkadot_runtime_common, slots, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: NewLeasePeriod, fields: [{name: lease_period, type: 4, typeName: LeasePeriodOf<T>}], index: 0, docs: [A new `[lease_period]` is beginning.]}, {name: Leased, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: leaser, type: 0, typeName: T::AccountId}, {name: period_begin, type: 4, typeName: LeasePeriodOf<T>}, {name: period_count, type: 4, typeName: LeasePeriodOf<T>}, {name: extra_reserved, type: 6, typeName: BalanceOf<T>}, {name: total_amount, type: 6, typeName: BalanceOf<T>}], index: 1, docs: [A para has won the right to a continuous set of lease periods as a parachain., First balance is any extra amount reserved on top of the para's existing deposit., Second balance is the total amount reserved.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 515, type: {path: [polkadot_runtime_common, auctions, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: AuctionStarted, fields: [{name: auction_index, type: 4, typeName: AuctionIndex}, {name: lease_period, type: 4, typeName: LeasePeriodOf<T>}, {name: ending, type: 4, typeName: BlockNumberFor<T>}], index: 0, docs: [An auction started. Provides its index and the block number where it will begin to, close and the first lease period of the quadruplet that is auctioned.]}, {name: AuctionClosed, fields: [{name: auction_index, type: 4, typeName: AuctionIndex}], index: 1, docs: [An auction ended. All funds become unreserved.]}, {name: Reserved, fields: [{name: bidder, type: 0, typeName: T::AccountId}, {name: extra_reserved, type: 6, typeName: BalanceOf<T>}, {name: total_amount, type: 6, typeName: BalanceOf<T>}], index: 2, docs: [Funds were reserved for a winning bid. First balance is the extra amount reserved., Second is the total.]}, {name: Unreserved, fields: [{name: bidder, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 3, docs: [Funds were unreserved since bidder is no longer active. `[bidder, amount]`]}, {name: ReserveConfiscated, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: leaser, type: 0, typeName: T::AccountId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 4, docs: [Someone attempted to lease the same slot twice for a parachain. The amount is held in, reserve but no parachain slot has been leased.]}, {name: BidAccepted, fields: [{name: bidder, type: 0, typeName: T::AccountId}, {name: para_id, type: 165, typeName: ParaId}, {name: amount, type: 6, typeName: BalanceOf<T>}, {name: first_slot, type: 4, typeName: LeasePeriodOf<T>}, {name: last_slot, type: 4, typeName: LeasePeriodOf<T>}], index: 5, docs: [A new bid has been accepted as the current winner.]}, {name: WinningOffset, fields: [{name: auction_index, type: 4, typeName: AuctionIndex}, {name: block_number, type: 4, typeName: BlockNumberFor<T>}], index: 6, docs: [The winning offset was chosen for an auction. This will map into the `Winning` storage, map.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 516, type: {path: [polkadot_runtime_common, crowdloan, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Created, fields: [{name: para_id, type: 165, typeName: ParaId}], index: 0, docs: [Create a new crowdloaning campaign.]}, {name: Contributed, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: fund_index, type: 165, typeName: ParaId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 1, docs: [Contributed to a crowd sale.]}, {name: Withdrew, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: fund_index, type: 165, typeName: ParaId}, {name: amount, type: 6, typeName: BalanceOf<T>}], index: 2, docs: [Withdrew full balance of a contributor.]}, {name: PartiallyRefunded, fields: [{name: para_id, type: 165, typeName: ParaId}], index: 3, docs: [The loans in a fund have been partially dissolved, i.e. there are some left, over child keys that still need to be killed.]}, {name: AllRefunded, fields: [{name: para_id, type: 165, typeName: ParaId}], index: 4, docs: [All loans in a fund have been refunded.]}, {name: Dissolved, fields: [{name: para_id, type: 165, typeName: ParaId}], index: 5, docs: [Fund is dissolved.]}, {name: HandleBidResult, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: result, type: 482, typeName: DispatchResult}], index: 6, docs: [The result of trying to submit a new bid to the Slots pallet.]}, {name: Edited, fields: [{name: para_id, type: 165, typeName: ParaId}], index: 7, docs: [The configuration to a crowdloan has been edited.]}, {name: MemoUpdated, fields: [{name: who, type: 0, typeName: T::AccountId}, {name: para_id, type: 165, typeName: ParaId}, {name: memo, type: 13, typeName: Vec<u8>}], index: 8, docs: [A memo has been updated.]}, {name: AddedToNewRaise, fields: [{name: para_id, type: 165, typeName: ParaId}], index: 9, docs: [A parachain has been moved to `NewRaise`]}]}, docs: [The `Event` enum of this pallet]}}, {id: 517, type: {path: [polkadot_runtime_parachains, coretime, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: RevenueInfoRequested, fields: [{name: when, type: 4, typeName: BlockNumberFor<T>}], index: 0, docs: [The broker chain has asked for revenue information for a specific block.]}, {name: CoreAssigned, fields: [{name: core, type: 505, typeName: CoreIndex}], index: 1, docs: [A core has received a new assignment from the broker chain.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 518, type: {path: [pallet_xcm, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: Attempted, fields: [{name: outcome, type: 519, typeName: xcm::latest::Outcome}], index: 0, docs: [Execution of an XCM message was attempted.]}, {name: Sent, fields: [{name: origin, type: 70, typeName: Location}, {name: destination, type: 70, typeName: Location}, {name: message, type: 422, typeName: Xcm<()>}, {name: message_id, type: 1, typeName: XcmHash}], index: 1, docs: [A XCM message was sent.]}, {name: UnexpectedResponse, fields: [{name: origin, type: 70, typeName: Location}, {name: query_id, type: 11, typeName: QueryId}], index: 2, docs: [Query response received which does not match a registered query. This may be because a, matching query was never registered, it may be because it is a duplicate response, or, because the query timed out.]}, {name: ResponseReady, fields: [{name: query_id, type: 11, typeName: QueryId}, {name: response, type: 430, typeName: Response}], index: 3, docs: [Query response has been received and is ready for taking with `take_response`. There is, no registered notification call.]}, {name: Notified, fields: [{name: query_id, type: 11, typeName: QueryId}, {name: pallet_index, type: 2, typeName: u8}, {name: call_index, type: 2, typeName: u8}], index: 4, docs: [Query response has been received and query is removed. The registered notification has, been dispatched and executed successfully.]}, {name: NotifyOverweight, fields: [{name: query_id, type: 11, typeName: QueryId}, {name: pallet_index, type: 2, typeName: u8}, {name: call_index, type: 2, typeName: u8}, {name: actual_weight, type: 9, typeName: Weight}, {name: max_budgeted_weight, type: 9, typeName: Weight}], index: 5, docs: [Query response has been received and query is removed. The registered notification, could not be dispatched because the dispatch weight is greater than the maximum weight, originally budgeted by this runtime for the query result.]}, {name: NotifyDispatchError, fields: [{name: query_id, type: 11, typeName: QueryId}, {name: pallet_index, type: 2, typeName: u8}, {name: call_index, type: 2, typeName: u8}], index: 6, docs: [Query response has been received and query is removed. There was a general error with, dispatching the notification call.]}, {name: NotifyDecodeFailed, fields: [{name: query_id, type: 11, typeName: QueryId}, {name: pallet_index, type: 2, typeName: u8}, {name: call_index, type: 2, typeName: u8}], index: 7, docs: [Query response has been received and query is removed. The dispatch was unable to be, decoded into a `Call`; this might be due to dispatch function having a signature which, is not `(origin, QueryId, Response)`.]}, {name: InvalidResponder, fields: [{name: origin, type: 70, typeName: Location}, {name: query_id, type: 11, typeName: QueryId}, {name: expected_location, type: 435, typeName: Option<Location>}], index: 8, docs: [Expected query response has been received but the origin location of the response does, not match that expected. The query remains registered for a later, valid, response to, be received and acted upon.]}, {name: InvalidResponderVersion, fields: [{name: origin, type: 70, typeName: Location}, {name: query_id, type: 11, typeName: QueryId}], index: 9, docs: [Expected query response has been received but the expected origin location placed in, storage by this runtime previously cannot be decoded. The query remains registered., , This is unexpected (since a location placed in storage in a previously executing, runtime should be readable prior to query timeout) and dangerous since the possibly, valid response will be dropped. Manual governance intervention is probably going to be, needed.]}, {name: ResponseTaken, fields: [{name: query_id, type: 11, typeName: QueryId}], index: 10, docs: [Received query response has been read and removed.]}, {name: AssetsTrapped, fields: [{name: hash, type: 12, typeName: H256}, {name: origin, type: 70, typeName: Location}, {name: assets, type: 440, typeName: VersionedAssets}], index: 11, docs: [Some assets have been placed in an asset trap.]}, {name: VersionChangeNotified, fields: [{name: destination, type: 70, typeName: Location}, {name: result, type: 4, typeName: XcmVersion}, {name: cost, type: 425, typeName: Assets}, {name: message_id, type: 1, typeName: XcmHash}], index: 12, docs: [An XCM version change notification message has been attempted to be sent., , The cost of sending it (borne by the chain) is included.]}, {name: SupportedVersionChanged, fields: [{name: location, type: 70, typeName: Location}, {name: version, type: 4, typeName: XcmVersion}], index: 13, docs: [The supported version of a location has been changed. This might be through an, automatic notification or a manual intervention.]}, {name: NotifyTargetSendFail, fields: [{name: location, type: 70, typeName: Location}, {name: query_id, type: 11, typeName: QueryId}, {name: error, type: 409, typeName: XcmError}], index: 14, docs: [A given location which had a version change subscription was dropped owing to an error, sending the notification to it.]}, {name: NotifyTargetMigrationFail, fields: [{name: location, type: 84, typeName: VersionedLocation}, {name: query_id, type: 11, typeName: QueryId}], index: 15, docs: [A given location which had a version change subscription was dropped owing to an error, migrating the location to our new XCM format.]}, {name: InvalidQuerierVersion, fields: [{name: origin, type: 70, typeName: Location}, {name: query_id, type: 11, typeName: QueryId}], index: 16, docs: [Expected query response has been received but the expected querier location placed in, storage by this runtime previously cannot be decoded. The query remains registered., , This is unexpected (since a location placed in storage in a previously executing, runtime should be readable prior to query timeout) and dangerous since the possibly, valid response will be dropped. Manual governance intervention is probably going to be, needed.]}, {name: InvalidQuerier, fields: [{name: origin, type: 70, typeName: Location}, {name: query_id, type: 11, typeName: QueryId}, {name: expected_querier, type: 70, typeName: Location}, {name: maybe_actual_querier, type: 435, typeName: Option<Location>}], index: 17, docs: [Expected query response has been received but the querier location of the response does, not match the expected. The query remains registered for a later, valid, response to, be received and acted upon.]}, {name: VersionNotifyStarted, fields: [{name: destination, type: 70, typeName: Location}, {name: cost, type: 425, typeName: Assets}, {name: message_id, type: 1, typeName: XcmHash}], index: 18, docs: [A remote has requested XCM version change notification from us and we have honored it., A version information message is sent to them and its cost is included.]}, {name: VersionNotifyRequested, fields: [{name: destination, type: 70, typeName: Location}, {name: cost, type: 425, typeName: Assets}, {name: message_id, type: 1, typeName: XcmHash}], index: 19, docs: [We have requested that a remote chain send us XCM version change notifications.]}, {name: VersionNotifyUnrequested, fields: [{name: destination, type: 70, typeName: Location}, {name: cost, type: 425, typeName: Assets}, {name: message_id, type: 1, typeName: XcmHash}], index: 20, docs: [We have requested that a remote chain stops sending us XCM version change, notifications.]}, {name: FeesPaid, fields: [{name: paying, type: 70, typeName: Location}, {name: fees, type: 425, typeName: Assets}], index: 21, docs: [Fees were paid from a location for an operation (often for using `SendXcm`).]}, {name: AssetsClaimed, fields: [{name: hash, type: 12, typeName: H256}, {name: origin, type: 70, typeName: Location}, {name: assets, type: 440, typeName: VersionedAssets}], index: 22, docs: [Some assets have been claimed from an asset trap]}, {name: VersionMigrationFinished, fields: [{name: version, type: 4, typeName: XcmVersion}], index: 23, docs: [A XCM version migration finished.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 519, type: {path: [staging_xcm, v4, traits, Outcome], def: {variants: [{name: Complete, fields: [{name: used, type: 9, typeName: Weight}], index: 0}, {name: Incomplete, fields: [{name: used, type: 9, typeName: Weight}, {name: error, type: 409, typeName: Error}], index: 1}, {name: Error, fields: [{name: error, type: 409, typeName: Error}], index: 2}]}}}, {id: 520, type: {path: [pallet_message_queue, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: ProcessingFailed, fields: [{name: id, type: 12, typeName: H256, docs: [The `blake2_256` hash of the message.]}, {name: origin, type: 455, typeName: MessageOriginOf<T>, docs: [The queue of the message.]}, {name: error, type: 521, typeName: ProcessMessageError, docs: [The error that occurred., , This error is pretty opaque. More fine-grained errors need to be emitted as events, by the `MessageProcessor`.]}], index: 0, docs: [Message discarded due to an error in the `MessageProcessor` (usually a format error).]}, {name: Processed, fields: [{name: id, type: 12, typeName: H256, docs: [The `blake2_256` hash of the message.]}, {name: origin, type: 455, typeName: MessageOriginOf<T>, docs: [The queue of the message.]}, {name: weight_used, type: 9, typeName: Weight, docs: [How much weight was used to process the message.]}, {name: success, type: 30, typeName: bool, docs: [Whether the message was processed., , Note that this does not mean that the underlying `MessageProcessor` was internally, successful. It *solely* means that the MQ pallet will treat this as a success, condition and discard the message. Any internal error needs to be emitted as events, by the `MessageProcessor`.]}], index: 1, docs: [Message is processed.]}, {name: OverweightEnqueued, fields: [{name: id, type: 1, typeName: [u8; 32], docs: [The `blake2_256` hash of the message.]}, {name: origin, type: 455, typeName: MessageOriginOf<T>, docs: [The queue of the message.]}, {name: page_index, type: 4, typeName: PageIndex, docs: [The page of the message.]}, {name: message_index, type: 4, typeName: T::Size, docs: [The index of the message within the page.]}], index: 2, docs: [Message placed in overweight queue.]}, {name: PageReaped, fields: [{name: origin, type: 455, typeName: MessageOriginOf<T>, docs: [The queue of the page.]}, {name: index, type: 4, typeName: PageIndex, docs: [The index of the page.]}], index: 3, docs: [This page was reaped.]}]}, docs: [The `Event` enum of this pallet]}}, {id: 521, type: {path: [frame_support, traits, messages, ProcessMessageError], def: {variants: [{name: BadFormat, index: 0}, {name: Corrupt, index: 1}, {name: Unsupported, index: 2}, {name: Overweight, fields: [{type: 9, typeName: Weight}], index: 3}, {name: Yield, index: 4}]}}}, {id: 522, type: {path: [pallet_asset_rate, pallet, Event], params: [{name: T, type: null}], def: {variants: [{name: AssetRateCreated, fields: [{name: asset_kind, type: 59, typeName: T::AssetKind}, {name: rate, type: 458, typeName: FixedU128}], index: 0}, {name: AssetRateRemoved, fields: [{name: asset_kind, type: 59, typeName: T::AssetKind}], index: 1}, {name: AssetRateUpdated, fields: [{name: asset_kind, type: 59, typeName: T::AssetKind}, {name: old, type: 458, typeName: FixedU128}, {name: new, type: 458, typeName: FixedU128}], index: 2}]}, docs: [The `Event` enum of this pallet]}}, {id: 523, type: {path: [frame_system, Phase], def: {variants: [{name: ApplyExtrinsic, fields: [{type: 4, typeName: u32}], index: 0}, {name: Finalization, index: 1}, {name: Initialization, index: 2}]}}}, {id: 524, type: {def: {type: 189}}}, {id: 525, type: {path: [frame_system, LastRuntimeUpgradeInfo], def: {fields: [{name: spec_version, type: 63, typeName: codec::Compact<u32>}, {name: spec_name, type: 526, typeName: sp_runtime::RuntimeString}]}}}, {id: 526, type: {def: {primitive: str}}}, {id: 527, type: {path: [frame_system, CodeUpgradeAuthorization], params: [{name: T, type: null}], def: {fields: [{name: code_hash, type: 12, typeName: T::Hash}, {name: check_version, type: 30, typeName: bool}]}}}, {id: 528, type: {path: [frame_system, limits, BlockWeights], def: {fields: [{name: base_block, type: 9, typeName: Weight}, {name: max_block, type: 9, typeName: Weight}, {name: per_class, type: 529, typeName: PerDispatchClass<WeightsPerClass>}]}}}, {id: 529, type: {path: [frame_support, dispatch, PerDispatchClass], params: [{name: T, type: 530}], def: {fields: [{name: normal, type: 530, typeName: T}, {name: operational, type: 530, typeName: T}, {name: mandatory, type: 530, typeName: T}]}}}, {id: 530, type: {path: [frame_system, limits, WeightsPerClass], def: {fields: [{name: base_extrinsic, type: 9, typeName: Weight}, {name: max_extrinsic, type: 478, typeName: Option<Weight>}, {name: max_total, type: 478, typeName: Option<Weight>}, {name: reserved, type: 478, typeName: Option<Weight>}]}}}, {id: 531, type: {path: [frame_system, limits, BlockLength], def: {fields: [{name: max, type: 532, typeName: PerDispatchClass<u32>}]}}}, {id: 532, type: {path: [frame_support, dispatch, PerDispatchClass], params: [{name: T, type: 4}], def: {fields: [{name: normal, type: 4, typeName: T}, {name: operational, type: 4, typeName: T}, {name: mandatory, type: 4, typeName: T}]}}}, {id: 533, type: {path: [sp_weights, RuntimeDbWeight], def: {fields: [{name: read, type: 11, typeName: u64}, {name: write, type: 11, typeName: u64}]}}}, {id: 534, type: {path: [sp_version, RuntimeVersion], def: {fields: [{name: spec_name, type: 526, typeName: RuntimeString}, {name: impl_name, type: 526, typeName: RuntimeString}, {name: authoring_version, type: 4, typeName: u32}, {name: spec_version, type: 4, typeName: u32}, {name: impl_version, type: 4, typeName: u32}, {name: apis, type: 535, typeName: ApisVec}, {name: transaction_version, type: 4, typeName: u32}, {name: state_version, type: 2, typeName: u8}]}}}, {id: 535, type: {path: [Cow], params: [{name: T, type: 536}], def: {fields: [{type: 536}]}}}, {id: 536, type: {def: {type: 537}}}, {id: 537, type: {def: {fields: [387, 4]}}}, {id: 538, type: {path: [frame_system, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidSpecName, index: 0, docs: [The name of specification does not match between the current runtime, and the new runtime.]}, {name: SpecVersionNeedsToIncrease, index: 1, docs: [The specification version is not allowed to decrease between the current runtime, and the new runtime.]}, {name: FailedToExtractRuntimeVersion, index: 2, docs: [Failed to extract the runtime version from the new runtime., , Either calling `Core_version` or decoding `RuntimeVersion` failed.]}, {name: NonDefaultComposite, index: 3, docs: [Suicide called when the account has non-default composite data.]}, {name: NonZeroRefCount, index: 4, docs: [There is a non-zero reference count preventing the account from being purged.]}, {name: CallFiltered, index: 5, docs: [The origin filter prevent the call to be dispatched.]}, {name: NothingAuthorized, index: 6, docs: [No upgrade authorized.]}, {name: Unauthorized, index: 7, docs: [The submitted code is not authorized.]}]}, docs: [Error for the System pallet]}}, {id: 539, type: {path: [bounded_collections, weak_bounded_vec, WeakBoundedVec], params: [{name: T, type: 540}, {name: S, type: null}], def: {fields: [{type: 541, typeName: Vec<T>}]}}}, {id: 540, type: {def: {fields: [104, 11]}}}, {id: 541, type: {def: {type: 540}}}, {id: 542, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 1}, {name: S, type: null}], def: {fields: [{type: 543, typeName: Vec<T>}]}}}, {id: 543, type: {def: {type: 1}}}, {id: 544, type: {path: [Option], params: [{name: T, type: 545}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 545}], index: 1}]}}}, {id: 545, type: {path: [sp_consensus_babe, digests, PreDigest], def: {variants: [{name: Primary, fields: [{type: 546, typeName: PrimaryPreDigest}], index: 1}, {name: SecondaryPlain, fields: [{type: 548, typeName: SecondaryPlainPreDigest}], index: 2}, {name: SecondaryVRF, fields: [{type: 549, typeName: SecondaryVRFPreDigest}], index: 3}]}}}, {id: 546, type: {path: [sp_consensus_babe, digests, PrimaryPreDigest], def: {fields: [{name: authority_index, type: 4, typeName: super::AuthorityIndex}, {name: slot, type: 105, typeName: Slot}, {name: vrf_signature, type: 547, typeName: VrfSignature}]}}}, {id: 547, type: {path: [sp_core, sr25519, vrf, VrfSignature], def: {fields: [{name: pre_output, type: 1, typeName: VrfPreOutput}, {name: proof, type: 148, typeName: VrfProof}]}}}, {id: 548, type: {path: [sp_consensus_babe, digests, SecondaryPlainPreDigest], def: {fields: [{name: authority_index, type: 4, typeName: super::AuthorityIndex}, {name: slot, type: 105, typeName: Slot}]}}}, {id: 549, type: {path: [sp_consensus_babe, digests, SecondaryVRFPreDigest], def: {fields: [{name: authority_index, type: 4, typeName: super::AuthorityIndex}, {name: slot, type: 105, typeName: Slot}, {name: vrf_signature, type: 547, typeName: VrfSignature}]}}}, {id: 550, type: {path: [sp_consensus_babe, BabeEpochConfiguration], def: {fields: [{name: c, type: 108, typeName: (u64, u64)}, {name: allowed_slots, type: 109, typeName: AllowedSlots}]}}}, {id: 551, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 552}, {name: S, type: null}], def: {fields: [{type: 553, typeName: Vec<T>}]}}}, {id: 552, type: {def: {fields: [11, 4]}}}, {id: 553, type: {def: {type: 552}}}, {id: 554, type: {path: [pallet_babe, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidEquivocationProof, index: 0, docs: [An equivocation proof provided as part of an equivocation report is invalid.]}, {name: InvalidKeyOwnershipProof, index: 1, docs: [A key ownership proof provided as part of an equivocation report is invalid.]}, {name: DuplicateOffenceReport, index: 2, docs: [A given equivocation report is valid but already previously reported.]}, {name: InvalidConfiguration, index: 3, docs: [Submitted configuration is invalid.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 555, type: {def: {fields: [0, 6, 30]}}}, {id: 556, type: {path: [pallet_indices, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotAssigned, index: 0, docs: [The index was not already assigned.]}, {name: NotOwner, index: 1, docs: [The index is assigned to another account.]}, {name: InUse, index: 2, docs: [The index was not available.]}, {name: NotTransfer, index: 3, docs: [The source and destination accounts are identical.]}, {name: Permanent, index: 4, docs: [The index is permanent and may not be freed/changed.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 557, type: {path: [bounded_collections, weak_bounded_vec, WeakBoundedVec], params: [{name: T, type: 558}, {name: S, type: null}], def: {fields: [{type: 560, typeName: Vec<T>}]}}}, {id: 558, type: {path: [pallet_balances, types, BalanceLock], params: [{name: Balance, type: 6}], def: {fields: [{name: id, type: 387, typeName: LockIdentifier}, {name: amount, type: 6, typeName: Balance}, {name: reasons, type: 559, typeName: Reasons}]}}}, {id: 559, type: {path: [pallet_balances, types, Reasons], def: {variants: [{name: Fee, index: 0}, {name: Misc, index: 1}, {name: All, index: 2}]}}}, {id: 560, type: {def: {type: 558}}}, {id: 561, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 562}, {name: S, type: null}], def: {fields: [{type: 563, typeName: Vec<T>}]}}}, {id: 562, type: {path: [pallet_balances, types, ReserveData], params: [{name: ReserveIdentifier, type: 387}, {name: Balance, type: 6}], def: {fields: [{name: id, type: 387, typeName: ReserveIdentifier}, {name: amount, type: 6, typeName: Balance}]}}}, {id: 563, type: {def: {type: 562}}}, {id: 564, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 565}, {name: S, type: null}], def: {fields: [{type: 569, typeName: Vec<T>}]}}}, {id: 565, type: {path: [pallet_balances, types, IdAmount], params: [{name: Id, type: 566}, {name: Balance, type: 6}], def: {fields: [{name: id, type: 566, typeName: Id}, {name: amount, type: 6, typeName: Balance}]}}}, {id: 566, type: {path: [staging_kusama_runtime, RuntimeHoldReason], def: {variants: [{name: Preimage, fields: [{type: 567, typeName: pallet_preimage::HoldReason}], index: 32}, {name: Nis, fields: [{type: 568, typeName: pallet_nis::HoldReason}], index: 38}]}}}, {id: 567, type: {path: [pallet_preimage, pallet, HoldReason], def: {variants: [{name: Preimage, index: 0}]}}}, {id: 568, type: {path: [pallet_nis, pallet, HoldReason], def: {variants: [{name: NftReceipt, index: 0}]}}}, {id: 569, type: {def: {type: 565}}}, {id: 570, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 571}, {name: S, type: null}], def: {fields: [{type: 574, typeName: Vec<T>}]}}}, {id: 571, type: {path: [pallet_balances, types, IdAmount], params: [{name: Id, type: 572}, {name: Balance, type: 6}], def: {fields: [{name: id, type: 572, typeName: Id}, {name: amount, type: 6, typeName: Balance}]}}}, {id: 572, type: {path: [staging_kusama_runtime, RuntimeFreezeReason], def: {variants: [{name: NominationPools, fields: [{type: 573, typeName: pallet_nomination_pools::FreezeReason}], index: 41}]}}}, {id: 573, type: {path: [pallet_nomination_pools, pallet, FreezeReason], def: {variants: [{name: PoolMinBalance, index: 0}]}}}, {id: 574, type: {def: {type: 571}}}, {id: 575, type: {path: [pallet_balances, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: VestingBalance, index: 0, docs: [Vesting balance too high to send value.]}, {name: LiquidityRestrictions, index: 1, docs: [Account liquidity restrictions prevent withdrawal.]}, {name: InsufficientBalance, index: 2, docs: [Balance too low to send value.]}, {name: ExistentialDeposit, index: 3, docs: [Value too low to create account due to existential deposit.]}, {name: Expendability, index: 4, docs: [Transfer/payment would kill account.]}, {name: ExistingVestingSchedule, index: 5, docs: [A vesting schedule already exists for this account.]}, {name: DeadAccount, index: 6, docs: [Beneficiary account must pre-exist.]}, {name: TooManyReserves, index: 7, docs: [Number of named reserves exceed `MaxReserves`.]}, {name: TooManyHolds, index: 8, docs: [Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.]}, {name: TooManyFreezes, index: 9, docs: [Number of freezes exceed `MaxFreezes`.]}, {name: IssuanceDeactivated, index: 10, docs: [The issuance cannot be modified since it is already deactivated.]}, {name: DeltaZero, index: 11, docs: [The delta cannot be zero.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 576, type: {path: [pallet_transaction_payment, Releases], def: {variants: [{name: V1Ancient, index: 0}, {name: V2, index: 1}]}}}, {id: 577, type: {path: [pallet_staking, StakingLedger], params: [{name: T, type: null}], def: {fields: [{name: stash, type: 0, typeName: T::AccountId}, {name: total, type: 55, typeName: BalanceOf<T>}, {name: active, type: 55, typeName: BalanceOf<T>}, {name: unlocking, type: 130, typeName: BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>}, {name: legacy_claimed_rewards, type: 578, typeName: BoundedVec<EraIndex, T::HistoryDepth>}]}}}, {id: 578, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 4}, {name: S, type: null}], def: {fields: [{type: 121, typeName: Vec<T>}]}}}, {id: 579, type: {path: [pallet_staking, Nominations], params: [{name: T, type: null}], def: {fields: [{name: targets, type: 580, typeName: BoundedVec<T::AccountId, MaxNominationsOf<T>>}, {name: submitted_in, type: 4, typeName: EraIndex}, {name: suppressed, type: 30, typeName: bool}]}}}, {id: 580, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 0}, {name: S, type: null}], def: {fields: [{type: 116, typeName: Vec<T>}]}}}, {id: 581, type: {path: [pallet_staking, ActiveEraInfo], def: {fields: [{name: index, type: 4, typeName: EraIndex}, {name: start, type: 582, typeName: Option<u64>}]}}}, {id: 582, type: {path: [Option], params: [{name: T, type: 11}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 11}], index: 1}]}}}, {id: 583, type: {def: {fields: [4, 0]}}}, {id: 584, type: {path: [sp_staking, PagedExposureMetadata], params: [{name: Balance, type: 6}], def: {fields: [{name: total, type: 55, typeName: Balance}, {name: own, type: 55, typeName: Balance}, {name: nominator_count, type: 4, typeName: u32}, {name: page_count, type: 4, typeName: Page}]}}}, {id: 585, type: {def: {fields: [4, 0, 4]}}}, {id: 586, type: {path: [sp_staking, ExposurePage], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: page_total, type: 55, typeName: Balance}, {name: others, type: 56, typeName: Vec<IndividualExposure<AccountId, Balance>>}]}}}, {id: 587, type: {path: [pallet_staking, EraRewardPoints], params: [{name: AccountId, type: 0}], def: {fields: [{name: total, type: 4, typeName: RewardPoint}, {name: individual, type: 588, typeName: BTreeMap<AccountId, RewardPoint>}]}}}, {id: 588, type: {path: [BTreeMap], params: [{name: K, type: 0}, {name: V, type: 4}], def: {fields: [{type: 589}]}}}, {id: 589, type: {def: {type: 590}}}, {id: 590, type: {def: {fields: [0, 4]}}}, {id: 591, type: {def: {type: 592}}}, {id: 592, type: {path: [pallet_staking, UnappliedSlash], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: validator, type: 0, typeName: AccountId}, {name: own, type: 6, typeName: Balance}, {name: others, type: 283, typeName: Vec<(AccountId, Balance)>}, {name: reporters, type: 116, typeName: Vec<AccountId>}, {name: payout, type: 6, typeName: Balance}]}}}, {id: 593, type: {def: {fields: [37, 6]}}}, {id: 594, type: {path: [pallet_staking, slashing, SlashingSpans], def: {fields: [{name: span_index, type: 4, typeName: SpanIndex}, {name: last_start, type: 4, typeName: EraIndex}, {name: last_nonzero_slash, type: 4, typeName: EraIndex}, {name: prior, type: 121, typeName: Vec<EraIndex>}]}}}, {id: 595, type: {path: [pallet_staking, slashing, SpanRecord], params: [{name: Balance, type: 6}], def: {fields: [{name: slashed, type: 6, typeName: Balance}, {name: paid_out, type: 6, typeName: Balance}]}}}, {id: 596, type: {def: {type: 597}}}, {id: 597, type: {def: {fields: [4, 30]}}}, {id: 598, type: {path: [pallet_staking, pallet, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotController, index: 0, docs: [Not a controller account.]}, {name: NotStash, index: 1, docs: [Not a stash account.]}, {name: AlreadyBonded, index: 2, docs: [Stash is already bonded.]}, {name: AlreadyPaired, index: 3, docs: [Controller is already paired.]}, {name: EmptyTargets, index: 4, docs: [Targets cannot be empty.]}, {name: DuplicateIndex, index: 5, docs: [Duplicate index.]}, {name: InvalidSlashIndex, index: 6, docs: [Slash record index out of bounds.]}, {name: InsufficientBond, index: 7, docs: [Cannot have a validator or nominator role, with value less than the minimum defined by, governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the, intention, `chill` first to remove one's role as validator/nominator.]}, {name: NoMoreChunks, index: 8, docs: [Can not schedule more unlock chunks.]}, {name: NoUnlockChunk, index: 9, docs: [Can not rebond without unlocking chunks.]}, {name: FundedTarget, index: 10, docs: [Attempting to target a stash that still has funds.]}, {name: InvalidEraToReward, index: 11, docs: [Invalid era to reward.]}, {name: InvalidNumberOfNominations, index: 12, docs: [Invalid number of nominations.]}, {name: NotSortedAndUnique, index: 13, docs: [Items are not sorted and unique.]}, {name: AlreadyClaimed, index: 14, docs: [Rewards for this era have already been claimed for this validator.]}, {name: InvalidPage, index: 15, docs: [No nominators exist on this page.]}, {name: IncorrectHistoryDepth, index: 16, docs: [Incorrect previous history depth input provided.]}, {name: IncorrectSlashingSpans, index: 17, docs: [Incorrect number of slashing spans provided.]}, {name: BadState, index: 18, docs: [Internal state has become somehow corrupted and the operation cannot continue.]}, {name: TooManyTargets, index: 19, docs: [Too many nomination targets supplied.]}, {name: BadTarget, index: 20, docs: [A nomination target was supplied that was blocked or otherwise not a validator.]}, {name: CannotChillOther, index: 21, docs: [The user has enough bond and thus cannot be chilled forcefully by an external person.]}, {name: TooManyNominators, index: 22, docs: [There are too many nominators in the system. Governance needs to adjust the staking, settings to keep things safe for the runtime.]}, {name: TooManyValidators, index: 23, docs: [There are too many validator candidates in the system. Governance needs to adjust the, staking settings to keep things safe for the runtime.]}, {name: CommissionTooLow, index: 24, docs: [Commission is too low. Must be at least `MinCommission`.]}, {name: BoundNotMet, index: 25, docs: [Some bound is not met.]}, {name: ControllerDeprecated, index: 26, docs: [Used when attempting to use deprecated controller account logic.]}, {name: CannotRestoreLedger, index: 27, docs: [Cannot reset a ledger.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 599, type: {path: [sp_staking, offence, OffenceDetails], params: [{name: Reporter, type: 0}, {name: Offender, type: 53}], def: {fields: [{name: offender, type: 53, typeName: Offender}, {name: reporters, type: 116, typeName: Vec<Reporter>}]}}}, {id: 600, type: {def: {fields: [42, 13]}}}, {id: 601, type: {def: {fields: [12, 4]}}}, {id: 602, type: {def: {type: 603}}}, {id: 603, type: {def: {fields: [0, 134]}}}, {id: 604, type: {def: {fields: [605, 13]}}}, {id: 605, type: {path: [sp_core, crypto, KeyTypeId], def: {fields: [{type: 17, typeName: [u8; 4]}]}}}, {id: 606, type: {path: [pallet_session, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidProof, index: 0, docs: [Invalid ownership proof.]}, {name: NoAssociatedValidatorId, index: 1, docs: [No associated validator ID for account.]}, {name: DuplicatedKey, index: 2, docs: [Registered duplicate key.]}, {name: NoKeys, index: 3, docs: [No keys are associated with this account.]}, {name: NoAccount, index: 4, docs: [Key setting account is not live, so it's impossible to associate keys.]}]}, docs: [Error for the session pallet.]}}, {id: 607, type: {path: [pallet_grandpa, StoredState], params: [{name: N, type: 4}], def: {variants: [{name: Live, index: 0}, {name: PendingPause, fields: [{name: scheduled_at, type: 4, typeName: N}, {name: delay, type: 4, typeName: N}], index: 1}, {name: Paused, index: 2}, {name: PendingResume, fields: [{name: scheduled_at, type: 4, typeName: N}, {name: delay, type: 4, typeName: N}], index: 3}]}}}, {id: 608, type: {path: [pallet_grandpa, StoredPendingChange], params: [{name: N, type: 4}, {name: Limit, type: null}], def: {fields: [{name: scheduled_at, type: 4, typeName: N}, {name: delay, type: 4, typeName: N}, {name: next_authorities, type: 609, typeName: BoundedAuthorityList<Limit>}, {name: forced, type: 154, typeName: Option<N>}]}}}, {id: 609, type: {path: [bounded_collections, weak_bounded_vec, WeakBoundedVec], params: [{name: T, type: 46}, {name: S, type: null}], def: {fields: [{type: 45, typeName: Vec<T>}]}}}, {id: 610, type: {path: [pallet_grandpa, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: PauseFailed, index: 0, docs: [Attempt to signal GRANDPA pause when the authority set isn't live, (either paused or already pending pause).]}, {name: ResumeFailed, index: 1, docs: [Attempt to signal GRANDPA resume when the authority set isn't paused, (either live or already pending resume).]}, {name: ChangePending, index: 2, docs: [Attempt to signal GRANDPA change with one already pending.]}, {name: TooSoon, index: 3, docs: [Cannot signal forced change so soon after last.]}, {name: InvalidKeyOwnershipProof, index: 4, docs: [A key ownership proof provided as part of an equivocation report is invalid.]}, {name: InvalidEquivocationProof, index: 5, docs: [An equivocation proof provided as part of an equivocation report is invalid.]}, {name: DuplicateOffenceReport, index: 6, docs: [A given equivocation report is valid but already previously reported.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 611, type: {path: [bounded_collections, weak_bounded_vec, WeakBoundedVec], params: [{name: T, type: 137}, {name: S, type: null}], def: {fields: [{type: 612, typeName: Vec<T>}]}}}, {id: 612, type: {def: {type: 137}}}, {id: 613, type: {path: [pallet_treasury, Proposal], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: proposer, type: 0, typeName: AccountId}, {name: value, type: 6, typeName: Balance}, {name: beneficiary, type: 0, typeName: AccountId}, {name: bond, type: 6, typeName: Balance}]}}}, {id: 614, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 4}, {name: S, type: null}], def: {fields: [{type: 121, typeName: Vec<T>}]}}}, {id: 615, type: {path: [pallet_treasury, SpendStatus], params: [{name: AssetKind, type: 59}, {name: AssetBalance, type: 6}, {name: Beneficiary, type: 84}, {name: BlockNumber, type: 4}, {name: PaymentId, type: 11}], def: {fields: [{name: asset_kind, type: 59, typeName: AssetKind}, {name: amount, type: 6, typeName: AssetBalance}, {name: beneficiary, type: 84, typeName: Beneficiary}, {name: valid_from, type: 4, typeName: BlockNumber}, {name: expire_at, type: 4, typeName: BlockNumber}, {name: status, type: 616, typeName: PaymentState<PaymentId>}]}}}, {id: 616, type: {path: [pallet_treasury, PaymentState], params: [{name: Id, type: 11}], def: {variants: [{name: Pending, index: 0}, {name: Attempted, fields: [{name: id, type: 11, typeName: Id}], index: 1}, {name: Failed, index: 2}]}}}, {id: 617, type: {path: [sp_arithmetic, per_things, Permill], def: {fields: [{type: 4, typeName: u32}]}}}, {id: 618, type: {path: [frame_support, PalletId], def: {fields: [{type: 387, typeName: [u8; 8]}]}}}, {id: 619, type: {path: [pallet_treasury, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: InsufficientProposersBalance, index: 0, docs: [Proposer's balance is too low.]}, {name: InvalidIndex, index: 1, docs: [No proposal, bounty or spend at that index.]}, {name: TooManyApprovals, index: 2, docs: [Too many approvals in the queue.]}, {name: InsufficientPermission, index: 3, docs: [The spend origin is valid but the amount it is allowed to spend is lower than the, amount to be spent.]}, {name: ProposalNotApproved, index: 4, docs: [Proposal has not been approved.]}, {name: FailedToConvertBalance, index: 5, docs: [The balance of the asset kind is not convertible to the balance of the native asset.]}, {name: SpendExpired, index: 6, docs: [The spend has expired and cannot be claimed.]}, {name: EarlyPayout, index: 7, docs: [The spend is not yet eligible for payout.]}, {name: AlreadyAttempted, index: 8, docs: [The payment has already been attempted.]}, {name: PayoutError, index: 9, docs: [There was some issue with the mechanism of payment.]}, {name: NotAttempted, index: 10, docs: [The payout was not yet attempted/claimed.]}, {name: Inconclusive, index: 11, docs: [The payment has neither failed nor succeeded yet.]}]}, docs: [Error for the treasury pallet.]}}, {id: 620, type: {def: {fields: [0, 94]}}}, {id: 621, type: {path: [pallet_conviction_voting, vote, Voting], params: [{name: Balance, type: 6}, {name: AccountId, type: 0}, {name: BlockNumber, type: 4}, {name: PollIndex, type: 4}, {name: MaxVotes, type: null}], def: {variants: [{name: Casting, fields: [{type: 622, typeName: Casting<Balance, BlockNumber, PollIndex, MaxVotes>}], index: 0}, {name: Delegating, fields: [{type: 628, typeName: Delegating<Balance, AccountId, BlockNumber>}], index: 1}]}}}, {id: 622, type: {path: [pallet_conviction_voting, vote, Casting], params: [{name: Balance, type: 6}, {name: BlockNumber, type: 4}, {name: PollIndex, type: 4}, {name: MaxVotes, type: null}], def: {fields: [{name: votes, type: 623, typeName: BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>}, {name: delegations, type: 626, typeName: Delegations<Balance>}, {name: prior, type: 627, typeName: PriorLock<BlockNumber, Balance>}]}}}, {id: 623, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 624}, {name: S, type: null}], def: {fields: [{type: 625, typeName: Vec<T>}]}}}, {id: 624, type: {def: {fields: [4, 156]}}}, {id: 625, type: {def: {type: 624}}}, {id: 626, type: {path: [pallet_conviction_voting, types, Delegations], params: [{name: Balance, type: 6}], def: {fields: [{name: votes, type: 6, typeName: Balance}, {name: capital, type: 6, typeName: Balance}]}}}, {id: 627, type: {path: [pallet_conviction_voting, vote, PriorLock], params: [{name: BlockNumber, type: 4}, {name: Balance, type: 6}], def: {fields: [{type: 4, typeName: BlockNumber}, {type: 6, typeName: Balance}]}}}, {id: 628, type: {path: [pallet_conviction_voting, vote, Delegating], params: [{name: Balance, type: 6}, {name: AccountId, type: 0}, {name: BlockNumber, type: 4}], def: {fields: [{name: balance, type: 6, typeName: Balance}, {name: target, type: 0, typeName: AccountId}, {name: conviction, type: 158, typeName: Conviction}, {name: delegations, type: 626, typeName: Delegations<Balance>}, {name: prior, type: 627, typeName: PriorLock<BlockNumber, Balance>}]}}}, {id: 629, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 630}, {name: S, type: null}], def: {fields: [{type: 631, typeName: Vec<T>}]}}}, {id: 630, type: {def: {fields: [94, 6]}}}, {id: 631, type: {def: {type: 630}}}, {id: 632, type: {path: [pallet_conviction_voting, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: NotOngoing, index: 0, docs: [Poll is not ongoing.]}, {name: NotVoter, index: 1, docs: [The given account did not vote on the poll.]}, {name: NoPermission, index: 2, docs: [The actor has no permission to conduct the action.]}, {name: NoPermissionYet, index: 3, docs: [The actor has no permission to conduct the action right now but will do in the future.]}, {name: AlreadyDelegating, index: 4, docs: [The account is already delegating.]}, {name: AlreadyVoting, index: 5, docs: [The account currently has votes attached to it and the operation cannot succeed until, these are removed, either through `unvote` or `reap_vote`.]}, {name: InsufficientFunds, index: 6, docs: [Too high a balance was provided that the account cannot afford.]}, {name: NotDelegating, index: 7, docs: [The account is not currently delegating.]}, {name: Nonsense, index: 8, docs: [Delegation to oneself makes no sense.]}, {name: MaxVotesReached, index: 9, docs: [Maximum number of votes reached.]}, {name: ClassNeeded, index: 10, docs: [The class must be supplied since it is not easily determinable from the state.]}, {name: BadClass, index: 11, docs: [The class ID supplied is invalid.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 633, type: {path: [pallet_referenda, types, ReferendumInfo], params: [{name: TrackId, type: 94}, {name: RuntimeOrigin, type: 161}, {name: Moment, type: 4}, {name: Call, type: 95}, {name: Balance, type: 6}, {name: Tally, type: 470}, {name: AccountId, type: 0}, {name: ScheduleAddress, type: 189}], def: {variants: [{name: Ongoing, fields: [{type: 634, typeName: ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,
AccountId, ScheduleAddress,>}], index: 0}, {name: Approved, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 1}, {name: Rejected, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 2}, {name: Cancelled, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 3}, {name: TimedOut, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 4}, {name: Killed, fields: [{type: 4, typeName: Moment}], index: 5}]}}}, {id: 634, type: {path: [pallet_referenda, types, ReferendumStatus], params: [{name: TrackId, type: 94}, {name: RuntimeOrigin, type: 161}, {name: Moment, type: 4}, {name: Call, type: 95}, {name: Balance, type: 6}, {name: Tally, type: 470}, {name: AccountId, type: 0}, {name: ScheduleAddress, type: 189}], def: {fields: [{name: track, type: 94, typeName: TrackId}, {name: origin, type: 161, typeName: RuntimeOrigin}, {name: proposal, type: 95, typeName: Call}, {name: enactment, type: 168, typeName: DispatchTime<Moment>}, {name: submitted, type: 4, typeName: Moment}, {name: submission_deposit, type: 635, typeName: Deposit<AccountId, Balance>}, {name: decision_deposit, type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {name: deciding, type: 637, typeName: Option<DecidingStatus<Moment>>}, {name: tally, type: 470, typeName: Tally}, {name: in_queue, type: 30, typeName: bool}, {name: alarm, type: 639, typeName: Option<(Moment, ScheduleAddress)>}]}}}, {id: 635, type: {path: [pallet_referenda, types, Deposit], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: who, type: 0, typeName: AccountId}, {name: amount, type: 6, typeName: Balance}]}}}, {id: 636, type: {path: [Option], params: [{name: T, type: 635}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 635}], index: 1}]}}}, {id: 637, type: {path: [Option], params: [{name: T, type: 638}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 638}], index: 1}]}}}, {id: 638, type: {path: [pallet_referenda, types, DecidingStatus], params: [{name: BlockNumber, type: 4}], def: {fields: [{name: since, type: 4, typeName: BlockNumber}, {name: confirming, type: 154, typeName: Option<BlockNumber>}]}}}, {id: 639, type: {path: [Option], params: [{name: T, type: 640}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 640}], index: 1}]}}}, {id: 640, type: {def: {fields: [4, 189]}}}, {id: 641, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 642}, {name: S, type: null}], def: {fields: [{type: 643, typeName: Vec<T>}]}}}, {id: 642, type: {def: {fields: [4, 6]}}}, {id: 643, type: {def: {type: 642}}}, {id: 644, type: {def: {type: 645}}}, {id: 645, type: {def: {fields: [94, 646]}}}, {id: 646, type: {path: [pallet_referenda, types, TrackInfo], params: [{name: Balance, type: 6}, {name: Moment, type: 4}], def: {fields: [{name: name, type: 526, typeName: &'static str}, {name: max_deciding, type: 4, typeName: u32}, {name: decision_deposit, type: 6, typeName: Balance}, {name: prepare_period, type: 4, typeName: Moment}, {name: decision_period, type: 4, typeName: Moment}, {name: confirm_period, type: 4, typeName: Moment}, {name: min_enactment_period, type: 4, typeName: Moment}, {name: min_approval, type: 647, typeName: Curve}, {name: min_support, type: 647, typeName: Curve}]}}}, {id: 647, type: {path: [pallet_referenda, types, Curve], def: {variants: [{name: LinearDecreasing, fields: [{name: length, type: 37, typeName: Perbill}, {name: floor, type: 37, typeName: Perbill}, {name: ceil, type: 37, typeName: Perbill}], index: 0}, {name: SteppedDecreasing, fields: [{name: begin, type: 37, typeName: Perbill}, {name: end, type: 37, typeName: Perbill}, {name: step, type: 37, typeName: Perbill}, {name: period, type: 37, typeName: Perbill}], index: 1}, {name: Reciprocal, fields: [{name: factor, type: 648, typeName: FixedI64}, {name: x_offset, type: 648, typeName: FixedI64}, {name: y_offset, type: 648, typeName: FixedI64}], index: 2}]}}}, {id: 648, type: {path: [sp_arithmetic, fixed_point, FixedI64], def: {fields: [{type: 649, typeName: i64}]}}}, {id: 649, type: {def: {primitive: i64}}}, {id: 650, type: {path: [pallet_referenda, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: NotOngoing, index: 0, docs: [Referendum is not ongoing.]}, {name: HasDeposit, index: 1, docs: [Referendum's decision deposit is already paid.]}, {name: BadTrack, index: 2, docs: [The track identifier given was invalid.]}, {name: Full, index: 3, docs: [There are already a full complement of referenda in progress for this track.]}, {name: QueueEmpty, index: 4, docs: [The queue of the track is empty.]}, {name: BadReferendum, index: 5, docs: [The referendum index provided is invalid in this context.]}, {name: NothingToDo, index: 6, docs: [There was nothing to do in the advancement.]}, {name: NoTrack, index: 7, docs: [No track exists for the proposal origin.]}, {name: Unfinished, index: 8, docs: [Any deposit cannot be refunded until after the decision is over.]}, {name: NoPermission, index: 9, docs: [The deposit refunder is not the depositor.]}, {name: NoDeposit, index: 10, docs: [The deposit cannot be refunded since none was made.]}, {name: BadStatus, index: 11, docs: [The referendum status is invalid for this operation.]}, {name: PreimageNotExist, index: 12, docs: [The preimage does not exist.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 651, type: {path: [pallet_ranked_collective, MemberRecord], def: {fields: [{name: rank, type: 94, typeName: Rank}]}}}, {id: 652, type: {def: {fields: [94, 0]}}}, {id: 653, type: {def: {fields: [94, 4]}}}, {id: 654, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 655, type: {path: [pallet_ranked_collective, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: AlreadyMember, index: 0, docs: [Account is already a member.]}, {name: NotMember, index: 1, docs: [Account is not a member.]}, {name: NotPolling, index: 2, docs: [The given poll index is unknown or has closed.]}, {name: Ongoing, index: 3, docs: [The given poll is still ongoing.]}, {name: NoneRemaining, index: 4, docs: [There are no further records to be removed.]}, {name: Corruption, index: 5, docs: [Unexpected error in state.]}, {name: RankTooLow, index: 6, docs: [The member's rank is too low to vote.]}, {name: InvalidWitness, index: 7, docs: [The information provided is incorrect.]}, {name: NoPermission, index: 8, docs: [The origin is not sufficiently privileged to do the operation.]}, {name: SameMember, index: 9, docs: [The new member to exchange is the same as the old member]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 656, type: {path: [pallet_referenda, types, ReferendumInfo], params: [{name: TrackId, type: 94}, {name: RuntimeOrigin, type: 161}, {name: Moment, type: 4}, {name: Call, type: 95}, {name: Balance, type: 6}, {name: Tally, type: 473}, {name: AccountId, type: 0}, {name: ScheduleAddress, type: 189}], def: {variants: [{name: Ongoing, fields: [{type: 657, typeName: ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,
AccountId, ScheduleAddress,>}], index: 0}, {name: Approved, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 1}, {name: Rejected, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 2}, {name: Cancelled, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 3}, {name: TimedOut, fields: [{type: 4, typeName: Moment}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {type: 636, typeName: Option<Deposit<AccountId, Balance>>}], index: 4}, {name: Killed, fields: [{type: 4, typeName: Moment}], index: 5}]}}}, {id: 657, type: {path: [pallet_referenda, types, ReferendumStatus], params: [{name: TrackId, type: 94}, {name: RuntimeOrigin, type: 161}, {name: Moment, type: 4}, {name: Call, type: 95}, {name: Balance, type: 6}, {name: Tally, type: 473}, {name: AccountId, type: 0}, {name: ScheduleAddress, type: 189}], def: {fields: [{name: track, type: 94, typeName: TrackId}, {name: origin, type: 161, typeName: RuntimeOrigin}, {name: proposal, type: 95, typeName: Call}, {name: enactment, type: 168, typeName: DispatchTime<Moment>}, {name: submitted, type: 4, typeName: Moment}, {name: submission_deposit, type: 635, typeName: Deposit<AccountId, Balance>}, {name: decision_deposit, type: 636, typeName: Option<Deposit<AccountId, Balance>>}, {name: deciding, type: 637, typeName: Option<DecidingStatus<Moment>>}, {name: tally, type: 473, typeName: Tally}, {name: in_queue, type: 30, typeName: bool}, {name: alarm, type: 639, typeName: Option<(Moment, ScheduleAddress)>}]}}}, {id: 658, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 189}, {name: S, type: null}], def: {fields: [{type: 524, typeName: Vec<T>}]}}}, {id: 659, type: {path: [pallet_referenda, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: NotOngoing, index: 0, docs: [Referendum is not ongoing.]}, {name: HasDeposit, index: 1, docs: [Referendum's decision deposit is already paid.]}, {name: BadTrack, index: 2, docs: [The track identifier given was invalid.]}, {name: Full, index: 3, docs: [There are already a full complement of referenda in progress for this track.]}, {name: QueueEmpty, index: 4, docs: [The queue of the track is empty.]}, {name: BadReferendum, index: 5, docs: [The referendum index provided is invalid in this context.]}, {name: NothingToDo, index: 6, docs: [There was nothing to do in the advancement.]}, {name: NoTrack, index: 7, docs: [No track exists for the proposal origin.]}, {name: Unfinished, index: 8, docs: [Any deposit cannot be refunded until after the decision is over.]}, {name: NoPermission, index: 9, docs: [The deposit refunder is not the depositor.]}, {name: NoDeposit, index: 10, docs: [The deposit cannot be refunded since none was made.]}, {name: BadStatus, index: 11, docs: [The referendum status is invalid for this operation.]}, {name: PreimageNotExist, index: 12, docs: [The preimage does not exist.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 660, type: {path: [pallet_whitelist, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: UnavailablePreImage, index: 0, docs: [The preimage of the call hash could not be loaded.]}, {name: UndecodableCall, index: 1, docs: [The call could not be decoded.]}, {name: InvalidCallWeightWitness, index: 2, docs: [The weight of the decoded call was higher than the witness.]}, {name: CallIsNotWhitelisted, index: 3, docs: [The call was not whitelisted.]}, {name: CallAlreadyWhitelisted, index: 4, docs: [The call was already whitelisted; No-Op.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 661, type: {path: [polkadot_runtime_common, claims, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidEthereumSignature, index: 0, docs: [Invalid Ethereum signature.]}, {name: SignerHasNoClaim, index: 1, docs: [Ethereum address has no claim.]}, {name: SenderHasNoClaim, index: 2, docs: [Account ID sending transaction has no claim.]}, {name: PotUnderflow, index: 3, docs: [There's not enough in the pot to pay out some unvested amount. Generally implies a, logic error.]}, {name: InvalidStatement, index: 4, docs: [A needed statement was not included.]}, {name: VestedBalanceExists, index: 5, docs: [The account already has a vested balance.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 662, type: {path: [pallet_utility, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: TooManyCalls, index: 0, docs: [Too many calls batched.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 663, type: {path: [pallet_society, MemberRecord], def: {fields: [{name: rank, type: 4, typeName: Rank}, {name: strikes, type: 4, typeName: StrikeCount}, {name: vouching, type: 664, typeName: Option<VouchingStatus>}, {name: index, type: 4, typeName: u32}]}}}, {id: 664, type: {path: [Option], params: [{name: T, type: 665}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 665}], index: 1}]}}}, {id: 665, type: {path: [pallet_society, VouchingStatus], def: {variants: [{name: Vouching, index: 0}, {name: Banned, index: 1}]}}}, {id: 666, type: {path: [pallet_society, PayoutRecord], params: [{name: Balance, type: 6}, {name: PayoutsVec, type: 667}], def: {fields: [{name: paid, type: 6, typeName: Balance}, {name: payouts, type: 667, typeName: PayoutsVec}]}}}, {id: 667, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 642}, {name: S, type: null}], def: {fields: [{type: 643, typeName: Vec<T>}]}}}, {id: 668, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 669}, {name: S, type: null}], def: {fields: [{type: 671, typeName: Vec<T>}]}}}, {id: 669, type: {path: [pallet_society, Bid], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: who, type: 0, typeName: AccountId}, {name: kind, type: 670, typeName: BidKind<AccountId, Balance>}, {name: value, type: 6, typeName: Balance}]}}}, {id: 670, type: {path: [pallet_society, BidKind], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {variants: [{name: Deposit, fields: [{type: 6, typeName: Balance}], index: 0}, {name: Vouch, fields: [{type: 0, typeName: AccountId}, {type: 6, typeName: Balance}], index: 1}]}}}, {id: 671, type: {def: {type: 669}}}, {id: 672, type: {path: [pallet_society, Candidacy], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: round, type: 4, typeName: RoundIndex}, {name: kind, type: 670, typeName: BidKind<AccountId, Balance>}, {name: bid, type: 6, typeName: Balance}, {name: tally, type: 673, typeName: Tally}, {name: skeptic_struck, type: 30, typeName: bool}]}}}, {id: 673, type: {path: [pallet_society, Tally], def: {fields: [{name: approvals, type: 4, typeName: VoteCount}, {name: rejections, type: 4, typeName: VoteCount}]}}}, {id: 674, type: {def: {fields: [0, 0]}}}, {id: 675, type: {path: [pallet_society, Vote], def: {fields: [{name: approve, type: 30, typeName: bool}, {name: weight, type: 4, typeName: u32}]}}}, {id: 676, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 677, type: {path: [pallet_society, IntakeRecord], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: who, type: 0, typeName: AccountId}, {name: bid, type: 6, typeName: Balance}, {name: round, type: 4, typeName: RoundIndex}]}}}, {id: 678, type: {def: {fields: [0, 0, 673]}}}, {id: 679, type: {path: [pallet_society, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: NotMember, index: 0, docs: [User is not a member.]}, {name: AlreadyMember, index: 1, docs: [User is already a member.]}, {name: Suspended, index: 2, docs: [User is suspended.]}, {name: NotSuspended, index: 3, docs: [User is not suspended.]}, {name: NoPayout, index: 4, docs: [Nothing to payout.]}, {name: AlreadyFounded, index: 5, docs: [Society already founded.]}, {name: InsufficientPot, index: 6, docs: [Not enough in pot to accept candidate.]}, {name: AlreadyVouching, index: 7, docs: [Member is already vouching or banned from vouching again.]}, {name: NotVouchingOnBidder, index: 8, docs: [Member is not vouching.]}, {name: Head, index: 9, docs: [Cannot remove the head of the chain.]}, {name: Founder, index: 10, docs: [Cannot remove the founder.]}, {name: AlreadyBid, index: 11, docs: [User has already made a bid.]}, {name: AlreadyCandidate, index: 12, docs: [User is already a candidate.]}, {name: NotCandidate, index: 13, docs: [User is not a candidate.]}, {name: MaxMembers, index: 14, docs: [Too many members in the society.]}, {name: NotFounder, index: 15, docs: [The caller is not the founder.]}, {name: NotHead, index: 16, docs: [The caller is not the head.]}, {name: NotApproved, index: 17, docs: [The membership cannot be claimed as the candidate was not clearly approved.]}, {name: NotRejected, index: 18, docs: [The candidate cannot be kicked as the candidate was not clearly rejected.]}, {name: Approved, index: 19, docs: [The candidacy cannot be dropped as the candidate was clearly approved.]}, {name: Rejected, index: 20, docs: [The candidacy cannot be bestowed as the candidate was clearly rejected.]}, {name: InProgress, index: 21, docs: [The candidacy cannot be concluded as the voting is still in progress.]}, {name: TooEarly, index: 22, docs: [The candidacy cannot be pruned until a full additional intake period has passed.]}, {name: Voted, index: 23, docs: [The skeptic already voted.]}, {name: Expired, index: 24, docs: [The skeptic need not vote on candidates from expired rounds.]}, {name: NotBidder, index: 25, docs: [User is not a bidder.]}, {name: NoDefender, index: 26, docs: [There is no defender currently.]}, {name: NotGroup, index: 27, docs: [Group doesn't exist.]}, {name: AlreadyElevated, index: 28, docs: [The member is already elevated to this rank.]}, {name: AlreadyPunished, index: 29, docs: [The skeptic has already been punished for this offence.]}, {name: InsufficientFunds, index: 30, docs: [Funds are insufficient to pay off society debts.]}, {name: NoVotes, index: 31, docs: [The candidate/defender has no stale votes to remove.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 680, type: {path: [pallet_recovery, RecoveryConfig], params: [{name: BlockNumber, type: 4}, {name: Balance, type: 6}, {name: Friends, type: 681}], def: {fields: [{name: delay_period, type: 4, typeName: BlockNumber}, {name: deposit, type: 6, typeName: Balance}, {name: friends, type: 681, typeName: Friends}, {name: threshold, type: 94, typeName: u16}]}}}, {id: 681, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 0}, {name: S, type: null}], def: {fields: [{type: 116, typeName: Vec<T>}]}}}, {id: 682, type: {path: [pallet_recovery, ActiveRecovery], params: [{name: BlockNumber, type: 4}, {name: Balance, type: 6}, {name: Friends, type: 681}], def: {fields: [{name: created, type: 4, typeName: BlockNumber}, {name: deposit, type: 6, typeName: Balance}, {name: friends, type: 681, typeName: Friends}]}}}, {id: 683, type: {path: [pallet_recovery, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotAllowed, index: 0, docs: [User is not allowed to make a call on behalf of this account]}, {name: ZeroThreshold, index: 1, docs: [Threshold must be greater than zero]}, {name: NotEnoughFriends, index: 2, docs: [Friends list must be greater than zero and threshold]}, {name: MaxFriends, index: 3, docs: [Friends list must be less than max friends]}, {name: NotSorted, index: 4, docs: [Friends list must be sorted and free of duplicates]}, {name: NotRecoverable, index: 5, docs: [This account is not set up for recovery]}, {name: AlreadyRecoverable, index: 6, docs: [This account is already set up for recovery]}, {name: AlreadyStarted, index: 7, docs: [A recovery process has already started for this account]}, {name: NotStarted, index: 8, docs: [A recovery process has not started for this rescuer]}, {name: NotFriend, index: 9, docs: [This account is not a friend who can vouch]}, {name: DelayPeriod, index: 10, docs: [The friend must wait until the delay period to vouch for this recovery]}, {name: AlreadyVouched, index: 11, docs: [This user has already vouched for this recovery]}, {name: Threshold, index: 12, docs: [The threshold for recovering this account has not been met]}, {name: StillActive, index: 13, docs: [There are still active recovery attempts that need to be closed]}, {name: AlreadyProxy, index: 14, docs: [This account is already set up for recovery]}, {name: BadState, index: 15, docs: [Some internal state is broken.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 684, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 186}, {name: S, type: null}], def: {fields: [{type: 685, typeName: Vec<T>}]}}}, {id: 685, type: {def: {type: 186}}}, {id: 686, type: {path: [pallet_vesting, Releases], def: {variants: [{name: V0, index: 0}, {name: V1, index: 1}]}}}, {id: 687, type: {path: [pallet_vesting, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotVesting, index: 0, docs: [The account given is not vesting.]}, {name: AtMaxVestingSchedules, index: 1, docs: [The account already has `MaxVestingSchedules` count of schedules and thus, cannot add another one. Consider merging existing schedules in order to add another.]}, {name: AmountLow, index: 2, docs: [Amount being transferred is too low to create a vesting schedule.]}, {name: ScheduleIndexOutOfBounds, index: 3, docs: [An index was out of bounds of the vesting schedules.]}, {name: InvalidScheduleParams, index: 4, docs: [Failed to create a new schedule because some parameter was invalid.]}]}, docs: [Error for the vesting pallet.]}}, {id: 688, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 689}, {name: S, type: null}], def: {fields: [{type: 691, typeName: Vec<T>}]}}}, {id: 689, type: {path: [Option], params: [{name: T, type: 690}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 690}], index: 1}]}}}, {id: 690, type: {path: [pallet_scheduler, Scheduled], params: [{name: Name, type: 1}, {name: Call, type: 95}, {name: BlockNumber, type: 4}, {name: PalletsOrigin, type: 161}, {name: AccountId, type: 0}], def: {fields: [{name: maybe_id, type: 488, typeName: Option<Name>}, {name: priority, type: 2, typeName: schedule::Priority}, {name: call, type: 95, typeName: Call}, {name: maybe_periodic, type: 188, typeName: Option<schedule::Period<BlockNumber>>}, {name: origin, type: 161, typeName: PalletsOrigin}]}}}, {id: 691, type: {def: {type: 689}}}, {id: 692, type: {path: [pallet_scheduler, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: FailedToSchedule, index: 0, docs: [Failed to schedule a call]}, {name: NotFound, index: 1, docs: [Cannot find the scheduled call.]}, {name: TargetBlockNumberInPast, index: 2, docs: [Given target block number is in the past.]}, {name: RescheduleNoChange, index: 3, docs: [Reschedule failed because it does not change scheduled time.]}, {name: Named, index: 4, docs: [Attempt to use a non-named function on a named task.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 693, type: {def: {fields: [694, 6]}}}, {id: 694, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 695}, {name: S, type: null}], def: {fields: [{type: 696, typeName: Vec<T>}]}}}, {id: 695, type: {path: [pallet_proxy, ProxyDefinition], params: [{name: AccountId, type: 0}, {name: ProxyType, type: 192}, {name: BlockNumber, type: 4}], def: {fields: [{name: delegate, type: 0, typeName: AccountId}, {name: proxy_type, type: 192, typeName: ProxyType}, {name: delay, type: 4, typeName: BlockNumber}]}}}, {id: 696, type: {def: {type: 695}}}, {id: 697, type: {def: {fields: [698, 6]}}}, {id: 698, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 699}, {name: S, type: null}], def: {fields: [{type: 700, typeName: Vec<T>}]}}}, {id: 699, type: {path: [pallet_proxy, Announcement], params: [{name: AccountId, type: 0}, {name: Hash, type: 12}, {name: BlockNumber, type: 4}], def: {fields: [{name: real, type: 0, typeName: AccountId}, {name: call_hash, type: 12, typeName: Hash}, {name: height, type: 4, typeName: BlockNumber}]}}}, {id: 700, type: {def: {type: 699}}}, {id: 701, type: {path: [pallet_proxy, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: TooMany, index: 0, docs: [There are too many proxies registered or too many announcements pending.]}, {name: NotFound, index: 1, docs: [Proxy registration not found.]}, {name: NotProxy, index: 2, docs: [Sender is not a proxy of the account to be proxied.]}, {name: Unproxyable, index: 3, docs: [A call which is incompatible with the proxy type's filter was attempted.]}, {name: Duplicate, index: 4, docs: [Account is already a proxy.]}, {name: NoPermission, index: 5, docs: [Call may not be made by proxy because it may escalate its privileges.]}, {name: Unannounced, index: 6, docs: [Announcement, if made at all, was made too recently.]}, {name: NoSelfProxy, index: 7, docs: [Cannot add self as proxy.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 702, type: {def: {fields: [0, 1]}}}, {id: 703, type: {path: [pallet_multisig, Multisig], params: [{name: BlockNumber, type: 4}, {name: Balance, type: 6}, {name: AccountId, type: 0}, {name: MaxApprovals, type: null}], def: {fields: [{name: when, type: 195, typeName: Timepoint<BlockNumber>}, {name: deposit, type: 6, typeName: Balance}, {name: depositor, type: 0, typeName: AccountId}, {name: approvals, type: 704, typeName: BoundedVec<AccountId, MaxApprovals>}]}}}, {id: 704, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 0}, {name: S, type: null}], def: {fields: [{type: 116, typeName: Vec<T>}]}}}, {id: 705, type: {path: [pallet_multisig, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: MinimumThreshold, index: 0, docs: [Threshold must be 2 or greater.]}, {name: AlreadyApproved, index: 1, docs: [Call is already approved by this signatory.]}, {name: NoApprovalsNeeded, index: 2, docs: [Call doesn't need any (more) approvals.]}, {name: TooFewSignatories, index: 3, docs: [There are too few signatories in the list.]}, {name: TooManySignatories, index: 4, docs: [There are too many signatories in the list.]}, {name: SignatoriesOutOfOrder, index: 5, docs: [The signatories were provided out of order; they should be ordered.]}, {name: SenderInSignatories, index: 6, docs: [The sender was contained in the other signatories; it shouldn't be.]}, {name: NotFound, index: 7, docs: [Multisig operation not found when attempting to cancel.]}, {name: NotOwner, index: 8, docs: [Only the account that originally created the multisig is able to cancel it.]}, {name: NoTimepoint, index: 9, docs: [No timepoint was given, yet the multisig operation is already underway.]}, {name: WrongTimepoint, index: 10, docs: [A different timepoint was given to the multisig operation that is underway.]}, {name: UnexpectedTimepoint, index: 11, docs: [A timepoint was given, yet no multisig operation is underway.]}, {name: MaxWeightTooLow, index: 12, docs: [The maximum weight information provided was too low.]}, {name: AlreadyStored, index: 13, docs: [The data to be stored is already stored.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 706, type: {path: [pallet_preimage, OldRequestStatus], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}], def: {variants: [{name: Unrequested, fields: [{name: deposit, type: 284, typeName: (AccountId, Balance)}, {name: len, type: 4, typeName: u32}], index: 0}, {name: Requested, fields: [{name: deposit, type: 707, typeName: Option<(AccountId, Balance)>}, {name: count, type: 4, typeName: u32}, {name: len, type: 154, typeName: Option<u32>}], index: 1}]}}}, {id: 707, type: {path: [Option], params: [{name: T, type: 284}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 284}], index: 1}]}}}, {id: 708, type: {path: [pallet_preimage, RequestStatus], params: [{name: AccountId, type: 0}, {name: Ticket, type: 709}], def: {variants: [{name: Unrequested, fields: [{name: ticket, type: 710, typeName: (AccountId, Ticket)}, {name: len, type: 4, typeName: u32}], index: 0}, {name: Requested, fields: [{name: maybe_ticket, type: 711, typeName: Option<(AccountId, Ticket)>}, {name: count, type: 4, typeName: u32}, {name: maybe_len, type: 154, typeName: Option<u32>}], index: 1}]}}}, {id: 709, type: {path: [frame_support, traits, tokens, fungible, HoldConsideration], params: [{name: A, type: null}, {name: F, type: null}, {name: R, type: null}, {name: D, type: null}], def: {fields: [{type: 6, typeName: F::Balance}]}}}, {id: 710, type: {def: {fields: [0, 709]}}}, {id: 711, type: {path: [Option], params: [{name: T, type: 710}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 710}], index: 1}]}}}, {id: 712, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 713, type: {path: [pallet_preimage, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: TooBig, index: 0, docs: [Preimage is too large to store on-chain.]}, {name: AlreadyNoted, index: 1, docs: [Preimage has already been noted on-chain.]}, {name: NotAuthorized, index: 2, docs: [The user is not authorized to perform this action.]}, {name: NotNoted, index: 3, docs: [The preimage cannot be removed since it has not yet been noted.]}, {name: Requested, index: 4, docs: [A preimage may not be removed when there are outstanding requests.]}, {name: NotRequested, index: 5, docs: [The preimage request cannot be removed since no outstanding requests exist.]}, {name: TooMany, index: 6, docs: [More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.]}, {name: TooFew, index: 7, docs: [Too few hashes were requested to be upgraded (i.e. zero).]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 714, type: {path: [pallet_bounties, Bounty], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}, {name: BlockNumber, type: 4}], def: {fields: [{name: proposer, type: 0, typeName: AccountId}, {name: value, type: 6, typeName: Balance}, {name: fee, type: 6, typeName: Balance}, {name: curator_deposit, type: 6, typeName: Balance}, {name: bond, type: 6, typeName: Balance}, {name: status, type: 715, typeName: BountyStatus<AccountId, BlockNumber>}]}}}, {id: 715, type: {path: [pallet_bounties, BountyStatus], params: [{name: AccountId, type: 0}, {name: BlockNumber, type: 4}], def: {variants: [{name: Proposed, index: 0}, {name: Approved, index: 1}, {name: Funded, index: 2}, {name: CuratorProposed, fields: [{name: curator, type: 0, typeName: AccountId}], index: 3}, {name: Active, fields: [{name: curator, type: 0, typeName: AccountId}, {name: update_due, type: 4, typeName: BlockNumber}], index: 4}, {name: PendingPayout, fields: [{name: curator, type: 0, typeName: AccountId}, {name: beneficiary, type: 0, typeName: AccountId}, {name: unlock_at, type: 4, typeName: BlockNumber}], index: 5}]}}}, {id: 716, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 717, type: {path: [pallet_bounties, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: InsufficientProposersBalance, index: 0, docs: [Proposer's balance is too low.]}, {name: InvalidIndex, index: 1, docs: [No proposal or bounty at that index.]}, {name: ReasonTooBig, index: 2, docs: [The reason given is just too big.]}, {name: UnexpectedStatus, index: 3, docs: [The bounty status is unexpected.]}, {name: RequireCurator, index: 4, docs: [Require bounty curator.]}, {name: InvalidValue, index: 5, docs: [Invalid bounty value.]}, {name: InvalidFee, index: 6, docs: [Invalid bounty fee.]}, {name: PendingPayout, index: 7, docs: [A bounty payout is pending., To cancel the bounty, you must unassign and slash the curator.]}, {name: Premature, index: 8, docs: [The bounties cannot be claimed/closed because it's still in the countdown period.]}, {name: HasActiveChildBounty, index: 9, docs: [The bounty cannot be closed because it has active child bounties.]}, {name: TooManyQueued, index: 10, docs: [Too many approvals are already queued.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 718, type: {path: [pallet_child_bounties, ChildBounty], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}, {name: BlockNumber, type: 4}], def: {fields: [{name: parent_bounty, type: 4, typeName: BountyIndex}, {name: value, type: 6, typeName: Balance}, {name: fee, type: 6, typeName: Balance}, {name: curator_deposit, type: 6, typeName: Balance}, {name: status, type: 719, typeName: ChildBountyStatus<AccountId, BlockNumber>}]}}}, {id: 719, type: {path: [pallet_child_bounties, ChildBountyStatus], params: [{name: AccountId, type: 0}, {name: BlockNumber, type: 4}], def: {variants: [{name: Added, index: 0}, {name: CuratorProposed, fields: [{name: curator, type: 0, typeName: AccountId}], index: 1}, {name: Active, fields: [{name: curator, type: 0, typeName: AccountId}], index: 2}, {name: PendingPayout, fields: [{name: curator, type: 0, typeName: AccountId}, {name: beneficiary, type: 0, typeName: AccountId}, {name: unlock_at, type: 4, typeName: BlockNumber}], index: 3}]}}}, {id: 720, type: {path: [pallet_child_bounties, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: ParentBountyNotActive, index: 0, docs: [The parent bounty is not in active state.]}, {name: InsufficientBountyBalance, index: 1, docs: [The bounty balance is not enough to add new child-bounty.]}, {name: TooManyChildBounties, index: 2, docs: [Number of child bounties exceeds limit `MaxActiveChildBountyCount`.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 721, type: {path: [pallet_election_provider_multi_phase, ReadySolution], params: [{name: AccountId, type: null}, {name: MaxWinners, type: null}], def: {fields: [{name: supports, type: 722, typeName: BoundedSupports<AccountId, MaxWinners>}, {name: score, type: 277, typeName: ElectionScore}, {name: compute, type: 495, typeName: ElectionCompute}]}}}, {id: 722, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 281}, {name: S, type: null}], def: {fields: [{type: 280, typeName: Vec<T>}]}}}, {id: 723, type: {path: [pallet_election_provider_multi_phase, RoundSnapshot], params: [{name: AccountId, type: 0}, {name: DataProvider, type: 724}], def: {fields: [{name: voters, type: 725, typeName: Vec<DataProvider>}, {name: targets, type: 116, typeName: Vec<AccountId>}]}}}, {id: 724, type: {def: {fields: [0, 11, 580]}}}, {id: 725, type: {def: {type: 724}}}, {id: 726, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 727}, {name: S, type: null}], def: {fields: [{type: 728, typeName: Vec<T>}]}}}, {id: 727, type: {def: {fields: [277, 4, 4]}}}, {id: 728, type: {def: {type: 727}}}, {id: 729, type: {path: [pallet_election_provider_multi_phase, signed, SignedSubmission], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}, {name: Solution, type: 202}], def: {fields: [{name: who, type: 0, typeName: AccountId}, {name: deposit, type: 6, typeName: Balance}, {name: raw_solution, type: 201, typeName: RawSolution<Solution>}, {name: call_fee, type: 6, typeName: Balance}]}}}, {id: 730, type: {path: [pallet_election_provider_multi_phase, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: PreDispatchEarlySubmission, index: 0, docs: [Submission was too early.]}, {name: PreDispatchWrongWinnerCount, index: 1, docs: [Wrong number of winners presented.]}, {name: PreDispatchWeakSubmission, index: 2, docs: [Submission was too weak, score-wise.]}, {name: SignedQueueFull, index: 3, docs: [The queue was full, and the solution was not better than any of the existing ones.]}, {name: SignedCannotPayDeposit, index: 4, docs: [The origin failed to pay the deposit.]}, {name: SignedInvalidWitness, index: 5, docs: [Witness data to dispatchable is invalid.]}, {name: SignedTooMuchWeight, index: 6, docs: [The signed submission consumes too much weight]}, {name: OcwCallWrongEra, index: 7, docs: [OCW submitted solution for wrong round]}, {name: MissingSnapshotMetadata, index: 8, docs: [Snapshot metadata should exist but didn't.]}, {name: InvalidSubmissionIndex, index: 9, docs: [`Self::insert_submission` returned an invalid index.]}, {name: CallNotAllowed, index: 10, docs: [The call is not allowed at this point.]}, {name: FallbackFailed, index: 11, docs: [The fallback failed]}, {name: BoundNotMet, index: 12, docs: [Some bound not met]}, {name: TooManyWinners, index: 13, docs: [Submitted solution has too many winners]}, {name: PreDispatchDifferentRound, index: 14, docs: [Sumission was prepared for a different round.]}]}, docs: [Error of the pallet that can be returned in response to dispatches.]}}, {id: 731, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 642}, {name: S, type: null}], def: {fields: [{type: 643, typeName: Vec<T>}]}}}, {id: 732, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 733}, {name: S, type: null}], def: {fields: [{type: 734, typeName: Vec<T>}]}}}, {id: 733, type: {path: [pallet_nis, pallet, Bid], params: [{name: Balance, type: 6}, {name: AccountId, type: 0}], def: {fields: [{name: amount, type: 6, typeName: Balance}, {name: who, type: 0, typeName: AccountId}]}}}, {id: 734, type: {def: {type: 733}}}, {id: 735, type: {path: [pallet_nis, pallet, SummaryRecord], params: [{name: BlockNumber, type: 4}, {name: Balance, type: 6}], def: {fields: [{name: proportion_owed, type: 287, typeName: Perquintill}, {name: index, type: 4, typeName: ReceiptIndex}, {name: thawed, type: 287, typeName: Perquintill}, {name: last_period, type: 4, typeName: BlockNumber}, {name: receipts_on_hold, type: 6, typeName: Balance}]}}}, {id: 736, type: {path: [pallet_nis, pallet, ReceiptRecord], params: [{name: AccountId, type: 0}, {name: BlockNumber, type: 4}, {name: Balance, type: 6}], def: {fields: [{name: proportion, type: 287, typeName: Perquintill}, {name: owner, type: 707, typeName: Option<(AccountId, Balance)>}, {name: expiry, type: 4, typeName: BlockNumber}]}}}, {id: 737, type: {def: {fields: [287, 4]}}}, {id: 738, type: {path: [pallet_nis, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: DurationTooSmall, index: 0, docs: [The duration of the bid is less than one.]}, {name: DurationTooBig, index: 1, docs: [The duration is the bid is greater than the number of queues.]}, {name: AmountTooSmall, index: 2, docs: [The amount of the bid is less than the minimum allowed.]}, {name: BidTooLow, index: 3, docs: [The queue for the bid's duration is full and the amount bid is too low to get in, through replacing an existing bid.]}, {name: UnknownReceipt, index: 4, docs: [Receipt index is unknown.]}, {name: NotOwner, index: 5, docs: [Not the owner of the receipt.]}, {name: NotExpired, index: 6, docs: [Bond not yet at expiry date.]}, {name: UnknownBid, index: 7, docs: [The given bid for retraction is not found.]}, {name: PortionTooBig, index: 8, docs: [The portion supplied is beyond the value of the receipt.]}, {name: Unfunded, index: 9, docs: [Not enough funds are held to pay out.]}, {name: AlreadyFunded, index: 10, docs: [There are enough funds for what is required.]}, {name: Throttled, index: 11, docs: [The thaw throttle has been reached for this period.]}, {name: MakesDust, index: 12, docs: [The operation would result in a receipt worth an insignficant value.]}, {name: AlreadyCommunal, index: 13, docs: [The receipt is already communal.]}, {name: AlreadyPrivate, index: 14, docs: [The receipt is already private.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 739, type: {path: [bounded_collections, weak_bounded_vec, WeakBoundedVec], params: [{name: T, type: 558}, {name: S, type: null}], def: {fields: [{type: 560, typeName: Vec<T>}]}}}, {id: 740, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 562}, {name: S, type: null}], def: {fields: [{type: 563, typeName: Vec<T>}]}}}, {id: 741, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 742}, {name: S, type: null}], def: {fields: [{type: 743, typeName: Vec<T>}]}}}, {id: 742, type: {path: [pallet_balances, types, IdAmount], params: [{name: Id, type: 113}, {name: Balance, type: 6}], def: {fields: [{name: id, type: 113, typeName: Id}, {name: amount, type: 6, typeName: Balance}]}}}, {id: 743, type: {def: {type: 742}}}, {id: 744, type: {path: [pallet_balances, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: VestingBalance, index: 0, docs: [Vesting balance too high to send value.]}, {name: LiquidityRestrictions, index: 1, docs: [Account liquidity restrictions prevent withdrawal.]}, {name: InsufficientBalance, index: 2, docs: [Balance too low to send value.]}, {name: ExistentialDeposit, index: 3, docs: [Value too low to create account due to existential deposit.]}, {name: Expendability, index: 4, docs: [Transfer/payment would kill account.]}, {name: ExistingVestingSchedule, index: 5, docs: [A vesting schedule already exists for this account.]}, {name: DeadAccount, index: 6, docs: [Beneficiary account must pre-exist.]}, {name: TooManyReserves, index: 7, docs: [Number of named reserves exceed `MaxReserves`.]}, {name: TooManyHolds, index: 8, docs: [Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.]}, {name: TooManyFreezes, index: 9, docs: [Number of freezes exceed `MaxFreezes`.]}, {name: IssuanceDeactivated, index: 10, docs: [The issuance cannot be modified since it is already deactivated.]}, {name: DeltaZero, index: 11, docs: [The delta cannot be zero.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 745, type: {path: [pallet_bags_list, list, Node], params: [{name: T, type: null}, {name: I, type: null}], def: {fields: [{name: id, type: 0, typeName: T::AccountId}, {name: prev, type: 127, typeName: Option<T::AccountId>}, {name: next, type: 127, typeName: Option<T::AccountId>}, {name: bag_upper, type: 11, typeName: T::Score}, {name: score, type: 11, typeName: T::Score}]}}}, {id: 746, type: {path: [pallet_bags_list, list, Bag], params: [{name: T, type: null}, {name: I, type: null}], def: {fields: [{name: head, type: 127, typeName: Option<T::AccountId>}, {name: tail, type: 127, typeName: Option<T::AccountId>}]}}}, {id: 747, type: {def: {type: 11}}}, {id: 748, type: {path: [pallet_bags_list, pallet, Error], params: [{name: T, type: null}, {name: I, type: null}], def: {variants: [{name: List, fields: [{type: 749, typeName: ListError}], index: 0, docs: [A error in the list interface implementation.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 749, type: {path: [pallet_bags_list, list, ListError], def: {variants: [{name: Duplicate, index: 0}, {name: NotHeavier, index: 1}, {name: NotInSameBag, index: 2}, {name: NodeNotFound, index: 3}]}}}, {id: 750, type: {path: [pallet_nomination_pools, PoolMember], params: [{name: T, type: null}], def: {fields: [{name: pool_id, type: 4, typeName: PoolId}, {name: points, type: 6, typeName: BalanceOf<T>}, {name: last_recorded_reward_counter, type: 458, typeName: T::RewardCounter}, {name: unbonding_eras, type: 751, typeName: BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>}]}}}, {id: 751, type: {path: [bounded_collections, bounded_btree_map, BoundedBTreeMap], params: [{name: K, type: 4}, {name: V, type: 6}, {name: S, type: null}], def: {fields: [{type: 752, typeName: BTreeMap<K, V>}]}}}, {id: 752, type: {path: [BTreeMap], params: [{name: K, type: 4}, {name: V, type: 6}], def: {fields: [{type: 643}]}}}, {id: 753, type: {path: [pallet_nomination_pools, BondedPoolInner], params: [{name: T, type: null}], def: {fields: [{name: commission, type: 754, typeName: Commission<T>}, {name: member_counter, type: 4, typeName: u32}, {name: points, type: 6, typeName: BalanceOf<T>}, {name: roles, type: 757, typeName: PoolRoles<T::AccountId>}, {name: state, type: 292, typeName: PoolState}]}}}, {id: 754, type: {path: [pallet_nomination_pools, Commission], params: [{name: T, type: null}], def: {fields: [{name: current, type: 298, typeName: Option<(Perbill, T::AccountId)>}, {name: max, type: 755, typeName: Option<Perbill>}, {name: change_rate, type: 756, typeName: Option<CommissionChangeRate<BlockNumberFor<T>>>}, {name: throttle_from, type: 154, typeName: Option<BlockNumberFor<T>>}, {name: claim_permission, type: 301, typeName: Option<CommissionClaimPermission<T::AccountId>>}]}}}, {id: 755, type: {path: [Option], params: [{name: T, type: 37}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 37}], index: 1}]}}}, {id: 756, type: {path: [Option], params: [{name: T, type: 300}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 300}], index: 1}]}}}, {id: 757, type: {path: [pallet_nomination_pools, PoolRoles], params: [{name: AccountId, type: 0}], def: {fields: [{name: depositor, type: 0, typeName: AccountId}, {name: root, type: 127, typeName: Option<AccountId>}, {name: nominator, type: 127, typeName: Option<AccountId>}, {name: bouncer, type: 127, typeName: Option<AccountId>}]}}}, {id: 758, type: {path: [pallet_nomination_pools, RewardPool], params: [{name: T, type: null}], def: {fields: [{name: last_recorded_reward_counter, type: 458, typeName: T::RewardCounter}, {name: last_recorded_total_payouts, type: 6, typeName: BalanceOf<T>}, {name: total_rewards_claimed, type: 6, typeName: BalanceOf<T>}, {name: total_commission_pending, type: 6, typeName: BalanceOf<T>}, {name: total_commission_claimed, type: 6, typeName: BalanceOf<T>}]}}}, {id: 759, type: {path: [pallet_nomination_pools, SubPools], params: [{name: T, type: null}], def: {fields: [{name: no_era, type: 760, typeName: UnbondPool<T>}, {name: with_era, type: 761, typeName: BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>}]}}}, {id: 760, type: {path: [pallet_nomination_pools, UnbondPool], params: [{name: T, type: null}], def: {fields: [{name: points, type: 6, typeName: BalanceOf<T>}, {name: balance, type: 6, typeName: BalanceOf<T>}]}}}, {id: 761, type: {path: [bounded_collections, bounded_btree_map, BoundedBTreeMap], params: [{name: K, type: 4}, {name: V, type: 760}, {name: S, type: null}], def: {fields: [{type: 762, typeName: BTreeMap<K, V>}]}}}, {id: 762, type: {path: [BTreeMap], params: [{name: K, type: 4}, {name: V, type: 760}], def: {fields: [{type: 763}]}}}, {id: 763, type: {def: {type: 764}}}, {id: 764, type: {def: {fields: [4, 760]}}}, {id: 765, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 766, type: {path: [pallet_nomination_pools, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: PoolNotFound, index: 0, docs: [A (bonded) pool id does not exist.]}, {name: PoolMemberNotFound, index: 1, docs: [An account is not a member.]}, {name: RewardPoolNotFound, index: 2, docs: [A reward pool does not exist. In all cases this is a system logic error.]}, {name: SubPoolsNotFound, index: 3, docs: [A sub pool does not exist.]}, {name: AccountBelongsToOtherPool, index: 4, docs: [An account is already delegating in another pool. An account may only belong to one, pool at a time.]}, {name: FullyUnbonding, index: 5, docs: [The member is fully unbonded (and thus cannot access the bonded and reward pool, anymore to, for example, collect rewards).]}, {name: MaxUnbondingLimit, index: 6, docs: [The member cannot unbond further chunks due to reaching the limit.]}, {name: CannotWithdrawAny, index: 7, docs: [None of the funds can be withdrawn yet because the bonding duration has not passed.]}, {name: MinimumBondNotMet, index: 8, docs: [The amount does not meet the minimum bond to either join or create a pool., , The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The, caller does not have nominating permissions for the pool. Members can never unbond to a, value below `MinJoinBond`.]}, {name: OverflowRisk, index: 9, docs: [The transaction could not be executed due to overflow risk for the pool.]}, {name: NotDestroying, index: 10, docs: [A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for, other members to be permissionlessly unbonded.]}, {name: NotNominator, index: 11, docs: [The caller does not have nominating permissions for the pool.]}, {name: NotKickerOrDestroying, index: 12, docs: [Either a) the caller cannot make a valid kick or b) the pool is not destroying.]}, {name: NotOpen, index: 13, docs: [The pool is not open to join]}, {name: MaxPools, index: 14, docs: [The system is maxed out on pools.]}, {name: MaxPoolMembers, index: 15, docs: [Too many members in the pool or system.]}, {name: CanNotChangeState, index: 16, docs: [The pools state cannot be changed.]}, {name: DoesNotHavePermission, index: 17, docs: [The caller does not have adequate permissions.]}, {name: MetadataExceedsMaxLen, index: 18, docs: [Metadata exceeds [`Config::MaxMetadataLen`]]}, {name: Defensive, fields: [{type: 767, typeName: DefensiveError}], index: 19, docs: [Some error occurred that should never happen. This should be reported to the, maintainers.]}, {name: PartialUnbondNotAllowedPermissionlessly, index: 20, docs: [Partial unbonding now allowed permissionlessly.]}, {name: MaxCommissionRestricted, index: 21, docs: [The pool's max commission cannot be set higher than the existing value.]}, {name: CommissionExceedsMaximum, index: 22, docs: [The supplied commission exceeds the max allowed commission.]}, {name: CommissionExceedsGlobalMaximum, index: 23, docs: [The supplied commission exceeds global maximum commission.]}, {name: CommissionChangeThrottled, index: 24, docs: [Not enough blocks have surpassed since the last commission update.]}, {name: CommissionChangeRateNotAllowed, index: 25, docs: [The submitted changes to commission change rate are not allowed.]}, {name: NoPendingCommission, index: 26, docs: [There is no pending commission to claim.]}, {name: NoCommissionCurrentSet, index: 27, docs: [No commission current has been set.]}, {name: PoolIdInUse, index: 28, docs: [Pool id currently in use.]}, {name: InvalidPoolId, index: 29, docs: [Pool id provided is not correct/usable.]}, {name: BondExtraRestricted, index: 30, docs: [Bonding extra is restricted to the exact pending reward amount.]}, {name: NothingToAdjust, index: 31, docs: [No imbalance in the ED deposit for the pool.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 767, type: {path: [pallet_nomination_pools, pallet, DefensiveError], def: {variants: [{name: NotEnoughSpaceInUnbondPool, index: 0}, {name: PoolNotFound, index: 1}, {name: RewardPoolNotFound, index: 2}, {name: SubPoolsNotFound, index: 3}, {name: BondedStashKilledPrematurely, index: 4}]}}}, {id: 768, type: {path: [pallet_fast_unstake, types, UnstakeRequest], params: [{name: T, type: null}], def: {fields: [{name: stashes, type: 769, typeName: BoundedVec<(T::AccountId, BalanceOf<T>), T::BatchSize>}, {name: checked, type: 770, typeName: BoundedVec<EraIndex, MaxChecking<T>>}]}}}, {id: 769, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 284}, {name: S, type: null}], def: {fields: [{type: 283, typeName: Vec<T>}]}}}, {id: 770, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 4}, {name: S, type: null}], def: {fields: [{type: 121, typeName: Vec<T>}]}}}, {id: 771, type: {path: [pallet_fast_unstake, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotController, index: 0, docs: [The provided Controller account was not found., , This means that the given account is not bonded.]}, {name: AlreadyQueued, index: 1, docs: [The bonded account has already been queued.]}, {name: NotFullyBonded, index: 2, docs: [The bonded account has active unlocking chunks.]}, {name: NotQueued, index: 3, docs: [The provided un-staker is not in the `Queue`.]}, {name: AlreadyHead, index: 4, docs: [The provided un-staker is already in Head, and cannot deregister.]}, {name: CallNotAllowed, index: 5, docs: [The call is not allowed at this point because the pallet is not active.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 772, type: {path: [polkadot_runtime_parachains, configuration, HostConfiguration], params: [{name: BlockNumber, type: 4}], def: {fields: [{name: max_code_size, type: 4, typeName: u32}, {name: max_head_data_size, type: 4, typeName: u32}, {name: max_upward_queue_count, type: 4, typeName: u32}, {name: max_upward_queue_size, type: 4, typeName: u32}, {name: max_upward_message_size, type: 4, typeName: u32}, {name: max_upward_message_num_per_candidate, type: 4, typeName: u32}, {name: hrmp_max_message_num_per_candidate, type: 4, typeName: u32}, {name: validation_upgrade_cooldown, type: 4, typeName: BlockNumber}, {name: validation_upgrade_delay, type: 4, typeName: BlockNumber}, {name: async_backing_params, type: 305, typeName: AsyncBackingParams}, {name: max_pov_size, type: 4, typeName: u32}, {name: max_downward_message_size, type: 4, typeName: u32}, {name: hrmp_max_parachain_outbound_channels, type: 4, typeName: u32}, {name: hrmp_sender_deposit, type: 6, typeName: Balance}, {name: hrmp_recipient_deposit, type: 6, typeName: Balance}, {name: hrmp_channel_max_capacity, type: 4, typeName: u32}, {name: hrmp_channel_max_total_size, type: 4, typeName: u32}, {name: hrmp_max_parachain_inbound_channels, type: 4, typeName: u32}, {name: hrmp_channel_max_message_size, type: 4, typeName: u32}, {name: executor_params, type: 306, typeName: ExecutorParams}, {name: code_retention_period, type: 4, typeName: BlockNumber}, {name: coretime_cores, type: 4, typeName: u32}, {name: on_demand_retries, type: 4, typeName: u32}, {name: on_demand_queue_max_size, type: 4, typeName: u32}, {name: on_demand_target_queue_utilization, type: 37, typeName: Perbill}, {name: on_demand_fee_variability, type: 37, typeName: Perbill}, {name: on_demand_base_fee, type: 6, typeName: Balance}, {name: on_demand_ttl, type: 4, typeName: BlockNumber}, {name: group_rotation_frequency, type: 4, typeName: BlockNumber}, {name: paras_availability_period, type: 4, typeName: BlockNumber}, {name: scheduling_lookahead, type: 4, typeName: u32}, {name: max_validators_per_core, type: 154, typeName: Option<u32>}, {name: max_validators, type: 154, typeName: Option<u32>}, {name: dispute_period, type: 4, typeName: SessionIndex}, {name: dispute_post_conclusion_acceptance_period, type: 4, typeName: BlockNumber}, {name: no_show_slots, type: 4, typeName: u32}, {name: n_delay_tranches, type: 4, typeName: u32}, {name: zeroth_delay_tranche_width, type: 4, typeName: u32}, {name: needed_approvals, type: 4, typeName: u32}, {name: relay_vrf_modulo_samples, type: 4, typeName: u32}, {name: pvf_voting_ttl, type: 4, typeName: SessionIndex}, {name: minimum_validation_upgrade_delay, type: 4, typeName: BlockNumber}, {name: minimum_backing_votes, type: 4, typeName: u32}, {name: node_features, type: 319, typeName: NodeFeatures}, {name: approval_voting_params, type: 311, typeName: ApprovalVotingParams}]}}}, {id: 773, type: {def: {type: 774}}}, {id: 774, type: {def: {fields: [4, 772]}}}, {id: 775, type: {path: [polkadot_runtime_parachains, configuration, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidNewValue, index: 0, docs: [The new value for a configuration parameter is invalid.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 776, type: {def: {type: 321}}}, {id: 777, type: {def: {type: 135}}}, {id: 778, type: {path: [polkadot_runtime_parachains, shared, AllowedRelayParentsTracker], params: [{name: Hash, type: 12}, {name: BlockNumber, type: 4}], def: {fields: [{name: buffer, type: 779, typeName: VecDeque<(Hash, Hash)>}, {name: latest_number, type: 4, typeName: BlockNumber}]}}}, {id: 779, type: {def: {type: 780}}}, {id: 780, type: {def: {fields: [12, 12]}}}, {id: 781, type: {path: [polkadot_runtime_parachains, inclusion, AvailabilityBitfieldRecord], params: [{name: N, type: 4}], def: {fields: [{name: bitfield, type: 318, typeName: AvailabilityBitfield}, {name: submitted_at, type: 4, typeName: N}]}}}, {id: 782, type: {path: [polkadot_runtime_parachains, inclusion, CandidatePendingAvailability], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: core, type: 505, typeName: CoreIndex}, {name: hash, type: 343, typeName: CandidateHash}, {name: descriptor, type: 327, typeName: CandidateDescriptor<H>}, {name: availability_votes, type: 319, typeName: BitVec<u8, BitOrderLsb0>}, {name: backers, type: 319, typeName: BitVec<u8, BitOrderLsb0>}, {name: relay_parent_number, type: 4, typeName: N}, {name: backed_in_number, type: 4, typeName: N}, {name: backing_group, type: 506, typeName: GroupIndex}]}}}, {id: 783, type: {path: [polkadot_runtime_parachains, inclusion, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: UnsortedOrDuplicateValidatorIndices, index: 0, docs: [Validator indices are out of order or contains duplicates.]}, {name: UnsortedOrDuplicateDisputeStatementSet, index: 1, docs: [Dispute statement sets are out of order or contain duplicates.]}, {name: UnsortedOrDuplicateBackedCandidates, index: 2, docs: [Backed candidates are out of order (core index) or contain duplicates.]}, {name: UnexpectedRelayParent, index: 3, docs: [A different relay parent was provided compared to the on-chain stored one.]}, {name: WrongBitfieldSize, index: 4, docs: [Availability bitfield has unexpected size.]}, {name: BitfieldAllZeros, index: 5, docs: [Bitfield consists of zeros only.]}, {name: BitfieldDuplicateOrUnordered, index: 6, docs: [Multiple bitfields submitted by same validator or validators out of order by index.]}, {name: ValidatorIndexOutOfBounds, index: 7, docs: [Validator index out of bounds.]}, {name: InvalidBitfieldSignature, index: 8, docs: [Invalid signature]}, {name: UnscheduledCandidate, index: 9, docs: [Candidate submitted but para not scheduled.]}, {name: CandidateScheduledBeforeParaFree, index: 10, docs: [Candidate scheduled despite pending candidate already existing for the para.]}, {name: ScheduledOutOfOrder, index: 11, docs: [Scheduled cores out of order.]}, {name: HeadDataTooLarge, index: 12, docs: [Head data exceeds the configured maximum.]}, {name: PrematureCodeUpgrade, index: 13, docs: [Code upgrade prematurely.]}, {name: NewCodeTooLarge, index: 14, docs: [Output code is too large]}, {name: DisallowedRelayParent, index: 15, docs: [The candidate's relay-parent was not allowed. Either it was, not recent enough or it didn't advance based on the last parachain block.]}, {name: InvalidAssignment, index: 16, docs: [Failed to compute group index for the core: either it's out of bounds, or the relay parent doesn't belong to the current session.]}, {name: InvalidGroupIndex, index: 17, docs: [Invalid group index in core assignment.]}, {name: InsufficientBacking, index: 18, docs: [Insufficient (non-majority) backing.]}, {name: InvalidBacking, index: 19, docs: [Invalid (bad signature, unknown validator, etc.) backing.]}, {name: NotCollatorSigned, index: 20, docs: [Collator did not sign PoV.]}, {name: ValidationDataHashMismatch, index: 21, docs: [The validation data hash does not match expected.]}, {name: IncorrectDownwardMessageHandling, index: 22, docs: [The downward message queue is not processed correctly.]}, {name: InvalidUpwardMessages, index: 23, docs: [At least one upward message sent does not pass the acceptance criteria.]}, {name: HrmpWatermarkMishandling, index: 24, docs: [The candidate didn't follow the rules of HRMP watermark advancement.]}, {name: InvalidOutboundHrmp, index: 25, docs: [The HRMP messages sent by the candidate is not valid.]}, {name: InvalidValidationCodeHash, index: 26, docs: [The validation code hash of the candidate is not valid.]}, {name: ParaHeadMismatch, index: 27, docs: [The `para_head` hash in the candidate descriptor doesn't match the hash of the actual, para head in the commitments.]}, {name: BitfieldReferencesFreedCore, index: 28, docs: [A bitfield that references a freed core,, either intentionally or as part of a concluded, invalid dispute.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 784, type: {path: [polkadot_primitives, v6, ScrapedOnChainVotes], params: [{name: H, type: 12}], def: {fields: [{name: session, type: 4, typeName: SessionIndex}, {name: backing_validators_per_candidate, type: 785, typeName: Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)
>}, {name: disputes, type: 341, typeName: MultiDisputeStatementSet}]}}}, {id: 785, type: {def: {type: 786}}}, {id: 786, type: {def: {fields: [504, 787]}}}, {id: 787, type: {def: {type: 788}}}, {id: 788, type: {def: {fields: [321, 340]}}}, {id: 789, type: {path: [polkadot_runtime_parachains, paras_inherent, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: TooManyInclusionInherents, index: 0, docs: [Inclusion inherent called more than once per block.]}, {name: InvalidParentHeader, index: 1, docs: [The hash of the submitted parent header doesn't correspond to the saved block hash of, the parent.]}, {name: CandidateConcludedInvalid, index: 2, docs: [Disputed candidate that was concluded invalid.]}, {name: InherentOverweight, index: 3, docs: [The data given to the inherent will result in an overweight block.]}, {name: DisputeStatementsUnsortedOrDuplicates, index: 4, docs: [The ordering of dispute statements was invalid.]}, {name: DisputeInvalid, index: 5, docs: [A dispute statement was invalid.]}, {name: BackedByDisabled, index: 6, docs: [A candidate was backed by a disabled validator]}, {name: BackedOnUnscheduledCore, index: 7, docs: [A candidate was backed even though the paraid was not scheduled.]}, {name: UnscheduledCandidate, index: 8, docs: [Too many candidates supplied.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 790, type: {def: {type: 776}}}, {id: 791, type: {def: {type: 792}}}, {id: 792, type: {path: [polkadot_runtime_parachains, scheduler, pallet, CoreOccupied], params: [{name: N, type: 4}], def: {variants: [{name: Free, index: 0}, {name: Paras, fields: [{type: 793, typeName: ParasEntry<N>}], index: 1}]}}}, {id: 793, type: {path: [polkadot_runtime_parachains, scheduler, pallet, ParasEntry], params: [{name: N, type: 4}], def: {fields: [{name: assignment, type: 794, typeName: Assignment}, {name: availability_timeouts, type: 4, typeName: u32}, {name: ttl, type: 4, typeName: N}]}}}, {id: 794, type: {path: [polkadot_runtime_parachains, scheduler, common, Assignment], def: {variants: [{name: Pool, fields: [{name: para_id, type: 165, typeName: ParaId}, {name: core_index, type: 505, typeName: CoreIndex}], index: 0}, {name: Bulk, fields: [{type: 165, typeName: ParaId}], index: 1}]}}}, {id: 795, type: {path: [BTreeMap], params: [{name: K, type: 505}, {name: V, type: 796}], def: {fields: [{type: 797}]}}}, {id: 796, type: {def: {type: 793}}}, {id: 797, type: {def: {type: 798}}}, {id: 798, type: {def: {fields: [505, 796]}}}, {id: 799, type: {path: [polkadot_runtime_parachains, paras, PvfCheckActiveVoteState], params: [{name: BlockNumber, type: 4}], def: {fields: [{name: votes_accept, type: 319, typeName: BitVec<u8, BitOrderLsb0>}, {name: votes_reject, type: 319, typeName: BitVec<u8, BitOrderLsb0>}, {name: age, type: 4, typeName: SessionIndex}, {name: created_at, type: 4, typeName: BlockNumber}, {name: causes, type: 800, typeName: Vec<PvfCheckCause<BlockNumber>>}]}}}, {id: 800, type: {def: {type: 801}}}, {id: 801, type: {path: [polkadot_runtime_parachains, paras, PvfCheckCause], params: [{name: BlockNumber, type: 4}], def: {variants: [{name: Onboarding, fields: [{type: 165, typeName: ParaId}], index: 0}, {name: Upgrade, fields: [{name: id, type: 165, typeName: ParaId}, {name: included_at, type: 4, typeName: BlockNumber}, {name: set_go_ahead, type: 802, typeName: SetGoAhead}], index: 1}]}}}, {id: 802, type: {path: [polkadot_runtime_parachains, paras, SetGoAhead], def: {variants: [{name: Yes, index: 0}, {name: No, index: 1}]}}}, {id: 803, type: {def: {type: 330}}}, {id: 804, type: {def: {type: 165}}}, {id: 805, type: {path: [polkadot_runtime_parachains, paras, ParaLifecycle], def: {variants: [{name: Onboarding, index: 0}, {name: Parathread, index: 1}, {name: Parachain, index: 2}, {name: UpgradingParathread, index: 3}, {name: DowngradingParachain, index: 4}, {name: OffboardingParathread, index: 5}, {name: OffboardingParachain, index: 6}]}}}, {id: 806, type: {def: {fields: [165, 4]}}}, {id: 807, type: {path: [polkadot_runtime_parachains, paras, ParaPastCodeMeta], params: [{name: N, type: 4}], def: {fields: [{name: upgrade_times, type: 808, typeName: Vec<ReplacementTimes<N>>}, {name: last_pruned, type: 154, typeName: Option<N>}]}}}, {id: 808, type: {def: {type: 809}}}, {id: 809, type: {path: [polkadot_runtime_parachains, paras, ReplacementTimes], params: [{name: N, type: 4}], def: {fields: [{name: expected_at, type: 4, typeName: N}, {name: activated_at, type: 4, typeName: N}]}}}, {id: 810, type: {def: {type: 806}}}, {id: 811, type: {path: [polkadot_primitives, v6, UpgradeGoAhead], def: {variants: [{name: Abort, index: 0}, {name: GoAhead, index: 1}]}}}, {id: 812, type: {path: [polkadot_primitives, v6, UpgradeRestriction], def: {variants: [{name: Present, index: 0}]}}}, {id: 813, type: {path: [polkadot_runtime_parachains, paras, ParaGenesisArgs], def: {fields: [{name: genesis_head, type: 338, typeName: HeadData}, {name: validation_code, type: 337, typeName: ValidationCode}, {name: para_kind, type: 30, typeName: ParaKind}]}}}, {id: 814, type: {path: [polkadot_runtime_parachains, paras, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotRegistered, index: 0, docs: [Para is not registered in our system.]}, {name: CannotOnboard, index: 1, docs: [Para cannot be onboarded because it is already tracked by our system.]}, {name: CannotOffboard, index: 2, docs: [Para cannot be offboarded at this time.]}, {name: CannotUpgrade, index: 3, docs: [Para cannot be upgraded to a lease holding parachain.]}, {name: CannotDowngrade, index: 4, docs: [Para cannot be downgraded to an on-demand parachain.]}, {name: PvfCheckStatementStale, index: 5, docs: [The statement for PVF pre-checking is stale.]}, {name: PvfCheckStatementFuture, index: 6, docs: [The statement for PVF pre-checking is for a future session.]}, {name: PvfCheckValidatorIndexOutOfBounds, index: 7, docs: [Claimed validator index is out of bounds.]}, {name: PvfCheckInvalidSignature, index: 8, docs: [The signature for the PVF pre-checking is invalid.]}, {name: PvfCheckDoubleVote, index: 9, docs: [The given validator already has cast a vote.]}, {name: PvfCheckSubjectInvalid, index: 10, docs: [The given PVF does not exist at the moment of process a vote.]}, {name: CannotUpgradeCode, index: 11, docs: [Parachain cannot currently schedule a code upgrade.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 815, type: {def: {type: 816}}}, {id: 816, type: {path: [polkadot_runtime_parachains, initializer, BufferedSessionChange], def: {fields: [{name: validators, type: 777, typeName: Vec<ValidatorId>}, {name: queued, type: 777, typeName: Vec<ValidatorId>}, {name: session_index, type: 4, typeName: SessionIndex}]}}}, {id: 817, type: {def: {type: 818}}}, {id: 818, type: {path: [polkadot_core_primitives, InboundDownwardMessage], params: [{name: BlockNumber, type: 4}], def: {fields: [{name: sent_at, type: 4, typeName: BlockNumber}, {name: msg, type: 13, typeName: DownwardMessage}]}}}, {id: 819, type: {path: [polkadot_runtime_parachains, hrmp, HrmpOpenChannelRequest], def: {fields: [{name: confirmed, type: 30, typeName: bool}, {name: _age, type: 4, typeName: SessionIndex}, {name: sender_deposit, type: 6, typeName: Balance}, {name: max_message_size, type: 4, typeName: u32}, {name: max_capacity, type: 4, typeName: u32}, {name: max_total_size, type: 4, typeName: u32}]}}}, {id: 820, type: {def: {type: 354}}}, {id: 821, type: {path: [polkadot_runtime_parachains, hrmp, HrmpChannel], def: {fields: [{name: max_capacity, type: 4, typeName: u32}, {name: max_total_size, type: 4, typeName: u32}, {name: max_message_size, type: 4, typeName: u32}, {name: msg_count, type: 4, typeName: u32}, {name: total_size, type: 4, typeName: u32}, {name: mqc_head, type: 169, typeName: Option<Hash>}, {name: sender_deposit, type: 6, typeName: Balance}, {name: recipient_deposit, type: 6, typeName: Balance}]}}}, {id: 822, type: {def: {type: 823}}}, {id: 823, type: {path: [polkadot_core_primitives, InboundHrmpMessage], params: [{name: BlockNumber, type: 4}], def: {fields: [{name: sent_at, type: 4, typeName: BlockNumber}, {name: data, type: 13, typeName: sp_std::vec::Vec<u8>}]}}}, {id: 824, type: {def: {type: 825}}}, {id: 825, type: {def: {fields: [4, 804]}}}, {id: 826, type: {path: [polkadot_runtime_parachains, hrmp, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: OpenHrmpChannelToSelf, index: 0, docs: [The sender tried to open a channel to themselves.]}, {name: OpenHrmpChannelInvalidRecipient, index: 1, docs: [The recipient is not a valid para.]}, {name: OpenHrmpChannelZeroCapacity, index: 2, docs: [The requested capacity is zero.]}, {name: OpenHrmpChannelCapacityExceedsLimit, index: 3, docs: [The requested capacity exceeds the global limit.]}, {name: OpenHrmpChannelZeroMessageSize, index: 4, docs: [The requested maximum message size is 0.]}, {name: OpenHrmpChannelMessageSizeExceedsLimit, index: 5, docs: [The open request requested the message size that exceeds the global limit.]}, {name: OpenHrmpChannelAlreadyExists, index: 6, docs: [The channel already exists]}, {name: OpenHrmpChannelAlreadyRequested, index: 7, docs: [There is already a request to open the same channel.]}, {name: OpenHrmpChannelLimitExceeded, index: 8, docs: [The sender already has the maximum number of allowed outbound channels.]}, {name: AcceptHrmpChannelDoesntExist, index: 9, docs: [The channel from the sender to the origin doesn't exist.]}, {name: AcceptHrmpChannelAlreadyConfirmed, index: 10, docs: [The channel is already confirmed.]}, {name: AcceptHrmpChannelLimitExceeded, index: 11, docs: [The recipient already has the maximum number of allowed inbound channels.]}, {name: CloseHrmpChannelUnauthorized, index: 12, docs: [The origin tries to close a channel where it is neither the sender nor the recipient.]}, {name: CloseHrmpChannelDoesntExist, index: 13, docs: [The channel to be closed doesn't exist.]}, {name: CloseHrmpChannelAlreadyUnderway, index: 14, docs: [The channel close request is already requested.]}, {name: CancelHrmpOpenChannelUnauthorized, index: 15, docs: [Canceling is requested by neither the sender nor recipient of the open channel request.]}, {name: OpenHrmpChannelDoesntExist, index: 16, docs: [The open request doesn't exist.]}, {name: OpenHrmpChannelAlreadyConfirmed, index: 17, docs: [Cannot cancel an HRMP open channel request because it is already confirmed.]}, {name: WrongWitness, index: 18, docs: [The provided witness data is wrong.]}, {name: ChannelCreationNotAuthorized, index: 19, docs: [The channel between these two chains cannot be authorized.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 827, type: {def: {type: 136}}}, {id: 828, type: {path: [polkadot_primitives, v6, SessionInfo], def: {fields: [{name: active_validator_indices, type: 776, typeName: Vec<ValidatorIndex>}, {name: random_seed, type: 1, typeName: [u8; 32]}, {name: dispute_period, type: 4, typeName: SessionIndex}, {name: validators, type: 829, typeName: IndexedVec<ValidatorIndex, ValidatorId>}, {name: discovery_keys, type: 612, typeName: Vec<AuthorityDiscoveryId>}, {name: assignment_keys, type: 827, typeName: Vec<AssignmentId>}, {name: validator_groups, type: 830, typeName: IndexedVec<GroupIndex, Vec<ValidatorIndex>>}, {name: n_cores, type: 4, typeName: u32}, {name: zeroth_delay_tranche_width, type: 4, typeName: u32}, {name: relay_vrf_modulo_samples, type: 4, typeName: u32}, {name: n_delay_tranches, type: 4, typeName: u32}, {name: no_show_slots, type: 4, typeName: u32}, {name: needed_approvals, type: 4, typeName: u32}]}}}, {id: 829, type: {path: [polkadot_primitives, v6, IndexedVec], params: [{name: K, type: 321}, {name: V, type: 135}], def: {fields: [{type: 777, typeName: Vec<V>}]}}}, {id: 830, type: {path: [polkadot_primitives, v6, IndexedVec], params: [{name: K, type: 506}, {name: V, type: 776}], def: {fields: [{type: 790, typeName: Vec<V>}]}}}, {id: 831, type: {def: {fields: [4, 343]}}}, {id: 832, type: {path: [polkadot_primitives, v6, DisputeState], params: [{name: N, type: 4}], def: {fields: [{name: validators_for, type: 319, typeName: BitVec<u8, bitvec::order::Lsb0>}, {name: validators_against, type: 319, typeName: BitVec<u8, bitvec::order::Lsb0>}, {name: start, type: 4, typeName: N}, {name: concluded_at, type: 154, typeName: Option<N>}]}}}, {id: 833, type: {path: [BTreeSet], params: [{name: T, type: 321}], def: {fields: [{type: 776}]}}}, {id: 834, type: {path: [polkadot_runtime_parachains, disputes, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: DuplicateDisputeStatementSets, index: 0, docs: [Duplicate dispute statement sets provided.]}, {name: AncientDisputeStatement, index: 1, docs: [Ancient dispute statement provided.]}, {name: ValidatorIndexOutOfBounds, index: 2, docs: [Validator index on statement is out of bounds for session.]}, {name: InvalidSignature, index: 3, docs: [Invalid signature on statement.]}, {name: DuplicateStatement, index: 4, docs: [Validator vote submitted more than once to dispute.]}, {name: SingleSidedDispute, index: 5, docs: [A dispute where there are only votes on one side.]}, {name: MaliciousBacker, index: 6, docs: [A dispute vote from a malicious backer.]}, {name: MissingBackingVotes, index: 7, docs: [No backing votes were provides along dispute statements.]}, {name: UnconfirmedDispute, index: 8, docs: [Unconfirmed dispute statement sets provided.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 835, type: {path: [polkadot_primitives, v6, slashing, PendingSlashes], def: {fields: [{name: keys, type: 836, typeName: BTreeMap<ValidatorIndex, ValidatorId>}, {name: kind, type: 359, typeName: SlashingOffenceKind}]}}}, {id: 836, type: {path: [BTreeMap], params: [{name: K, type: 321}, {name: V, type: 135}], def: {fields: [{type: 837}]}}}, {id: 837, type: {def: {type: 838}}}, {id: 838, type: {def: {fields: [321, 135]}}}, {id: 839, type: {path: [polkadot_runtime_parachains, disputes, slashing, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidKeyOwnershipProof, index: 0, docs: [The key ownership proof is invalid.]}, {name: InvalidSessionIndex, index: 1, docs: [The session index is too old or invalid.]}, {name: InvalidCandidateHash, index: 2, docs: [The candidate hash is invalid.]}, {name: InvalidValidatorIndex, index: 3, docs: [There is no pending slash for the given validator index and time, slot.]}, {name: ValidatorIndexIdMismatch, index: 4, docs: [The validator index does not match the validator id.]}, {name: DuplicateSlashingReport, index: 5, docs: [The given slashing report is valid but already previously reported.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 840, type: {def: {type: 841}}}, {id: 841, type: {path: [polkadot_runtime_parachains, assigner_on_demand, EnqueuedOrder], def: {fields: [{name: para_id, type: 165, typeName: ParaId}]}}}, {id: 842, type: {path: [polkadot_runtime_parachains, assigner_on_demand, CoreAffinityCount], def: {fields: [{name: core_idx, type: 505, typeName: CoreIndex}, {name: count, type: 4, typeName: u32}]}}}, {id: 843, type: {path: [polkadot_runtime_parachains, assigner_on_demand, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidParaId, index: 0, docs: [The `ParaId` supplied to the `place_order` call is not a valid `ParaThread`, making the, call is invalid.]}, {name: QueueFull, index: 1, docs: [The order queue is full, `place_order` will not continue.]}, {name: SpotPriceHigherThanMaxAmount, index: 2, docs: [The current spot price is higher than the max amount specified in the `place_order`, call, making it invalid.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 844, type: {def: {fields: [4, 505]}}}, {id: 845, type: {path: [polkadot_runtime_parachains, assigner_coretime, Schedule], params: [{name: N, type: 4}], def: {fields: [{name: assignments, type: 372, typeName: Vec<(CoreAssignment, PartsOf57600)>}, {name: end_hint, type: 154, typeName: Option<N>}, {name: next_schedule, type: 154, typeName: Option<N>}]}}}, {id: 846, type: {path: [polkadot_runtime_parachains, assigner_coretime, CoreDescriptor], params: [{name: N, type: 4}], def: {fields: [{name: queue, type: 847, typeName: Option<QueueDescriptor<N>>}, {name: current_work, type: 849, typeName: Option<WorkState<N>>}]}}}, {id: 847, type: {path: [Option], params: [{name: T, type: 848}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 848}], index: 1}]}}}, {id: 848, type: {path: [polkadot_runtime_parachains, assigner_coretime, QueueDescriptor], params: [{name: N, type: 4}], def: {fields: [{name: first, type: 4, typeName: N}, {name: last, type: 4, typeName: N}]}}}, {id: 849, type: {path: [Option], params: [{name: T, type: 850}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 850}], index: 1}]}}}, {id: 850, type: {path: [polkadot_runtime_parachains, assigner_coretime, WorkState], params: [{name: N, type: 4}], def: {fields: [{name: assignments, type: 851, typeName: Vec<(CoreAssignment, AssignmentState)>}, {name: end_hint, type: 154, typeName: Option<N>}, {name: pos, type: 94, typeName: u16}, {name: step, type: 375, typeName: PartsOf57600}]}}}, {id: 851, type: {def: {type: 852}}}, {id: 852, type: {def: {fields: [374, 853]}}}, {id: 853, type: {path: [polkadot_runtime_parachains, assigner_coretime, AssignmentState], def: {fields: [{name: ratio, type: 375, typeName: PartsOf57600}, {name: remaining, type: 375, typeName: PartsOf57600}]}}}, {id: 854, type: {path: [polkadot_runtime_parachains, assigner_coretime, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: AssignmentsEmpty, index: 0}, {name: OverScheduled, index: 1, docs: [Assignments together exceeded 57600.]}, {name: UnderScheduled, index: 2, docs: [Assignments together less than 57600]}, {name: DisallowedInsert, index: 3, docs: [assign_core is only allowed to append new assignments at the end of already existing, ones.]}, {name: DuplicateInsert, index: 4, docs: [Tried to insert a schedule for the same core and block number as an existing schedule]}, {name: AssignmentsNotSorted, index: 5, docs: [Tried to add an unsorted set of assignments]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 855, type: {path: [polkadot_runtime_common, paras_registrar, ParaInfo], params: [{name: Account, type: 0}, {name: Balance, type: 6}], def: {fields: [{name: manager, type: 0, typeName: Account}, {name: deposit, type: 6, typeName: Balance}, {name: locked, type: 856, typeName: Option<bool>}]}}}, {id: 856, type: {path: [Option], params: [{name: T, type: 30}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 30}], index: 1}]}}}, {id: 857, type: {path: [polkadot_runtime_common, paras_registrar, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotRegistered, index: 0, docs: [The ID is not registered.]}, {name: AlreadyRegistered, index: 1, docs: [The ID is already registered.]}, {name: NotOwner, index: 2, docs: [The caller is not the owner of this Id.]}, {name: CodeTooLarge, index: 3, docs: [Invalid para code size.]}, {name: HeadDataTooLarge, index: 4, docs: [Invalid para head data size.]}, {name: NotParachain, index: 5, docs: [Para is not a Parachain.]}, {name: NotParathread, index: 6, docs: [Para is not a Parathread (on-demand parachain).]}, {name: CannotDeregister, index: 7, docs: [Cannot deregister para]}, {name: CannotDowngrade, index: 8, docs: [Cannot schedule downgrade of lease holding parachain to on-demand parachain]}, {name: CannotUpgrade, index: 9, docs: [Cannot schedule upgrade of on-demand parachain to lease holding parachain]}, {name: ParaLocked, index: 10, docs: [Para is locked from manipulation by the manager. Must use parachain or relay chain, governance.]}, {name: NotReserved, index: 11, docs: [The ID given for registration has not been reserved.]}, {name: EmptyCode, index: 12, docs: [Registering parachain with empty code is not allowed.]}, {name: CannotSwap, index: 13, docs: [Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras, are correct for the swap to work.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 858, type: {def: {type: 707}}}, {id: 859, type: {path: [polkadot_runtime_common, slots, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: ParaNotOnboarding, index: 0, docs: [The parachain ID is not onboarding.]}, {name: LeaseError, index: 1, docs: [There was an error with the lease.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 860, type: {def: {fields: [0, 165]}}}, {id: 861, type: {def: {len: 36, type: 862}}}, {id: 862, type: {path: [Option], params: [{name: T, type: 863}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 863}], index: 1}]}}}, {id: 863, type: {def: {fields: [0, 165, 6]}}}, {id: 864, type: {path: [polkadot_runtime_common, auctions, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: AuctionInProgress, index: 0, docs: [This auction is already in progress.]}, {name: LeasePeriodInPast, index: 1, docs: [The lease period is in the past.]}, {name: ParaNotRegistered, index: 2, docs: [Para is not registered]}, {name: NotCurrentAuction, index: 3, docs: [Not a current auction.]}, {name: NotAuction, index: 4, docs: [Not an auction.]}, {name: AuctionEnded, index: 5, docs: [Auction has already ended.]}, {name: AlreadyLeasedOut, index: 6, docs: [The para is already leased out for part of this range.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 865, type: {path: [polkadot_runtime_common, crowdloan, FundInfo], params: [{name: AccountId, type: 0}, {name: Balance, type: 6}, {name: BlockNumber, type: 4}, {name: LeasePeriod, type: 4}], def: {fields: [{name: depositor, type: 0, typeName: AccountId}, {name: verifier, type: 366, typeName: Option<MultiSigner>}, {name: deposit, type: 6, typeName: Balance}, {name: raised, type: 6, typeName: Balance}, {name: end, type: 4, typeName: BlockNumber}, {name: cap, type: 6, typeName: Balance}, {name: last_contribution, type: 866, typeName: LastContribution<BlockNumber>}, {name: first_period, type: 4, typeName: LeasePeriod}, {name: last_period, type: 4, typeName: LeasePeriod}, {name: fund_index, type: 4, typeName: FundIndex}]}}}, {id: 866, type: {path: [polkadot_runtime_common, crowdloan, LastContribution], params: [{name: BlockNumber, type: 4}], def: {variants: [{name: Never, index: 0}, {name: PreEnding, fields: [{type: 4, typeName: u32}], index: 1}, {name: Ending, fields: [{type: 4, typeName: BlockNumber}], index: 2}]}}}, {id: 867, type: {path: [polkadot_runtime_common, crowdloan, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: FirstPeriodInPast, index: 0, docs: [The current lease period is more than the first lease period.]}, {name: FirstPeriodTooFarInFuture, index: 1, docs: [The first lease period needs to at least be less than 3 `max_value`.]}, {name: LastPeriodBeforeFirstPeriod, index: 2, docs: [Last lease period must be greater than first lease period.]}, {name: LastPeriodTooFarInFuture, index: 3, docs: [The last lease period cannot be more than 3 periods after the first period.]}, {name: CannotEndInPast, index: 4, docs: [The campaign ends before the current block number. The end must be in the future.]}, {name: EndTooFarInFuture, index: 5, docs: [The end date for this crowdloan is not sensible.]}, {name: Overflow, index: 6, docs: [There was an overflow.]}, {name: ContributionTooSmall, index: 7, docs: [The contribution was below the minimum, `MinContribution`.]}, {name: InvalidParaId, index: 8, docs: [Invalid fund index.]}, {name: CapExceeded, index: 9, docs: [Contributions exceed maximum amount.]}, {name: ContributionPeriodOver, index: 10, docs: [The contribution period has already ended.]}, {name: InvalidOrigin, index: 11, docs: [The origin of this call is invalid.]}, {name: NotParachain, index: 12, docs: [This crowdloan does not correspond to a parachain.]}, {name: LeaseActive, index: 13, docs: [This parachain lease is still active and retirement cannot yet begin.]}, {name: BidOrLeaseActive, index: 14, docs: [This parachain's bid or lease is still active and withdraw cannot yet begin.]}, {name: FundNotEnded, index: 15, docs: [The crowdloan has not yet ended.]}, {name: NoContributions, index: 16, docs: [There are no contributions stored in this crowdloan.]}, {name: NotReadyToDissolve, index: 17, docs: [The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement, period.]}, {name: InvalidSignature, index: 18, docs: [Invalid signature.]}, {name: MemoTooLarge, index: 19, docs: [The provided memo is too large.]}, {name: AlreadyInNewRaise, index: 20, docs: [The fund is already in `NewRaise`]}, {name: VrfDelayInProgress, index: 21, docs: [No contributions allowed during the VRF delay]}, {name: NoLeasePeriod, index: 22, docs: [A lease period has not started yet, due to an offset in the starting block.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 868, type: {path: [polkadot_runtime_parachains, coretime, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotBroker, index: 0, docs: [The paraid making the call is not the coretime brokerage system parachain.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 869, type: {path: [pallet_xcm, pallet, QueryStatus], params: [{name: BlockNumber, type: 4}], def: {variants: [{name: Pending, fields: [{name: responder, type: 84, typeName: VersionedLocation}, {name: maybe_match_querier, type: 870, typeName: Option<VersionedLocation>}, {name: maybe_notify, type: 871, typeName: Option<(u8, u8)>}, {name: timeout, type: 4, typeName: BlockNumber}], index: 0}, {name: VersionNotifier, fields: [{name: origin, type: 84, typeName: VersionedLocation}, {name: is_active, type: 30, typeName: bool}], index: 1}, {name: Ready, fields: [{name: response, type: 873, typeName: VersionedResponse}, {name: at, type: 4, typeName: BlockNumber}], index: 2}]}}}, {id: 870, type: {path: [Option], params: [{name: T, type: 84}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 84}], index: 1}]}}}, {id: 871, type: {path: [Option], params: [{name: T, type: 872}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 872}], index: 1}]}}}, {id: 872, type: {def: {fields: [2, 2]}}}, {id: 873, type: {path: [xcm, VersionedResponse], def: {variants: [{name: V2, fields: [{type: 388, typeName: v2::Response}], index: 2}, {name: V3, fields: [{type: 406, typeName: v3::Response}], index: 3}, {name: V4, fields: [{type: 430, typeName: v4::Response}], index: 4}]}}}, {id: 874, type: {def: {fields: [4, 84]}}}, {id: 875, type: {def: {fields: [11, 9, 4]}}}, {id: 876, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 877}, {name: S, type: null}], def: {fields: [{type: 878, typeName: Vec<T>}]}}}, {id: 877, type: {def: {fields: [84, 4]}}}, {id: 878, type: {def: {type: 877}}}, {id: 879, type: {path: [pallet_xcm, pallet, VersionMigrationStage], def: {variants: [{name: MigrateSupportedVersion, index: 0}, {name: MigrateVersionNotifiers, index: 1}, {name: NotifyCurrentTargets, fields: [{type: 880, typeName: Option<Vec<u8>>}], index: 2}, {name: MigrateAndNotifyOldTargets, index: 3}]}}}, {id: 880, type: {path: [Option], params: [{name: T, type: 13}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 13}], index: 1}]}}}, {id: 881, type: {def: {fields: [4, 0, 453]}}}, {id: 882, type: {path: [pallet_xcm, pallet, RemoteLockedFungibleRecord], params: [{name: ConsumerIdentifier, type: 113}, {name: MaxConsumers, type: null}], def: {fields: [{name: amount, type: 6, typeName: u128}, {name: owner, type: 84, typeName: VersionedLocation}, {name: locker, type: 84, typeName: VersionedLocation}, {name: consumers, type: 883, typeName: BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>}]}}}, {id: 883, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 884}, {name: S, type: null}], def: {fields: [{type: 885, typeName: Vec<T>}]}}}, {id: 884, type: {def: {fields: [113, 6]}}}, {id: 885, type: {def: {type: 884}}}, {id: 886, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 887}, {name: S, type: null}], def: {fields: [{type: 888, typeName: Vec<T>}]}}}, {id: 887, type: {def: {fields: [6, 84]}}}, {id: 888, type: {def: {type: 887}}}, {id: 889, type: {path: [pallet_xcm, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: Unreachable, index: 0, docs: [The desired destination was unreachable, generally because there is a no way of routing, to it.]}, {name: SendFailure, index: 1, docs: [There was some other issue (i.e. not to do with routing) in sending the message., Perhaps a lack of space for buffering the message.]}, {name: Filtered, index: 2, docs: [The message execution fails the filter.]}, {name: UnweighableMessage, index: 3, docs: [The message's weight could not be determined.]}, {name: DestinationNotInvertible, index: 4, docs: [The destination `Location` provided cannot be inverted.]}, {name: Empty, index: 5, docs: [The assets to be sent are empty.]}, {name: CannotReanchor, index: 6, docs: [Could not re-anchor the assets to declare the fees for the destination chain.]}, {name: TooManyAssets, index: 7, docs: [Too many assets have been attempted for transfer.]}, {name: InvalidOrigin, index: 8, docs: [Origin is invalid for sending.]}, {name: BadVersion, index: 9, docs: [The version of the `Versioned` value used is not able to be interpreted.]}, {name: BadLocation, index: 10, docs: [The given location could not be used (e.g. because it cannot be expressed in the, desired version of XCM).]}, {name: NoSubscription, index: 11, docs: [The referenced subscription could not be found.]}, {name: AlreadySubscribed, index: 12, docs: [The location is invalid since it already has a subscription from us.]}, {name: CannotCheckOutTeleport, index: 13, docs: [Could not check-out the assets for teleportation to the destination chain.]}, {name: LowBalance, index: 14, docs: [The owner does not own (all) of the asset that they wish to do the operation on.]}, {name: TooManyLocks, index: 15, docs: [The asset owner has too many locks on the asset.]}, {name: AccountNotSovereign, index: 16, docs: [The given account is not an identifiable sovereign account for any location.]}, {name: FeesNotMet, index: 17, docs: [The operation required fees to be paid which the initiator could not meet.]}, {name: LockNotFound, index: 18, docs: [A remote lock with the corresponding data could not be found.]}, {name: InUse, index: 19, docs: [The unlock operation cannot succeed because there are still consumers of the lock.]}, {name: InvalidAssetNotConcrete, index: 20, docs: [Invalid non-concrete asset.]}, {name: InvalidAssetUnknownReserve, index: 21, docs: [Invalid asset, reserve chain could not be determined for it.]}, {name: InvalidAssetUnsupportedReserve, index: 22, docs: [Invalid asset, do not support remote asset reserves with different fees reserves.]}, {name: TooManyReserves, index: 23, docs: [Too many assets with different reserve locations have been attempted for transfer.]}, {name: LocalExecutionIncomplete, index: 24, docs: [Local XCM execution incomplete.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 890, type: {path: [pallet_message_queue, BookState], params: [{name: MessageOrigin, type: 455}], def: {fields: [{name: begin, type: 4, typeName: PageIndex}, {name: end, type: 4, typeName: PageIndex}, {name: count, type: 4, typeName: PageIndex}, {name: ready_neighbours, type: 891, typeName: Option<Neighbours<MessageOrigin>>}, {name: message_count, type: 11, typeName: u64}, {name: size, type: 11, typeName: u64}]}}}, {id: 891, type: {path: [Option], params: [{name: T, type: 892}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 892}], index: 1}]}}}, {id: 892, type: {path: [pallet_message_queue, Neighbours], params: [{name: MessageOrigin, type: 455}], def: {fields: [{name: prev, type: 455, typeName: MessageOrigin}, {name: next, type: 455, typeName: MessageOrigin}]}}}, {id: 893, type: {def: {fields: [455, 4]}}}, {id: 894, type: {path: [pallet_message_queue, Page], params: [{name: Size, type: 4}, {name: HeapSize, type: null}], def: {fields: [{name: remaining, type: 4, typeName: Size}, {name: remaining_size, type: 4, typeName: Size}, {name: first_index, type: 4, typeName: Size}, {name: first, type: 4, typeName: Size}, {name: last, type: 4, typeName: Size}, {name: heap, type: 895, typeName: BoundedVec<u8, IntoU32<HeapSize, Size>>}]}}}, {id: 895, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 2}, {name: S, type: null}], def: {fields: [{type: 13, typeName: Vec<T>}]}}}, {id: 896, type: {path: [pallet_message_queue, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: NotReapable, index: 0, docs: [Page is not reapable because it has items remaining to be processed and is not old, enough.]}, {name: NoPage, index: 1, docs: [Page to be reaped does not exist.]}, {name: NoMessage, index: 2, docs: [The referenced message could not be found.]}, {name: AlreadyProcessed, index: 3, docs: [The message was already processed and cannot be processed again.]}, {name: Queued, index: 4, docs: [The message is queued for future execution.]}, {name: InsufficientWeight, index: 5, docs: [There is temporarily not enough weight to continue servicing messages.]}, {name: TemporarilyUnprocessable, index: 6, docs: [This message is temporarily unprocessable., , Such errors are expected, but not guaranteed, to resolve themselves eventually through, retrying.]}, {name: QueuePaused, index: 7, docs: [The queue is paused and no message can be executed from it., , This can change at any time and may resolve in the future by re-trying.]}, {name: RecursiveDisallowed, index: 8, docs: [Another call is in progress and needs to finish before this call can happen.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 897, type: {path: [pallet_asset_rate, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: UnknownAssetKind, index: 0, docs: [The given asset ID is unknown.]}, {name: AlreadyExists, index: 1, docs: [The given asset ID already has an assigned conversion rate and cannot be re-created.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 898, type: {path: [bounded_collections, bounded_vec, BoundedVec], params: [{name: T, type: 138}, {name: S, type: null}], def: {fields: [{type: 899, typeName: Vec<T>}]}}}, {id: 899, type: {def: {type: 138}}}, {id: 900, type: {path: [pallet_beefy, pallet, Error], params: [{name: T, type: null}], def: {variants: [{name: InvalidKeyOwnershipProof, index: 0, docs: [A key ownership proof provided as part of an equivocation report is invalid.]}, {name: InvalidEquivocationProof, index: 1, docs: [An equivocation proof provided as part of an equivocation report is invalid.]}, {name: DuplicateOffenceReport, index: 2, docs: [A given equivocation report is valid but already previously reported.]}, {name: InvalidConfiguration, index: 3, docs: [Submitted configuration is invalid.]}]}, docs: [The `Error` enum of this pallet.]}}, {id: 901, type: {path: [sp_consensus_beefy, mmr, BeefyAuthoritySet], params: [{name: AuthoritySetCommitment, type: 12}], def: {fields: [{name: id, type: 11, typeName: crate::ValidatorSetId}, {name: len, type: 4, typeName: u32}, {name: keyset_commitment, type: 12, typeName: AuthoritySetCommitment}]}}}, {id: 902, type: {def: {fields: [903, 904, 905, 906, 907, 909, 910, 911, 912]}}}, {id: 903, type: {path: [frame_system, extensions, check_non_zero_sender, CheckNonZeroSender], params: [{name: T, type: null}], def: {}}}, {id: 904, type: {path: [frame_system, extensions, check_spec_version, CheckSpecVersion], params: [{name: T, type: null}], def: {}}}, {id: 905, type: {path: [frame_system, extensions, check_tx_version, CheckTxVersion], params: [{name: T, type: null}], def: {}}}, {id: 906, type: {path: [frame_system, extensions, check_genesis, CheckGenesis], params: [{name: T, type: null}], def: {}}}, {id: 907, type: {path: [frame_system, extensions, check_mortality, CheckMortality], params: [{name: T, type: null}], def: {fields: [{type: 908, typeName: Era}]}}}, {id: 908, type: {path: [sp_runtime, generic, era, Era], def: {variants: [{name: Immortal, index: 0}, {name: Mortal1, fields: [{type: 2}], index: 1}, {name: Mortal2, fields: [{type: 2}], index: 2}, {name: Mortal3, fields: [{type: 2}], index: 3}, {name: Mortal4, fields: [{type: 2}], index: 4}, {name: Mortal5, fields: [{type: 2}], index: 5}, {name: Mortal6, fields: [{type: 2}], index: 6}, {name: Mortal7, fields: [{type: 2}], index: 7}, {name: Mortal8, fields: [{type: 2}], index: 8}, {name: Mortal9, fields: [{type: 2}], index: 9}, {name: Mortal10, fields: [{type: 2}], index: 10}, {name: Mortal11, fields: [{type: 2}], index: 11}, {name: Mortal12, fields: [{type: 2}], index: 12}, {name: Mortal13, fields: [{type: 2}], index: 13}, {name: Mortal14, fields: [{type: 2}], index: 14}, {name: Mortal15, fields: [{type: 2}], index: 15}, {name: Mortal16, fields: [{type: 2}], index: 16}, {name: Mortal17, fields: [{type: 2}], index: 17}, {name: Mortal18, fields: [{type: 2}], index: 18}, {name: Mortal19, fields: [{type: 2}], index: 19}, {name: Mortal20, fields: [{type: 2}], index: 20}, {name: Mortal21, fields: [{type: 2}], index: 21}, {name: Mortal22, fields: [{type: 2}], index: 22}, {name: Mortal23, fields: [{type: 2}], index: 23}, {name: Mortal24, fields: [{type: 2}], index: 24}, {name: Mortal25, fields: [{type: 2}], index: 25}, {name: Mortal26, fields: [{type: 2}], index: 26}, {name: Mortal27, fields: [{type: 2}], index: 27}, {name: Mortal28, fields: [{type: 2}], index: 28}, {name: Mortal29, fields: [{type: 2}], index: 29}, {name: Mortal30, fields: [{type: 2}], index: 30}, {name: Mortal31, fields: [{type: 2}], index: 31}, {name: Mortal32, fields: [{type: 2}], index: 32}, {name: Mortal33, fields: [{type: 2}], index: 33}, {name: Mortal34, fields: [{type: 2}], index: 34}, {name: Mortal35, fields: [{type: 2}], index: 35}, {name: Mortal36, fields: [{type: 2}], index: 36}, {name: Mortal37, fields: [{type: 2}], index: 37}, {name: Mortal38, fields: [{type: 2}], index: 38}, {name: Mortal39, fields: [{type: 2}], index: 39}, {name: Mortal40, fields: [{type: 2}], index: 40}, {name: Mortal41, fields: [{type: 2}], index: 41}, {name: Mortal42, fields: [{type: 2}], index: 42}, {name: Mortal43, fields: [{type: 2}], index: 43}, {name: Mortal44, fields: [{type: 2}], index: 44}, {name: Mortal45, fields: [{type: 2}], index: 45}, {name: Mortal46, fields: [{type: 2}], index: 46}, {name: Mortal47, fields: [{type: 2}], index: 47}, {name: Mortal48, fields: [{type: 2}], index: 48}, {name: Mortal49, fields: [{type: 2}], index: 49}, {name: Mortal50, fields: [{type: 2}], index: 50}, {name: Mortal51, fields: [{type: 2}], index: 51}, {name: Mortal52, fields: [{type: 2}], index: 52}, {name: Mortal53, fields: [{type: 2}], index: 53}, {name: Mortal54, fields: [{type: 2}], index: 54}, {name: Mortal55, fields: [{type: 2}], index: 55}, {name: Mortal56, fields: [{type: 2}], index: 56}, {name: Mortal57, fields: [{type: 2}], index: 57}, {name: Mortal58, fields: [{type: 2}], index: 58}, {name: Mortal59, fields: [{type: 2}], index: 59}, {name: Mortal60, fields: [{type: 2}], index: 60}, {name: Mortal61, fields: [{type: 2}], index: 61}, {name: Mortal62, fields: [{type: 2}], index: 62}, {name: Mortal63, fields: [{type: 2}], index: 63}, {name: Mortal64, fields: [{type: 2}], index: 64}, {name: Mortal65, fields: [{type: 2}], index: 65}, {name: Mortal66, fields: [{type: 2}], index: 66}, {name: Mortal67, fields: [{type: 2}], index: 67}, {name: Mortal68, fields: [{type: 2}], index: 68}, {name: Mortal69, fields: [{type: 2}], index: 69}, {name: Mortal70, fields: [{type: 2}], index: 70}, {name: Mortal71, fields: [{type: 2}], index: 71}, {name: Mortal72, fields: [{type: 2}], index: 72}, {name: Mortal73, fields: [{type: 2}], index: 73}, {name: Mortal74, fields: [{type: 2}], index: 74}, {name: Mortal75, fields: [{type: 2}], index: 75}, {name: Mortal76, fields: [{type: 2}], index: 76}, {name: Mortal77, fields: [{type: 2}], index: 77}, {name: Mortal78, fields: [{type: 2}], index: 78}, {name: Mortal79, fields: [{type: 2}], index: 79}, {name: Mortal80, fields: [{type: 2}], index: 80}, {name: Mortal81, fields: [{type: 2}], index: 81}, {name: Mortal82, fields: [{type: 2}], index: 82}, {name: Mortal83, fields: [{type: 2}], index: 83}, {name: Mortal84, fields: [{type: 2}], index: 84}, {name: Mortal85, fields: [{type: 2}], index: 85}, {name: Mortal86, fields: [{type: 2}], index: 86}, {name: Mortal87, fields: [{type: 2}], index: 87}, {name: Mortal88, fields: [{type: 2}], index: 88}, {name: Mortal89, fields: [{type: 2}], index: 89}, {name: Mortal90, fields: [{type: 2}], index: 90}, {name: Mortal91, fields: [{type: 2}], index: 91}, {name: Mortal92, fields: [{type: 2}], index: 92}, {name: Mortal93, fields: [{type: 2}], index: 93}, {name: Mortal94, fields: [{type: 2}], index: 94}, {name: Mortal95, fields: [{type: 2}], index: 95}, {name: Mortal96, fields: [{type: 2}], index: 96}, {name: Mortal97, fields: [{type: 2}], index: 97}, {name: Mortal98, fields: [{type: 2}], index: 98}, {name: Mortal99, fields: [{type: 2}], index: 99}, {name: Mortal100, fields: [{type: 2}], index: 100}, {name: Mortal101, fields: [{type: 2}], index: 101}, {name: Mortal102, fields: [{type: 2}], index: 102}, {name: Mortal103, fields: [{type: 2}], index: 103}, {name: Mortal104, fields: [{type: 2}], index: 104}, {name: Mortal105, fields: [{type: 2}], index: 105}, {name: Mortal106, fields: [{type: 2}], index: 106}, {name: Mortal107, fields: [{type: 2}], index: 107}, {name: Mortal108, fields: [{type: 2}], index: 108}, {name: Mortal109, fields: [{type: 2}], index: 109}, {name: Mortal110, fields: [{type: 2}], index: 110}, {name: Mortal111, fields: [{type: 2}], index: 111}, {name: Mortal112, fields: [{type: 2}], index: 112}, {name: Mortal113, fields: [{type: 2}], index: 113}, {name: Mortal114, fields: [{type: 2}], index: 114}, {name: Mortal115, fields: [{type: 2}], index: 115}, {name: Mortal116, fields: [{type: 2}], index: 116}, {name: Mortal117, fields: [{type: 2}], index: 117}, {name: Mortal118, fields: [{type: 2}], index: 118}, {name: Mortal119, fields: [{type: 2}], index: 119}, {name: Mortal120, fields: [{type: 2}], index: 120}, {name: Mortal121, fields: [{type: 2}], index: 121}, {name: Mortal122, fields: [{type: 2}], index: 122}, {name: Mortal123, fields: [{type: 2}], index: 123}, {name: Mortal124, fields: [{type: 2}], index: 124}, {name: Mortal125, fields: [{type: 2}], index: 125}, {name: Mortal126, fields: [{type: 2}], index: 126}, {name: Mortal127, fields: [{type: 2}], index: 127}, {name: Mortal128, fields: [{type: 2}], index: 128}, {name: Mortal129, fields: [{type: 2}], index: 129}, {name: Mortal130, fields: [{type: 2}], index: 130}, {name: Mortal131, fields: [{type: 2}], index: 131}, {name: Mortal132, fields: [{type: 2}], index: 132}, {name: Mortal133, fields: [{type: 2}], index: 133}, {name: Mortal134, fields: [{type: 2}], index: 134}, {name: Mortal135, fields: [{type: 2}], index: 135}, {name: Mortal136, fields: [{type: 2}], index: 136}, {name: Mortal137, fields: [{type: 2}], index: 137}, {name: Mortal138, fields: [{type: 2}], index: 138}, {name: Mortal139, fields: [{type: 2}], index: 139}, {name: Mortal140, fields: [{type: 2}], index: 140}, {name: Mortal141, fields: [{type: 2}], index: 141}, {name: Mortal142, fields: [{type: 2}], index: 142}, {name: Mortal143, fields: [{type: 2}], index: 143}, {name: Mortal144, fields: [{type: 2}], index: 144}, {name: Mortal145, fields: [{type: 2}], index: 145}, {name: Mortal146, fields: [{type: 2}], index: 146}, {name: Mortal147, fields: [{type: 2}], index: 147}, {name: Mortal148, fields: [{type: 2}], index: 148}, {name: Mortal149, fields: [{type: 2}], index: 149}, {name: Mortal150, fields: [{type: 2}], index: 150}, {name: Mortal151, fields: [{type: 2}], index: 151}, {name: Mortal152, fields: [{type: 2}], index: 152}, {name: Mortal153, fields: [{type: 2}], index: 153}, {name: Mortal154, fields: [{type: 2}], index: 154}, {name: Mortal155, fields: [{type: 2}], index: 155}, {name: Mortal156, fields: [{type: 2}], index: 156}, {name: Mortal157, fields: [{type: 2}], index: 157}, {name: Mortal158, fields: [{type: 2}], index: 158}, {name: Mortal159, fields: [{type: 2}], index: 159}, {name: Mortal160, fields: [{type: 2}], index: 160}, {name: Mortal161, fields: [{type: 2}], index: 161}, {name: Mortal162, fields: [{type: 2}], index: 162}, {name: Mortal163, fields: [{type: 2}], index: 163}, {name: Mortal164, fields: [{type: 2}], index: 164}, {name: Mortal165, fields: [{type: 2}], index: 165}, {name: Mortal166, fields: [{type: 2}], index: 166}, {name: Mortal167, fields: [{type: 2}], index: 167}, {name: Mortal168, fields: [{type: 2}], index: 168}, {name: Mortal169, fields: [{type: 2}], index: 169}, {name: Mortal170, fields: [{type: 2}], index: 170}, {name: Mortal171, fields: [{type: 2}], index: 171}, {name: Mortal172, fields: [{type: 2}], index: 172}, {name: Mortal173, fields: [{type: 2}], index: 173}, {name: Mortal174, fields: [{type: 2}], index: 174}, {name: Mortal175, fields: [{type: 2}], index: 175}, {name: Mortal176, fields: [{type: 2}], index: 176}, {name: Mortal177, fields: [{type: 2}], index: 177}, {name: Mortal178, fields: [{type: 2}], index: 178}, {name: Mortal179, fields: [{type: 2}], index: 179}, {name: Mortal180, fields: [{type: 2}], index: 180}, {name: Mortal181, fields: [{type: 2}], index: 181}, {name: Mortal182, fields: [{type: 2}], index: 182}, {name: Mortal183, fields: [{type: 2}], index: 183}, {name: Mortal184, fields: [{type: 2}], index: 184}, {name: Mortal185, fields: [{type: 2}], index: 185}, {name: Mortal186, fields: [{type: 2}], index: 186}, {name: Mortal187, fields: [{type: 2}], index: 187}, {name: Mortal188, fields: [{type: 2}], index: 188}, {name: Mortal189, fields: [{type: 2}], index: 189}, {name: Mortal190, fields: [{type: 2}], index: 190}, {name: Mortal191, fields: [{type: 2}], index: 191}, {name: Mortal192, fields: [{type: 2}], index: 192}, {name: Mortal193, fields: [{type: 2}], index: 193}, {name: Mortal194, fields: [{type: 2}], index: 194}, {name: Mortal195, fields: [{type: 2}], index: 195}, {name: Mortal196, fields: [{type: 2}], index: 196}, {name: Mortal197, fields: [{type: 2}], index: 197}, {name: Mortal198, fields: [{type: 2}], index: 198}, {name: Mortal199, fields: [{type: 2}], index: 199}, {name: Mortal200, fields: [{type: 2}], index: 200}, {name: Mortal201, fields: [{type: 2}], index: 201}, {name: Mortal202, fields: [{type: 2}], index: 202}, {name: Mortal203, fields: [{type: 2}], index: 203}, {name: Mortal204, fields: [{type: 2}], index: 204}, {name: Mortal205, fields: [{type: 2}], index: 205}, {name: Mortal206, fields: [{type: 2}], index: 206}, {name: Mortal207, fields: [{type: 2}], index: 207}, {name: Mortal208, fields: [{type: 2}], index: 208}, {name: Mortal209, fields: [{type: 2}], index: 209}, {name: Mortal210, fields: [{type: 2}], index: 210}, {name: Mortal211, fields: [{type: 2}], index: 211}, {name: Mortal212, fields: [{type: 2}], index: 212}, {name: Mortal213, fields: [{type: 2}], index: 213}, {name: Mortal214, fields: [{type: 2}], index: 214}, {name: Mortal215, fields: [{type: 2}], index: 215}, {name: Mortal216, fields: [{type: 2}], index: 216}, {name: Mortal217, fields: [{type: 2}], index: 217}, {name: Mortal218, fields: [{type: 2}], index: 218}, {name: Mortal219, fields: [{type: 2}], index: 219}, {name: Mortal220, fields: [{type: 2}], index: 220}, {name: Mortal221, fields: [{type: 2}], index: 221}, {name: Mortal222, fields: [{type: 2}], index: 222}, {name: Mortal223, fields: [{type: 2}], index: 223}, {name: Mortal224, fields: [{type: 2}], index: 224}, {name: Mortal225, fields: [{type: 2}], index: 225}, {name: Mortal226, fields: [{type: 2}], index: 226}, {name: Mortal227, fields: [{type: 2}], index: 227}, {name: Mortal228, fields: [{type: 2}], index: 228}, {name: Mortal229, fields: [{type: 2}], index: 229}, {name: Mortal230, fields: [{type: 2}], index: 230}, {name: Mortal231, fields: [{type: 2}], index: 231}, {name: Mortal232, fields: [{type: 2}], index: 232}, {name: Mortal233, fields: [{type: 2}], index: 233}, {name: Mortal234, fields: [{type: 2}], index: 234}, {name: Mortal235, fields: [{type: 2}], index: 235}, {name: Mortal236, fields: [{type: 2}], index: 236}, {name: Mortal237, fields: [{type: 2}], index: 237}, {name: Mortal238, fields: [{type: 2}], index: 238}, {name: Mortal239, fields: [{type: 2}], index: 239}, {name: Mortal240, fields: [{type: 2}], index: 240}, {name: Mortal241, fields: [{type: 2}], index: 241}, {name: Mortal242, fields: [{type: 2}], index: 242}, {name: Mortal243, fields: [{type: 2}], index: 243}, {name: Mortal244, fields: [{type: 2}], index: 244}, {name: Mortal245, fields: [{type: 2}], index: 245}, {name: Mortal246, fields: [{type: 2}], index: 246}, {name: Mortal247, fields: [{type: 2}], index: 247}, {name: Mortal248, fields: [{type: 2}], index: 248}, {name: Mortal249, fields: [{type: 2}], index: 249}, {name: Mortal250, fields: [{type: 2}], index: 250}, {name: Mortal251, fields: [{type: 2}], index: 251}, {name: Mortal252, fields: [{type: 2}], index: 252}, {name: Mortal253, fields: [{type: 2}], index: 253}, {name: Mortal254, fields: [{type: 2}], index: 254}, {name: Mortal255, fields: [{type: 2}], index: 255}]}}}, {id: 909, type: {path: [frame_system, extensions, check_nonce, CheckNonce], params: [{name: T, type: null}], def: {fields: [{type: 63, typeName: T::Nonce}]}}}, {id: 910, type: {path: [frame_system, extensions, check_weight, CheckWeight], params: [{name: T, type: null}], def: {}}}, {id: 911, type: {path: [pallet_transaction_payment, ChargeTransactionPayment], params: [{name: T, type: null}], def: {fields: [{type: 55, typeName: BalanceOf<T>}]}}}, {id: 912, type: {path: [frame_metadata_hash_extension, CheckMetadataHash], params: [{name: T, type: null}], def: {fields: [{name: mode, type: 913, typeName: Mode}]}}}, {id: 913, type: {path: [frame_metadata_hash_extension, Mode], def: {variants: [{name: Disabled, index: 0}, {name: Enabled, index: 1}]}}}, {id: 914, type: {path: [staging_kusama_runtime, Runtime], def: {}}}, {id: 915, type: {path: [sp_runtime, generic, block, Block], params: [{name: Header, type: 103}, {name: Extrinsic, type: 916}], def: {fields: [{name: header, type: 103, typeName: Header}, {name: extrinsics, type: 917, typeName: Vec<Extrinsic>}]}}}, {id: 916, type: {path: [sp_runtime, generic, unchecked_extrinsic, UncheckedExtrinsic], params: [{name: Address, type: 112}, {name: Call, type: 96}, {name: Signature, type: 369}, {name: Extra, type: 902}], def: {fields: [{type: 13}]}}}, {id: 917, type: {def: {type: 916}}}, {id: 918, type: {path: [sp_core, OpaqueMetadata], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 919, type: {path: [Option], params: [{name: T, type: 918}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 918}], index: 1}]}}}, {id: 920, type: {path: [Result], params: [{name: T, type: 482}, {name: E, type: 921}], def: {variants: [{name: Ok, fields: [{type: 482}], index: 0}, {name: Err, fields: [{type: 921}], index: 1}]}}}, {id: 921, type: {path: [sp_runtime, transaction_validity, TransactionValidityError], def: {variants: [{name: Invalid, fields: [{type: 922, typeName: InvalidTransaction}], index: 0}, {name: Unknown, fields: [{type: 923, typeName: UnknownTransaction}], index: 1}]}}}, {id: 922, type: {path: [sp_runtime, transaction_validity, InvalidTransaction], def: {variants: [{name: Call, index: 0}, {name: Payment, index: 1}, {name: Future, index: 2}, {name: Stale, index: 3}, {name: BadProof, index: 4}, {name: AncientBirthBlock, index: 5}, {name: ExhaustsResources, index: 6}, {name: Custom, fields: [{type: 2, typeName: u8}], index: 7}, {name: BadMandatory, index: 8}, {name: MandatoryValidation, index: 9}, {name: BadSigner, index: 10}]}}}, {id: 923, type: {path: [sp_runtime, transaction_validity, UnknownTransaction], def: {variants: [{name: CannotLookup, index: 0}, {name: NoUnsignedValidator, index: 1}, {name: Custom, fields: [{type: 2, typeName: u8}], index: 2}]}}}, {id: 924, type: {path: [sp_inherents, InherentData], def: {fields: [{name: data, type: 925, typeName: BTreeMap<InherentIdentifier, Vec<u8>>}]}}}, {id: 925, type: {path: [BTreeMap], params: [{name: K, type: 387}, {name: V, type: 13}], def: {fields: [{type: 926}]}}}, {id: 926, type: {def: {type: 927}}}, {id: 927, type: {def: {fields: [387, 13]}}}, {id: 928, type: {path: [sp_inherents, CheckInherentsResult], def: {fields: [{name: okay, type: 30, typeName: bool}, {name: fatal_error, type: 30, typeName: bool}, {name: errors, type: 924, typeName: InherentData}]}}}, {id: 929, type: {path: [sp_runtime, transaction_validity, TransactionSource], def: {variants: [{name: InBlock, index: 0}, {name: Local, index: 1}, {name: External, index: 2}]}}}, {id: 930, type: {path: [Result], params: [{name: T, type: 931}, {name: E, type: 921}], def: {variants: [{name: Ok, fields: [{type: 931}], index: 0}, {name: Err, fields: [{type: 921}], index: 1}]}}}, {id: 931, type: {path: [sp_runtime, transaction_validity, ValidTransaction], def: {fields: [{name: priority, type: 11, typeName: TransactionPriority}, {name: requires, type: 100, typeName: Vec<TransactionTag>}, {name: provides, type: 100, typeName: Vec<TransactionTag>}, {name: longevity, type: 11, typeName: TransactionLongevity}, {name: propagate, type: 30, typeName: bool}]}}}, {id: 932, type: {def: {fields: [790, 933]}}}, {id: 933, type: {path: [polkadot_primitives, v6, GroupRotationInfo], params: [{name: N, type: 4}], def: {fields: [{name: session_start_block, type: 4, typeName: N}, {name: group_rotation_frequency, type: 4, typeName: N}, {name: now, type: 4, typeName: N}]}}}, {id: 934, type: {def: {type: 935}}}, {id: 935, type: {path: [polkadot_primitives, v6, CoreState], params: [{name: H, type: 12}, {name: N, type: 4}], def: {variants: [{name: Occupied, fields: [{type: 936, typeName: OccupiedCore<H, N>}], index: 0}, {name: Scheduled, fields: [{type: 938, typeName: ScheduledCore}], index: 1}, {name: Free, index: 2}]}}}, {id: 936, type: {path: [polkadot_primitives, v6, OccupiedCore], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: next_up_on_available, type: 937, typeName: Option<ScheduledCore>}, {name: occupied_since, type: 4, typeName: N}, {name: time_out_at, type: 4, typeName: N}, {name: next_up_on_time_out, type: 937, typeName: Option<ScheduledCore>}, {name: availability, type: 319, typeName: BitVec<u8, bitvec::order::Lsb0>}, {name: group_responsible, type: 506, typeName: GroupIndex}, {name: candidate_hash, type: 343, typeName: CandidateHash}, {name: candidate_descriptor, type: 327, typeName: CandidateDescriptor<H>}]}}}, {id: 937, type: {path: [Option], params: [{name: T, type: 938}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 938}], index: 1}]}}}, {id: 938, type: {path: [polkadot_primitives, v6, ScheduledCore], def: {fields: [{name: para_id, type: 165, typeName: Id}, {name: collator, type: 939, typeName: Option<CollatorId>}]}}}, {id: 939, type: {path: [Option], params: [{name: T, type: 328}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 328}], index: 1}]}}}, {id: 940, type: {path: [polkadot_primitives, v6, OccupiedCoreAssumption], def: {variants: [{name: Included, index: 0}, {name: TimedOut, index: 1}, {name: Free, index: 2}]}}}, {id: 941, type: {path: [Option], params: [{name: T, type: 942}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 942}], index: 1}]}}}, {id: 942, type: {path: [polkadot_primitives, v6, PersistedValidationData], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: parent_head, type: 338, typeName: HeadData}, {name: relay_parent_number, type: 4, typeName: N}, {name: relay_parent_storage_root, type: 12, typeName: H}, {name: max_pov_size, type: 4, typeName: u32}]}}}, {id: 943, type: {path: [Option], params: [{name: T, type: 944}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 944}], index: 1}]}}}, {id: 944, type: {def: {fields: [942, 330]}}}, {id: 945, type: {path: [Option], params: [{name: T, type: 326}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 326}], index: 1}]}}}, {id: 946, type: {def: {type: 947}}}, {id: 947, type: {path: [polkadot_primitives, v6, CandidateEvent], params: [{name: H, type: 12}], def: {variants: [{name: CandidateBacked, fields: [{type: 504, typeName: CandidateReceipt<H>}, {type: 338, typeName: HeadData}, {type: 505, typeName: CoreIndex}, {type: 506, typeName: GroupIndex}], index: 0}, {name: CandidateIncluded, fields: [{type: 504, typeName: CandidateReceipt<H>}, {type: 338, typeName: HeadData}, {type: 505, typeName: CoreIndex}, {type: 506, typeName: GroupIndex}], index: 1}, {name: CandidateTimedOut, fields: [{type: 504, typeName: CandidateReceipt<H>}, {type: 338, typeName: HeadData}, {type: 505, typeName: CoreIndex}], index: 2}]}}}, {id: 948, type: {path: [BTreeMap], params: [{name: K, type: 165}, {name: V, type: 822}], def: {fields: [{type: 949}]}}}, {id: 949, type: {def: {type: 950}}}, {id: 950, type: {def: {fields: [165, 822]}}}, {id: 951, type: {path: [Option], params: [{name: T, type: 784}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 784}], index: 1}]}}}, {id: 952, type: {path: [Option], params: [{name: T, type: 828}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 828}], index: 1}]}}}, {id: 953, type: {path: [Option], params: [{name: T, type: 330}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 330}], index: 1}]}}}, {id: 954, type: {def: {type: 955}}}, {id: 955, type: {def: {fields: [4, 343, 832]}}}, {id: 956, type: {path: [Option], params: [{name: T, type: 306}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 306}], index: 1}]}}}, {id: 957, type: {def: {type: 958}}}, {id: 958, type: {def: {fields: [4, 343, 835]}}}, {id: 959, type: {path: [Option], params: [{name: T, type: 960}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 960}], index: 1}]}}}, {id: 960, type: {path: [polkadot_primitives, v6, slashing, OpaqueKeyOwnershipProof], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 961, type: {path: [Option], params: [{name: T, type: 113}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 113}], index: 1}]}}}, {id: 962, type: {path: [Option], params: [{name: T, type: 963}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 963}], index: 1}]}}}, {id: 963, type: {path: [polkadot_primitives, v6, async_backing, BackingState], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: constraints, type: 964, typeName: Constraints<N>}, {name: pending_availability, type: 972, typeName: Vec<CandidatePendingAvailability<H, N>>}]}}}, {id: 964, type: {path: [polkadot_primitives, v6, async_backing, Constraints], params: [{name: N, type: 4}], def: {fields: [{name: min_relay_parent_number, type: 4, typeName: N}, {name: max_pov_size, type: 4, typeName: u32}, {name: max_code_size, type: 4, typeName: u32}, {name: ump_remaining, type: 4, typeName: u32}, {name: ump_remaining_bytes, type: 4, typeName: u32}, {name: max_ump_num_per_candidate, type: 4, typeName: u32}, {name: dmp_remaining_messages, type: 121, typeName: Vec<N>}, {name: hrmp_inbound, type: 965, typeName: InboundHrmpLimitations<N>}, {name: hrmp_channels_out, type: 966, typeName: Vec<(Id, OutboundHrmpChannelLimitations)>}, {name: max_hrmp_num_per_candidate, type: 4, typeName: u32}, {name: required_parent, type: 338, typeName: HeadData}, {name: validation_code_hash, type: 330, typeName: ValidationCodeHash}, {name: upgrade_restriction, type: 969, typeName: Option<UpgradeRestriction>}, {name: future_validation_code, type: 970, typeName: Option<(N, ValidationCodeHash)>}]}}}, {id: 965, type: {path: [polkadot_primitives, v6, async_backing, InboundHrmpLimitations], params: [{name: N, type: 4}], def: {fields: [{name: valid_watermarks, type: 121, typeName: Vec<N>}]}}}, {id: 966, type: {def: {type: 967}}}, {id: 967, type: {def: {fields: [165, 968]}}}, {id: 968, type: {path: [polkadot_primitives, v6, async_backing, OutboundHrmpChannelLimitations], def: {fields: [{name: bytes_remaining, type: 4, typeName: u32}, {name: messages_remaining, type: 4, typeName: u32}]}}}, {id: 969, type: {path: [Option], params: [{name: T, type: 812}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 812}], index: 1}]}}}, {id: 970, type: {path: [Option], params: [{name: T, type: 971}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 971}], index: 1}]}}}, {id: 971, type: {def: {fields: [4, 330]}}}, {id: 972, type: {def: {type: 973}}}, {id: 973, type: {path: [polkadot_primitives, v6, async_backing, CandidatePendingAvailability], params: [{name: H, type: 12}, {name: N, type: 4}], def: {fields: [{name: candidate_hash, type: 343, typeName: CandidateHash}, {name: descriptor, type: 327, typeName: CandidateDescriptor<H>}, {name: commitments, type: 331, typeName: CandidateCommitments}, {name: relay_parent_number, type: 4, typeName: N}, {name: max_pov_size, type: 4, typeName: u32}]}}}, {id: 974, type: {path: [Option], params: [{name: T, type: 975}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 975}], index: 1}]}}}, {id: 975, type: {path: [sp_consensus_beefy, ValidatorSet], params: [{name: AuthorityId, type: 138}], def: {fields: [{name: validators, type: 899, typeName: Vec<AuthorityId>}, {name: id, type: 11, typeName: ValidatorSetId}]}}}, {id: 976, type: {path: [sp_consensus_beefy, OpaqueKeyOwnershipProof], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 977, type: {path: [Option], params: [{name: T, type: 976}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 976}], index: 1}]}}}, {id: 978, type: {path: [Result], params: [{name: T, type: 12}, {name: E, type: 979}], def: {variants: [{name: Ok, fields: [{type: 12}], index: 0}, {name: Err, fields: [{type: 979}], index: 1}]}}}, {id: 979, type: {path: [sp_mmr_primitives, Error], def: {variants: [{name: InvalidNumericOp, index: 0}, {name: Push, index: 1}, {name: GetRoot, index: 2}, {name: Commit, index: 3}, {name: GenerateProof, index: 4}, {name: Verify, index: 5}, {name: LeafNotFound, index: 6}, {name: PalletNotIncluded, index: 7}, {name: InvalidLeafIndex, index: 8}, {name: InvalidBestKnownBlock, index: 9}]}}}, {id: 980, type: {path: [Result], params: [{name: T, type: 11}, {name: E, type: 979}], def: {variants: [{name: Ok, fields: [{type: 11}], index: 0}, {name: Err, fields: [{type: 979}], index: 1}]}}}, {id: 981, type: {path: [Result], params: [{name: T, type: 982}, {name: E, type: 979}], def: {variants: [{name: Ok, fields: [{type: 982}], index: 0}, {name: Err, fields: [{type: 979}], index: 1}]}}}, {id: 982, type: {def: {fields: [983, 985]}}}, {id: 983, type: {def: {type: 984}}}, {id: 984, type: {path: [sp_mmr_primitives, EncodableOpaqueLeaf], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 985, type: {path: [sp_mmr_primitives, Proof], params: [{name: Hash, type: 12}], def: {fields: [{name: leaf_indices, type: 747, typeName: Vec<LeafIndex>}, {name: leaf_count, type: 11, typeName: NodeIndex}, {name: items, type: 197, typeName: Vec<Hash>}]}}}, {id: 986, type: {path: [Result], params: [{name: T, type: 113}, {name: E, type: 979}], def: {variants: [{name: Ok, fields: [{type: 113}], index: 0}, {name: Err, fields: [{type: 979}], index: 1}]}}}, {id: 987, type: {path: [sp_consensus_grandpa, OpaqueKeyOwnershipProof], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 988, type: {path: [Option], params: [{name: T, type: 987}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 987}], index: 1}]}}}, {id: 989, type: {path: [sp_consensus_babe, BabeConfiguration], def: {fields: [{name: slot_duration, type: 11, typeName: u64}, {name: epoch_length, type: 11, typeName: u64}, {name: c, type: 108, typeName: (u64, u64)}, {name: authorities, type: 541, typeName: Vec<(AuthorityId, BabeAuthorityWeight)>}, {name: randomness, type: 1, typeName: Randomness}, {name: allowed_slots, type: 109, typeName: AllowedSlots}]}}}, {id: 990, type: {path: [sp_consensus_babe, Epoch], def: {fields: [{name: epoch_index, type: 11, typeName: u64}, {name: start_slot, type: 105, typeName: Slot}, {name: duration, type: 11, typeName: u64}, {name: authorities, type: 541, typeName: Vec<(AuthorityId, BabeAuthorityWeight)>}, {name: randomness, type: 1, typeName: Randomness}, {name: config, type: 550, typeName: BabeEpochConfiguration}]}}}, {id: 991, type: {path: [Option], params: [{name: T, type: 992}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 992}], index: 1}]}}}, {id: 992, type: {path: [sp_consensus_babe, OpaqueKeyOwnershipProof], def: {fields: [{type: 13, typeName: Vec<u8>}]}}}, {id: 993, type: {path: [Option], params: [{name: T, type: 994}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 994}], index: 1}]}}}, {id: 994, type: {def: {type: 995}}}, {id: 995, type: {def: {fields: [13, 605]}}}, {id: 996, type: {path: [pallet_transaction_payment, types, RuntimeDispatchInfo], params: [{name: Balance, type: 6}, {name: Weight, type: 9}], def: {fields: [{name: weight, type: 9, typeName: Weight}, {name: class, type: 23, typeName: DispatchClass}, {name: partial_fee, type: 6, typeName: Balance}]}}}, {id: 997, type: {path: [pallet_transaction_payment, types, FeeDetails], params: [{name: Balance, type: 6}], def: {fields: [{name: inclusion_fee, type: 998, typeName: Option<InclusionFee<Balance>>}, {name: tip, type: 6, typeName: Balance}]}}}, {id: 998, type: {path: [Option], params: [{name: T, type: 999}], def: {variants: [{name: None, index: 0}, {name: Some, fields: [{type: 999}], index: 1}]}}}, {id: 999, type: {path: [pallet_transaction_payment, types, InclusionFee], params: [{name: Balance, type: 6}], def: {fields: [{name: base_fee, type: 6, typeName: Balance}, {name: len_fee, type: 6, typeName: Balance}, {name: adjusted_weight_fee, type: 6, typeName: Balance}]}}}, {id: 1000, type: {path: [Result], params: [{name: T, type: 113}, {name: E, type: 526}], def: {variants: [{name: Ok, fields: [{type: 113}], index: 0}, {name: Err, fields: [{type: 526}], index: 1}]}}}, {id: 1001, type: {path: [staging_kusama_runtime, RuntimeError], def: {variants: [{name: System, fields: [{type: 538, typeName: frame_system::Error<Runtime>}], index: 0}, {name: Babe, fields: [{type: 554, typeName: pallet_babe::Error<Runtime>}], index: 1}, {name: Indices, fields: [{type: 556, typeName: pallet_indices::Error<Runtime>}], index: 3}, {name: Balances, fields: [{type: 575, typeName: pallet_balances::Error<Runtime>}], index: 4}, {name: Staking, fields: [{type: 598, typeName: pallet_staking::Error<Runtime>}], index: 6}, {name: Session, fields: [{type: 606, typeName: pallet_session::Error<Runtime>}], index: 8}, {name: Grandpa, fields: [{type: 610, typeName: pallet_grandpa::Error<Runtime>}], index: 10}, {name: Treasury, fields: [{type: 619, typeName: pallet_treasury::Error<Runtime>}], index: 18}, {name: ConvictionVoting, fields: [{type: 632, typeName: pallet_conviction_voting::Error<Runtime>}], index: 20}, {name: Referenda, fields: [{type: 650, typeName: pallet_referenda::Error<Runtime>}], index: 21}, {name: FellowshipCollective, fields: [{type: 655, typeName: pallet_ranked_collective::Error<Runtime, pallet_ranked_collective::
Instance1>}], index: 22}, {name: FellowshipReferenda, fields: [{type: 659, typeName: pallet_referenda::Error<Runtime, pallet_referenda::Instance2>}], index: 23}, {name: Whitelist, fields: [{type: 660, typeName: pallet_whitelist::Error<Runtime>}], index: 44}, {name: Claims, fields: [{type: 661, typeName: claims::Error<Runtime>}], index: 19}, {name: Utility, fields: [{type: 662, typeName: pallet_utility::Error<Runtime>}], index: 24}, {name: Society, fields: [{type: 679, typeName: pallet_society::Error<Runtime>}], index: 26}, {name: Recovery, fields: [{type: 683, typeName: pallet_recovery::Error<Runtime>}], index: 27}, {name: Vesting, fields: [{type: 687, typeName: pallet_vesting::Error<Runtime>}], index: 28}, {name: Scheduler, fields: [{type: 692, typeName: pallet_scheduler::Error<Runtime>}], index: 29}, {name: Proxy, fields: [{type: 701, typeName: pallet_proxy::Error<Runtime>}], index: 30}, {name: Multisig, fields: [{type: 705, typeName: pallet_multisig::Error<Runtime>}], index: 31}, {name: Preimage, fields: [{type: 713, typeName: pallet_preimage::Error<Runtime>}], index: 32}, {name: Bounties, fields: [{type: 717, typeName: pallet_bounties::Error<Runtime>}], index: 35}, {name: ChildBounties, fields: [{type: 720, typeName: pallet_child_bounties::Error<Runtime>}], index: 40}, {name: ElectionProviderMultiPhase, fields: [{type: 730, typeName: pallet_election_provider_multi_phase::Error<Runtime>}], index: 37}, {name: Nis, fields: [{type: 738, typeName: pallet_nis::Error<Runtime>}], index: 38}, {name: NisCounterpartBalances, fields: [{type: 744, typeName: pallet_balances::Error<Runtime, pallet_balances::Instance2>}], index: 45}, {name: VoterList, fields: [{type: 748, typeName: pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>}], index: 39}, {name: NominationPools, fields: [{type: 766, typeName: pallet_nomination_pools::Error<Runtime>}], index: 41}, {name: FastUnstake, fields: [{type: 771, typeName: pallet_fast_unstake::Error<Runtime>}], index: 42}, {name: Configuration, fields: [{type: 775, typeName: parachains_configuration::Error<Runtime>}], index: 51}, {name: ParaInclusion, fields: [{type: 783, typeName: parachains_inclusion::Error<Runtime>}], index: 53}, {name: ParaInherent, fields: [{type: 789, typeName: parachains_paras_inherent::Error<Runtime>}], index: 54}, {name: Paras, fields: [{type: 814, typeName: parachains_paras::Error<Runtime>}], index: 56}, {name: Hrmp, fields: [{type: 826, typeName: parachains_hrmp::Error<Runtime>}], index: 60}, {name: ParasDisputes, fields: [{type: 834, typeName: parachains_disputes::Error<Runtime>}], index: 62}, {name: ParasSlashing, fields: [{type: 839, typeName: parachains_slashing::Error<Runtime>}], index: 63}, {name: OnDemandAssignmentProvider, fields: [{type: 843, typeName: parachains_assigner_on_demand::Error<Runtime>}], index: 64}, {name: CoretimeAssignmentProvider, fields: [{type: 854, typeName: parachains_assigner_coretime::Error<Runtime>}], index: 65}, {name: Registrar, fields: [{type: 857, typeName: paras_registrar::Error<Runtime>}], index: 70}, {name: Slots, fields: [{type: 859, typeName: slots::Error<Runtime>}], index: 71}, {name: Auctions, fields: [{type: 864, typeName: auctions::Error<Runtime>}], index: 72}, {name: Crowdloan, fields: [{type: 867, typeName: crowdloan::Error<Runtime>}], index: 73}, {name: Coretime, fields: [{type: 868, typeName: coretime::Error<Runtime>}], index: 74}, {name: XcmPallet, fields: [{type: 889, typeName: pallet_xcm::Error<Runtime>}], index: 99}, {name: MessageQueue, fields: [{type: 896, typeName: pallet_message_queue::Error<Runtime>}], index: 100}, {name: AssetRate, fields: [{type: 897, typeName: pallet_asset_rate::Error<Runtime>}], index: 101}, {name: Beefy, fields: [{type: 900, typeName: pallet_beefy::Error<Runtime>}], index: 200}]}}}], pallets: [{name: System, storage: {prefix: System, entries: [{name: Account, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 3}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [ The full account information for a particular account ID.]}, {name: ExtrinsicCount, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ Total extrinsics count for the current block.]}, {name: BlockWeight, modifier: Default, ty: {Plain: 8}, default: [0, 0, 0, 0, 0, 0], docs: [ The current weight for the block.]}, {name: AllExtrinsicsLen, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ Total length (in bytes) for all extrinsics put together, for the current block.]}, {name: BlockHash, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 12}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Map of block numbers to block hashes.]}, {name: ExtrinsicData, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 13}}, default: [0], docs: [ Extrinsics data for the current block (maps an extrinsic's index to its data).]}, {name: Number, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The current block number being processed. Set by `execute_block`.]}, {name: ParentHash, modifier: Default, ty: {Plain: 12}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Hash of the previous block.]}, {name: Digest, modifier: Default, ty: {Plain: 14}, default: [0], docs: [ Digest of the current block, also part of the block header.]}, {name: Events, modifier: Default, ty: {Plain: 18}, default: [0], docs: [ Events deposited for the current block., ,  NOTE: The item is unbound and should therefore never be read on chain.,  It could otherwise inflate the PoV size of a block., ,  Events have a large in-memory size. Box the events to not go out-of-memory,  just in case someone still reads them from within the runtime.]}, {name: EventCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The number of events in the `Events<T>` list.]}, {name: EventTopics, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 12, value: 524}}, default: [0], docs: [ Mapping between a topic (represented by T::Hash) and a vector of indexes,  of events in the `<Events<T>>` list., ,  All topic vectors have deterministic storage locations depending on the topic. This,  allows light-clients to leverage the changes trie storage tracking mechanism and,  in case of changes fetch the list of events of interest., ,  The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just,  the `EventIndex` then in case if the topic has the same contents on the next block,  no notification will be triggered thus the event might be lost.]}, {name: LastRuntimeUpgrade, modifier: Optional, ty: {Plain: 525}, default: [0], docs: [ Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.]}, {name: UpgradedToU32RefCount, modifier: Default, ty: {Plain: 30}, default: [0], docs: [ True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.]}, {name: UpgradedToTripleRefCount, modifier: Default, ty: {Plain: 30}, default: [0], docs: [ True if we have upgraded so that AccountInfo contains three types of `RefCount`. False,  (default) if not.]}, {name: ExecutionPhase, modifier: Optional, ty: {Plain: 523}, default: [0], docs: [ The execution phase of the block.]}, {name: AuthorizedUpgrade, modifier: Optional, ty: {Plain: 527}, default: [0], docs: [ `Some` if a code upgrade has been authorized.]}]}, calls: {ty: 97}, event: {ty: 21}, constants: [{name: BlockWeights, ty: 528, value: [7, 168, 26, 10, 83, 3, 0, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 66, 115, 187, 29, 0, 1, 11, 48, 243, 112, 143, 88, 1, 19, 163, 112, 61, 10, 215, 163, 112, 189, 1, 11, 0, 152, 247, 62, 93, 1, 19, 255, 255, 255, 255, 255, 255, 255, 191, 1, 0, 0, 66, 115, 187, 29, 0, 1, 11, 48, 123, 195, 249, 204, 1, 19, 163, 112, 61, 10, 215, 163, 112, 253, 1, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 1, 7, 0, 136, 82, 106, 116, 19, 0, 0, 0, 0, 0, 0, 0, 64, 66, 115, 187, 29, 0, 0, 0, 0], docs: [ Block & extrinsics weights: base values and limits.]}, {name: BlockLength, ty: 531, value: [0, 0, 60, 0, 0, 0, 80, 0, 0, 0, 80, 0], docs: [ The maximum length of a block (in bytes).]}, {name: BlockHashCount, ty: 4, value: [0, 16, 0, 0], docs: [ Maximum number of block number to block hash mappings to keep (oldest pruned first).]}, {name: DbWeight, ty: 533, value: [64, 120, 125, 1, 0, 0, 0, 0, 0, 225, 245, 5, 0, 0, 0, 0], docs: [ The weight of runtime database operations the runtime can invoke.]}, {name: Version, ty: 534, value: [24, 107, 117, 115, 97, 109, 97, 52, 112, 97, 114, 105, 116, 121, 45, 107, 117, 115, 97, 109, 97, 2, 0, 0, 0, 22, 74, 15, 0, 0, 0, 0, 0, 76, 223, 106, 203, 104, 153, 7, 96, 155, 4, 0, 0, 0, 55, 227, 151, 252, 124, 145, 245, 228, 2, 0, 0, 0, 64, 254, 58, 212, 1, 248, 149, 154, 6, 0, 0, 0, 210, 188, 152, 151, 238, 208, 143, 21, 3, 0, 0, 0, 247, 139, 39, 139, 229, 63, 69, 76, 2, 0, 0, 0, 175, 44, 2, 151, 162, 62, 109, 61, 10, 0, 0, 0, 73, 234, 175, 27, 84, 138, 12, 176, 3, 0, 0, 0, 145, 213, 223, 24, 176, 210, 207, 88, 2, 0, 0, 0, 42, 94, 146, 70, 85, 57, 158, 96, 1, 0, 0, 0, 237, 153, 197, 172, 178, 94, 237, 245, 3, 0, 0, 0, 203, 202, 37, 227, 159, 20, 35, 135, 2, 0, 0, 0, 104, 122, 212, 74, 211, 127, 3, 194, 1, 0, 0, 0, 171, 60, 5, 114, 41, 31, 235, 139, 1, 0, 0, 0, 188, 157, 137, 144, 79, 91, 146, 63, 1, 0, 0, 0, 55, 200, 187, 19, 80, 169, 162, 168, 4, 0, 0, 0, 243, 255, 20, 213, 171, 82, 112, 89, 3, 0, 0, 0, 23, 166, 188, 13, 0, 98, 174, 179, 1, 0, 0, 0, 24, 239, 88, 163, 182, 123, 167, 112, 1, 0, 0, 0, 251, 197, 119, 185, 215, 71, 239, 214, 1, 0, 0, 0, 26, 0, 0, 0, 1], docs: [ Get the chain's current version.]}, {name: SS58Prefix, ty: 94, value: [2, 0], docs: [ The designated SS58 prefix of this chain., ,  This replaces the "ss58Format" property declared in the chain spec. Reason is,  that the runtime should know about the prefix in order to make use of it as,  an identifier of the chain.]}], error: {ty: 538}, index: 0, docs: []}, {name: Babe, storage: {prefix: Babe, entries: [{name: EpochIndex, modifier: Default, ty: {Plain: 11}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ Current epoch index.]}, {name: Authorities, modifier: Default, ty: {Plain: 539}, default: [0], docs: [ Current epoch authorities.]}, {name: GenesisSlot, modifier: Default, ty: {Plain: 105}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ The slot at which the first epoch actually started. This is 0,  until the first block of the chain.]}, {name: CurrentSlot, modifier: Default, ty: {Plain: 105}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ Current slot number.]}, {name: Randomness, modifier: Default, ty: {Plain: 1}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The epoch randomness for the *current* epoch., ,  # Security, ,  This MUST NOT be used for gambling, as it can be influenced by a,  malicious validator in the short term. It MAY be used in many,  cryptographic protocols, however, so long as one remembers that this,  (like everything else on-chain) it is public. For example, it can be,  used where a number is needed that cannot have been chosen by an,  adversary, for purposes such as public-coin zero-knowledge proofs.]}, {name: PendingEpochConfigChange, modifier: Optional, ty: {Plain: 107}, default: [0], docs: [ Pending epoch configuration change that will be applied when the next epoch is enacted.]}, {name: NextRandomness, modifier: Default, ty: {Plain: 1}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Next epoch randomness.]}, {name: NextAuthorities, modifier: Default, ty: {Plain: 539}, default: [0], docs: [ Next epoch authorities.]}, {name: SegmentIndex, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Randomness under construction., ,  We make a trade-off between storage accesses and list length.,  We store the under-construction randomness in segments of up to,  `UNDER_CONSTRUCTION_SEGMENT_LENGTH`., ,  Once a segment reaches this length, we begin the next one.,  We reset all segments and return to `0` at the beginning of every,  epoch.]}, {name: UnderConstruction, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 542}}, default: [0], docs: [ TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.]}, {name: Initialized, modifier: Optional, ty: {Plain: 544}, default: [0], docs: [ Temporary value (cleared at block finalization) which is `Some`,  if per-block initialization has already been called for current block.]}, {name: AuthorVrfRandomness, modifier: Default, ty: {Plain: 488}, default: [0], docs: [ This field should always be populated during block processing unless,  secondary plain slots are enabled (which don't contain a VRF output)., ,  It is set in `on_finalize`, before it will contain the value from the last block.]}, {name: EpochStart, modifier: Default, ty: {Plain: 189}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ The block numbers when the last and current epoch have started, respectively `N-1` and,  `N`.,  NOTE: We track this is in order to annotate the block number when a given pool of,  entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in,  slots, which may be skipped, the block numbers may not line up with the slot numbers.]}, {name: Lateness, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ How late the current block is compared to its parent., ,  This entry is populated as part of block execution and is cleaned up,  on block finalization. Querying this storage entry outside of block,  execution context should always yield zero.]}, {name: EpochConfig, modifier: Optional, ty: {Plain: 550}, default: [0], docs: [ The configuration for the current epoch. Should never be `None` as it is initialized in,  genesis.]}, {name: NextEpochConfig, modifier: Optional, ty: {Plain: 550}, default: [0], docs: [ The configuration for the next epoch, `None` if the config will not change,  (you can fallback to `EpochConfig` instead in that case).]}, {name: SkippedEpochs, modifier: Default, ty: {Plain: 551}, default: [0], docs: [ A list of the last 100 skipped epochs and the corresponding session index,  when the epoch was skipped., ,  This is only used for validating equivocation proofs. An equivocation proof,  must contains a key-ownership proof for a given session, therefore we need a,  way to tie together sessions and epoch indices, i.e. we need to validate that,  a validator was the owner of a given key on a given session, and what the,  active epoch index was during that session.]}]}, calls: {ty: 101}, event: null, constants: [{name: EpochDuration, ty: 11, value: [88, 2, 0, 0, 0, 0, 0, 0], docs: [ The amount of time, in slots, that each epoch should last.,  NOTE: Currently it is not possible to change the epoch duration after,  the chain has started. Attempting to do so will brick block production.]}, {name: ExpectedBlockTime, ty: 11, value: [112, 23, 0, 0, 0, 0, 0, 0], docs: [ The expected average block time at which BABE should be creating,  blocks. Since BABE is probabilistic it is not trivial to figure out,  what the expected average block time should be based on the slot,  duration and the security parameter `c` (where `1 - c` represents,  the probability of a slot being empty).]}, {name: MaxAuthorities, ty: 4, value: [160, 134, 1, 0], docs: [ Max number of authorities allowed]}, {name: MaxNominators, ty: 4, value: [0, 2, 0, 0], docs: [ The maximum number of nominators for each validator.]}], error: {ty: 554}, index: 1, docs: []}, {name: Timestamp, storage: {prefix: Timestamp, entries: [{name: Now, modifier: Default, ty: {Plain: 11}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ The current time for the current block.]}, {name: DidUpdate, modifier: Default, ty: {Plain: 30}, default: [0], docs: [ Whether the timestamp has been updated in this block., ,  This value is updated to `true` upon successful submission of a timestamp by a node.,  It is then checked at the end of each block execution in the `on_finalize` hook.]}]}, calls: {ty: 110}, event: null, constants: [{name: MinimumPeriod, ty: 11, value: [184, 11, 0, 0, 0, 0, 0, 0], docs: [ The minimum period between blocks., ,  Be aware that this is different to the *expected* period that the block production,  apparatus provides. Your chosen consensus system will generally work with this to,  determine a sensible block time. For example, in the Aura pallet it will be double this,  period on default settings.]}], error: null, index: 2, docs: []}, {name: Indices, storage: {prefix: Indices, entries: [{name: Accounts, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 555}}, default: [0], docs: [ The lookup from index to account.]}]}, calls: {ty: 111}, event: {ty: 31}, constants: [{name: Deposit, ty: 6, value: [52, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The deposit needed for reserving an index.]}], error: {ty: 556}, index: 3, docs: []}, {name: Balances, storage: {prefix: Balances, entries: [{name: TotalIssuance, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The total units issued in the system.]}, {name: InactiveIssuance, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The total units of outstanding deactivated balance in the system.]}, {name: Account, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 5}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [ The Balances pallet example of storing the balance of an account., ,  # Example, ,  ```nocompile,   impl pallet_balances::Config for Runtime {,     type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>,   },  ```, ,  You can also store the balance of an account in the `System` pallet., ,  # Example, ,  ```nocompile,   impl pallet_balances::Config for Runtime {,    type AccountStore = System,   },  ```, ,  But this comes with tradeoffs, storing account balances in the system pallet stores,  `frame_system` data alongside the account data contrary to storing account balances in the,  `Balances` pallet, which uses a `StorageMap` to store balances data only.,  NOTE: This is only used in the case that this pallet is used to store balances.]}, {name: Locks, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 557}}, default: [0], docs: [ Any liquidity locks on some account balances.,  NOTE: Should only be accessed when setting, changing and freeing a lock.]}, {name: Reserves, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 561}}, default: [0], docs: [ Named reserves on some account balances.]}, {name: Holds, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 564}}, default: [0], docs: [ Holds on account balances.]}, {name: Freezes, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 570}}, default: [0], docs: [ Freeze locks on account balances.]}]}, calls: {ty: 115}, event: {ty: 32}, constants: [{name: ExistentialDeposit, ty: 6, value: [85, 67, 222, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!, ,  If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for,  this pallet. However, you do so at your own risk: this will open up a major DoS vector.,  In case you have multiple sources of provider references, you may also get unexpected,  behaviour if you set this to zero., ,  Bottom line: Do yourself a favour and make it at least one!]}, {name: MaxLocks, ty: 4, value: [50, 0, 0, 0], docs: [ The maximum number of locks that should exist on an account.,  Not strictly enforced, but used for weight estimation.]}, {name: MaxReserves, ty: 4, value: [50, 0, 0, 0], docs: [ The maximum number of named reserves that can exist on an account.]}, {name: MaxFreezes, ty: 4, value: [8, 0, 0, 0], docs: [ The maximum number of individual freeze locks that can exist on an account at any time.]}], error: {ty: 575}, index: 4, docs: []}, {name: TransactionPayment, storage: {prefix: TransactionPayment, entries: [{name: NextFeeMultiplier, modifier: Default, ty: {Plain: 458}, default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: []}, {name: StorageVersion, modifier: Default, ty: {Plain: 576}, default: [0], docs: []}]}, calls: null, event: {ty: 34}, constants: [{name: OperationalFeeMultiplier, ty: 2, value: [5], docs: [ A fee multiplier for `Operational` extrinsics to compute "virtual tip" to boost their,  `priority`, ,  This value is multiplied by the `final_fee` to obtain a "virtual tip" that is later,  added to a tip component in regular `priority` calculations.,  It means that a `Normal` transaction can front-run a similarly-sized `Operational`,  extrinsic (with no tip), by including a tip value greater than the virtual tip., ,  ```rust,ignore,  // For `Normal`,  let priority = priority_calc(tip);, ,  // For `Operational`,  let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;,  let priority = priority_calc(tip + virtual_tip);,  ```, ,  Note that since we use `final_fee` the multiplier applies also to the regular `tip`,  sent with the transaction. So, not only does the transaction get a priority bump based,  on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`,  transactions.]}], error: null, index: 33, docs: []}, {name: Authorship, storage: {prefix: Authorship, entries: [{name: Author, modifier: Optional, ty: {Plain: 0}, default: [0], docs: [ Author of current block.]}]}, calls: null, event: null, constants: [], error: null, index: 5, docs: []}, {name: Staking, storage: {prefix: Staking, entries: [{name: ValidatorCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The ideal number of active validators.]}, {name: MinimumValidatorCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Minimum number of staking participants before emergency conditions are imposed.]}, {name: Invulnerables, modifier: Default, ty: {Plain: 116}, default: [0], docs: [ Any validators that may never be slashed or forcibly kicked. It's a Vec since they're,  easy to initialize and the performance hit is minimal (we expect no more than four,  invulnerables) and restricted to testnets.]}, {name: Bonded, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 0}}, default: [0], docs: [ Map from all locked "stash" accounts to the controller account., ,  TWOX-NOTE: SAFE since `AccountId` is a secure hash.]}, {name: MinNominatorBond, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum active bond to become and maintain the role of a nominator.]}, {name: MinValidatorBond, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum active bond to become and maintain the role of a validator.]}, {name: MinimumActiveStake, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum active nominator stake of the last successful election.]}, {name: MinCommission, modifier: Default, ty: {Plain: 37}, default: [0, 0, 0, 0], docs: [ The minimum amount of commission that validators can set., ,  If set to `0`, no limit exists.]}, {name: Ledger, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 577}}, default: [0], docs: [ Map from all (unlocked) "controller" accounts to the info regarding the staking., ,  Note: All the reads and mutations to this storage *MUST* be done through the methods exposed,  by [`StakingLedger`] to ensure data and lock consistency.]}, {name: Payee, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 36}}, default: [0], docs: [ Where the reward payment should be made. Keyed by stash., ,  TWOX-NOTE: SAFE since `AccountId` is a secure hash.]}, {name: Validators, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 38}}, default: [0, 0], docs: [ The map from (wannabe) validator stash key to the preferences of that validator., ,  TWOX-NOTE: SAFE since `AccountId` is a secure hash.]}, {name: CounterForValidators, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: MaxValidatorsCount, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ The maximum validator count before we stop allowing new validators to join., ,  When this value is not set, no limits are enforced.]}, {name: Nominators, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 579}}, default: [0], docs: [ The map from nominator stash key to their nomination preferences, namely the validators that,  they wish to support., ,  Note that the keys of this storage map might become non-decodable in case the,  account's [`NominationsQuota::MaxNominations`] configuration is decreased.,  In this rare case, these nominators,  are still existent in storage, their key is correct and retrievable (i.e. `contains_key`,  indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable,  nominators will effectively not-exist, until they re-submit their preferences such that it,  is within the bounds of the newly set `Config::MaxNominations`., ,  This implies that `::iter_keys().count()` and `::iter().count()` might return different,  values for this map. Moreover, the main `::count()` is aligned with the former, namely the,  number of keys that exist., ,  Lastly, if any of the nominators become non-decodable, they can be chilled immediately via,  [`Call::chill_other`] dispatchable by anyone., ,  TWOX-NOTE: SAFE since `AccountId` is a secure hash.]}, {name: CounterForNominators, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: MaxNominatorsCount, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ The maximum nominator count before we stop allowing new validators to join., ,  When this value is not set, no limits are enforced.]}, {name: CurrentEra, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ The current era index., ,  This is the latest planned era, depending on how the Session pallet queues the validator,  set, it might be active or not.]}, {name: ActiveEra, modifier: Optional, ty: {Plain: 581}, default: [0], docs: [ The active era information, it holds index and start., ,  The active era is the era being currently rewarded. Validator set of this era must be,  equal to [`SessionInterface::validators`].]}, {name: ErasStartSessionIndex, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 4}}, default: [0], docs: [ The session index at which the era start for the last [`Config::HistoryDepth`] eras., ,  Note: This tracks the starting session (i.e. session index when era start being active),  for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.]}, {name: ErasStakers, modifier: Default, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 54}}, default: [0, 0, 0], docs: [ Exposure of validator at era., ,  This is keyed first by the era index to allow bulk deletion and then the stash account., ,  Is it removed after [`Config::HistoryDepth`] eras.,  If stakers hasn't been set or has been removed then empty exposure is returned., ,  Note: Deprecated since v14. Use `EraInfo` instead to work with exposures.]}, {name: ErasStakersOverview, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 584}}, default: [0], docs: [ Summary of validator exposure at a given era., ,  This contains the total stake in support of the validator and their own stake. In addition,,  it can also be used to get the number of nominators backing this validator and the number of,  exposure pages they are divided into. The page count is useful to determine the number of,  pages of rewards that needs to be claimed., ,  This is keyed first by the era index to allow bulk deletion and then the stash account.,  Should only be accessed through `EraInfo`., ,  Is it removed after [`Config::HistoryDepth`] eras.,  If stakers hasn't been set or has been removed then empty overview is returned.]}, {name: ErasStakersClipped, modifier: Default, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 54}}, default: [0, 0, 0], docs: [ Clipped Exposure of validator at era., ,  Note: This is deprecated, should be used as read-only and will be removed in the future.,  New `Exposure`s are stored in a paged manner in `ErasStakersPaged` instead., ,  This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the,  `T::MaxExposurePageSize` biggest stakers.,  (Note: the field `total` and `own` of the exposure remains unchanged).,  This is used to limit the i/o cost for the nominator payout., ,  This is keyed fist by the era index to allow bulk deletion and then the stash account., ,  It is removed after [`Config::HistoryDepth`] eras.,  If stakers hasn't been set or has been removed then empty exposure is returned., ,  Note: Deprecated since v14. Use `EraInfo` instead to work with exposures.]}, {name: ErasStakersPaged, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat, Twox64Concat], key: 585, value: 586}}, default: [0], docs: [ Paginated exposure of a validator at given era., ,  This is keyed first by the era index to allow bulk deletion, then stash account and finally,  the page. Should only be accessed through `EraInfo`., ,  This is cleared after [`Config::HistoryDepth`] eras.]}, {name: ClaimedRewards, modifier: Default, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 121}}, default: [0], docs: [ History of claimed paged rewards by era and validator., ,  This is keyed by era and validator stash which maps to the set of page indexes which have,  been claimed., ,  It is removed after [`Config::HistoryDepth`] eras.]}, {name: ErasValidatorPrefs, modifier: Default, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 38}}, default: [0, 0], docs: [ Similar to `ErasStakers`, this holds the preferences of validators., ,  This is keyed first by the era index to allow bulk deletion and then the stash account., ,  Is it removed after [`Config::HistoryDepth`] eras.]}, {name: ErasValidatorReward, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 6}}, default: [0], docs: [ The total validator era payout for the last [`Config::HistoryDepth`] eras., ,  Eras that haven't finished yet or has been removed doesn't have reward.]}, {name: ErasRewardPoints, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 587}}, default: [0, 0, 0, 0, 0], docs: [ Rewards for the last [`Config::HistoryDepth`] eras.,  If reward hasn't been set or has been removed then 0 reward is returned.]}, {name: ErasTotalStake, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 6}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The total amount staked for the last [`Config::HistoryDepth`] eras.,  If total hasn't been set or has been removed then 0 stake is returned.]}, {name: ForceEra, modifier: Default, ty: {Plain: 40}, default: [0], docs: [ Mode of era forcing.]}, {name: SlashRewardFraction, modifier: Default, ty: {Plain: 37}, default: [0, 0, 0, 0], docs: [ The percentage of the slash that is distributed to reporters., ,  The rest of the slashed value is handled by the `Slash`.]}, {name: CanceledSlashPayout, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount of currency given to reporters of a slash event which was,  canceled by extraordinary circumstances (e.g. governance).]}, {name: UnappliedSlashes, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 591}}, default: [0], docs: [ All unapplied slashes that are queued for later.]}, {name: BondedEras, modifier: Default, ty: {Plain: 524}, default: [0], docs: [ A mapping from still-bonded eras to the first session index of that era., ,  Must contains information for eras for the range:,  `[active_era - bounding_duration; active_era]`]}, {name: ValidatorSlashInEra, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 593}}, default: [0], docs: [ All slashing events on validators, mapped by era to the highest slash proportion,  and slash value of the era.]}, {name: NominatorSlashInEra, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 6}}, default: [0], docs: [ All slashing events on nominators, mapped by era to the highest slash value of the era.]}, {name: SlashingSpans, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 594}}, default: [0], docs: [ Slashing spans for stash accounts.]}, {name: SpanSlash, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 590, value: 595}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Records information about the maximum slash of a stash within a slashing span,,  as well as how much reward has been paid out.]}, {name: CurrentPlannedSession, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The last planned session scheduled by the session pallet., ,  This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].]}, {name: OffendingValidators, modifier: Default, ty: {Plain: 596}, default: [0], docs: [ Indices of validators that have offended in the active era and whether they are currently,  disabled., ,  This value should be a superset of disabled validators since not all offences lead to the,  validator being disabled (if there was no slash). This is needed to track the percentage of,  validators that have offended in the current era, ensuring a new era is forced if,  `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find,  whether a given validator has previously offended using binary search. It gets cleared when,  the era ends.]}, {name: ChillThreshold, modifier: Optional, ty: {Plain: 120}, default: [0], docs: [ The threshold for when users can start calling `chill_other` for other validators /,  nominators. The threshold is compared to the actual number of validators / nominators,  (`CountFor*`) in the system compared to the configured max (`Max*Count`).]}]}, calls: {ty: 118}, event: {ty: 35}, constants: [{name: HistoryDepth, ty: 4, value: [84, 0, 0, 0], docs: [ Number of eras to keep in history., ,  Following information is kept for eras in `[current_era -,  HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,,  `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,,  `ErasTotalStake`, `ErasStartSessionIndex`, `ClaimedRewards`, `ErasStakersPaged`,,  `ErasStakersOverview`., ,  Must be more than the number of eras delayed by session.,  I.e. active era must always be in history. I.e. `active_era >,  current_era - history_depth` must be guaranteed., ,  If migrating an existing pallet from storage value to config value,,  this should be set to same value or greater as in storage., ,  Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`,  item `StakingLedger.legacy_claimed_rewards`. Setting this value lower than,  the existing value can lead to inconsistencies in the,  `StakingLedger` and will need to be handled properly in a migration.,  The test `reducing_history_depth_abrupt` shows this effect.]}, {name: SessionsPerEra, ty: 4, value: [6, 0, 0, 0], docs: [ Number of sessions per era.]}, {name: BondingDuration, ty: 4, value: [28, 0, 0, 0], docs: [ Number of eras that staked funds must remain bonded for.]}, {name: SlashDeferDuration, ty: 4, value: [27, 0, 0, 0], docs: [ Number of eras that slashes are deferred by, after computation., ,  This should be less than the bonding duration. Set to 0 if slashes,  should be applied immediately, without opportunity for intervention.]}, {name: MaxExposurePageSize, ty: 4, value: [0, 2, 0, 0], docs: [ The maximum size of each `T::ExposurePage`., ,  An `ExposurePage` is weakly bounded to a maximum of `MaxExposurePageSize`,  nominators., ,  For older non-paged exposure, a reward payout was restricted to the top,  `MaxExposurePageSize` nominators. This is to limit the i/o cost for the,  nominator payout., ,  Note: `MaxExposurePageSize` is used to bound `ClaimedRewards` and is unsafe to reduce,  without handling it in a migration.]}, {name: MaxUnlockingChunks, ty: 4, value: [32, 0, 0, 0], docs: [ The maximum number of `unlocking` chunks a [`StakingLedger`] can,  have. Effectively determines how many unique eras a staker may be,  unbonding in., ,  Note: `MaxUnlockingChunks` is used as the upper bound for the,  `BoundedVec` item `StakingLedger.unlocking`. Setting this value,  lower than the existing value can lead to inconsistencies in the,  `StakingLedger` and will need to be handled properly in a runtime,  migration. The test `reducing_max_unlocking_chunks_abrupt` shows,  this effect.]}], error: {ty: 598}, index: 6, docs: []}, {name: Offences, storage: {prefix: Offences, entries: [{name: Reports, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 12, value: 599}}, default: [0], docs: [ The primary structure that holds all offence records keyed by report identifiers.]}, {name: ConcurrentReportsIndex, modifier: Default, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 600, value: 197}}, default: [0], docs: [ A vector of reports of the same kind that happened at the same time slot.]}]}, calls: null, event: {ty: 41}, constants: [], error: null, index: 7, docs: []}, {name: Historical, storage: {prefix: Historical, entries: [{name: HistoricalSessions, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 601}}, default: [0], docs: [ Mapping from historical session indices to session-data root hash and validator count.]}, {name: StoredRange, modifier: Optional, ty: {Plain: 189}, default: [0], docs: [ The range of historical sessions we store. [first, last)]}]}, calls: null, event: null, constants: [], error: null, index: 34, docs: []}, {name: Session, storage: {prefix: Session, entries: [{name: Validators, modifier: Default, ty: {Plain: 116}, default: [0], docs: [ The current set of validators.]}, {name: CurrentIndex, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Current index of the session.]}, {name: QueuedChanged, modifier: Default, ty: {Plain: 30}, default: [0], docs: [ True if the underlying economic identities or weighting behind the validators,  has changed in the queued validator set.]}, {name: QueuedKeys, modifier: Default, ty: {Plain: 602}, default: [0], docs: [ The queued keys for the next session. When the next session begins, these keys,  will be used to determine the validator's session keys.]}, {name: DisabledValidators, modifier: Default, ty: {Plain: 121}, default: [0], docs: [ Indices of disabled validators., ,  The vec is always kept sorted so that we can find whether a given validator is,  disabled using binary search. It gets cleared when `on_session_ending` returns,  a new set of identities.]}, {name: NextKeys, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 134}}, default: [0], docs: [ The next session keys for a validator.]}, {name: KeyOwner, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 604, value: 0}}, default: [0], docs: [ The owner of a key. The key is the `KeyTypeId` + the encoded key.]}]}, calls: {ty: 133}, event: {ty: 43}, constants: [], error: {ty: 606}, index: 8, docs: []}, {name: Grandpa, storage: {prefix: Grandpa, entries: [{name: State, modifier: Default, ty: {Plain: 607}, default: [0], docs: [ State of the current authority set.]}, {name: PendingChange, modifier: Optional, ty: {Plain: 608}, default: [0], docs: [ Pending change: (signaled at, scheduled change).]}, {name: NextForced, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ next block number where we can force a change.]}, {name: Stalled, modifier: Optional, ty: {Plain: 189}, default: [0], docs: [ `true` if we are currently stalled.]}, {name: CurrentSetId, modifier: Default, ty: {Plain: 11}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ The number of changes (both in terms of keys and underlying economic responsibilities),  in the "set" of Grandpa validators from genesis.]}, {name: SetIdSession, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 11, value: 4}}, default: [0], docs: [ A mapping from grandpa set ID to the index of the *most recent* session for which its,  members were responsible., ,  This is only used for validating equivocation proofs. An equivocation proof must,  contains a key-ownership proof for a given session, therefore we need a way to tie,  together sessions and GRANDPA set ids, i.e. we need to validate that a validator,  was the owner of a given key on a given session, and what the active set ID was,  during that session., ,  TWOX-NOTE: `SetId` is not under user control.]}, {name: Authorities, modifier: Default, ty: {Plain: 609}, default: [0], docs: [ The current list of authorities.]}]}, calls: {ty: 141}, event: {ty: 44}, constants: [{name: MaxAuthorities, ty: 4, value: [160, 134, 1, 0], docs: [ Max Authorities in use]}, {name: MaxNominators, ty: 4, value: [0, 2, 0, 0], docs: [ The maximum number of nominators for each validator.]}, {name: MaxSetIdSessionEntries, ty: 11, value: [168, 0, 0, 0, 0, 0, 0, 0], docs: [ The maximum number of entries to keep in the set id to session index mapping., ,  Since the `SetIdSession` map is only used for validating equivocations this,  value should relate to the bonding duration of whatever staking system is,  being used (if any). If equivocation handling is not enabled then this value,  can be zero.]}], error: {ty: 610}, index: 10, docs: []}, {name: AuthorityDiscovery, storage: {prefix: AuthorityDiscovery, entries: [{name: Keys, modifier: Default, ty: {Plain: 611}, default: [0], docs: [ Keys of the current authority set.]}, {name: NextKeys, modifier: Default, ty: {Plain: 611}, default: [0], docs: [ Keys of the next authority set.]}]}, calls: null, event: null, constants: [], error: null, index: 12, docs: []}, {name: Treasury, storage: {prefix: Treasury, entries: [{name: ProposalCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Number of proposals that have been made.]}, {name: Proposals, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 613}}, default: [0], docs: [ Proposals that have been made.]}, {name: Deactivated, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount which has been reported as inactive to Currency.]}, {name: Approvals, modifier: Default, ty: {Plain: 614}, default: [0], docs: [ Proposal indices that have been approved but not yet awarded.]}, {name: SpendCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The count of spends that have been made.]}, {name: Spends, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 615}}, default: [0], docs: [ Spends that have been approved and being processed.]}]}, calls: {ty: 153}, event: {ty: 58}, constants: [{name: ProposalBond, ty: 617, value: [80, 195, 0, 0], docs: [ Fraction of a proposal's value that should be bonded in order to place the proposal.,  An accepted proposal gets these back. A rejected proposal does not.]}, {name: ProposalBondMinimum, ty: 6, value: [16, 8, 110, 56, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Minimum amount of funds that should be placed in a deposit for making a proposal.]}, {name: ProposalBondMaximum, ty: 128, value: [1, 8, 20, 126, 5, 81, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Maximum amount of funds that should be placed in a deposit for making a proposal.]}, {name: SpendPeriod, ty: 4, value: [128, 81, 1, 0], docs: [ Period between successive spends.]}, {name: Burn, ty: 617, value: [208, 7, 0, 0], docs: [ Percentage of spare funds (if any) that are burnt per spend period.]}, {name: PalletId, ty: 618, value: [112, 121, 47, 116, 114, 115, 114, 121], docs: [ The treasury's pallet id, used for deriving its sovereign account ID.]}, {name: MaxApprovals, ty: 4, value: [100, 0, 0, 0], docs: [ The maximum number of approvals that can wait in the spending queue., ,  NOTE: This parameter is also used within the Bounties Pallet extension if enabled.]}, {name: PayoutPeriod, ty: 4, value: [128, 151, 6, 0], docs: [ The period during which an approved treasury spend has to be claimed.]}], error: {ty: 619}, index: 18, docs: []}, {name: ConvictionVoting, storage: {prefix: ConvictionVoting, entries: [{name: VotingFor, modifier: Default, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 620, value: 621}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ All voting for a particular voter in a particular voting class. We store the balance for the,  number of votes that we have recorded.]}, {name: ClassLocksFor, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 629}}, default: [0], docs: [ The voting classes which have a non-zero lock requirement and the lock amounts which they,  require. The actual amount locked on behalf of this pallet should always be the maximum of,  this list.]}]}, calls: {ty: 155}, event: {ty: 92}, constants: [{name: MaxVotes, ty: 4, value: [0, 2, 0, 0], docs: [ The maximum number of concurrent votes an account may have., ,  Also used to compute weight, an overly large value can lead to extrinsics with large,  weight estimation: see `delegate` for instance.]}, {name: VoteLockingPeriod, ty: 4, value: [192, 137, 1, 0], docs: [ The minimum period of vote locking., ,  It should be no shorter than enactment period to ensure that in the case of an approval,,  those successful voters are locked into the consequences that their votes entail.]}], error: {ty: 632}, index: 20, docs: []}, {name: Referenda, storage: {prefix: Referenda, entries: [{name: ReferendumCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The next free referendum index, aka the number of referenda started so far.]}, {name: ReferendumInfoFor, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 633}}, default: [0], docs: [ Information concerning any given referendum.]}, {name: TrackQueue, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 94, value: 641}}, default: [0], docs: [ The sorted list of referenda ready to be decided but not yet being decided, ordered by,  conviction-weighted approvals., ,  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.]}, {name: DecidingCount, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 94, value: 4}}, default: [0, 0, 0, 0], docs: [ The number of referenda being decided currently.]}, {name: MetadataOf, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 12}}, default: [0], docs: [ The metadata is a general information concerning the referendum.,  The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON,  dump or IPFS hash of a JSON file., ,  Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove),  large preimages.]}]}, calls: {ty: 160}, event: {ty: 93}, constants: [{name: SubmissionDeposit, ty: 6, value: [85, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum amount to be used as a deposit for a public referendum proposal.]}, {name: MaxQueued, ty: 4, value: [100, 0, 0, 0], docs: [ Maximum size of the referendum queue for a single track.]}, {name: UndecidingTimeout, ty: 4, value: [128, 19, 3, 0], docs: [ The number of blocks after submission that a referendum must begin being decided by.,  Once this passes, then anyone may cancel the referendum.]}, {name: AlarmInterval, ty: 4, value: [1, 0, 0, 0], docs: [ Quantization level for the referendum wakeup scheduler. A higher number will result in,  fewer storage reads/writes needed for smaller voters, but also result in delays to the,  automatic referendum status changes. Explicit servicing instructions are unaffected.]}, {name: Tracks, ty: 644, value: [64, 0, 0, 16, 114, 111, 111, 116, 1, 0, 0, 0, 32, 211, 63, 37, 166, 215, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 64, 56, 0, 0, 64, 56, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 1, 0, 72, 119, 104, 105, 116, 101, 108, 105, 115, 116, 101, 100, 95, 99, 97, 108, 108, 101, 114, 100, 0, 0, 0, 80, 200, 236, 54, 42, 47, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 128, 19, 3, 0, 100, 0, 0, 0, 100, 0, 0, 0, 2, 236, 151, 37, 16, 0, 0, 0, 0, 123, 87, 60, 23, 0, 0, 0, 0, 66, 57, 47, 18, 0, 0, 0, 0, 2, 14, 0, 132, 0, 0, 0, 0, 0, 214, 230, 31, 1, 0, 0, 0, 0, 57, 98, 121, 2, 0, 0, 0, 0, 2, 0, 60, 119, 105, 115, 104, 95, 102, 111, 114, 95, 99, 104, 97, 110, 103, 101, 10, 0, 0, 0, 160, 144, 217, 109, 84, 94, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 64, 56, 0, 0, 100, 0, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 10, 0, 52, 115, 116, 97, 107, 105, 110, 103, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 40, 100, 118, 27, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 8, 7, 0, 0, 100, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 11, 0, 36, 116, 114, 101, 97, 115, 117, 114, 101, 114, 10, 0, 0, 0, 8, 20, 126, 5, 81, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 128, 112, 0, 0, 64, 56, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 12, 0, 44, 108, 101, 97, 115, 101, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 40, 100, 118, 27, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 8, 7, 0, 0, 100, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 13, 0, 64, 102, 101, 108, 108, 111, 119, 115, 104, 105, 112, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 40, 100, 118, 27, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 8, 7, 0, 0, 100, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 14, 0, 52, 103, 101, 110, 101, 114, 97, 108, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 40, 100, 118, 27, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 8, 7, 0, 0, 100, 0, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 2, 89, 162, 244, 2, 0, 0, 0, 0, 163, 41, 107, 5, 0, 0, 0, 0, 46, 107, 74, 253, 255, 255, 255, 255, 15, 0, 52, 97, 117, 99, 116, 105, 111, 110, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 40, 100, 118, 27, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 8, 7, 0, 0, 100, 0, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 2, 89, 162, 244, 2, 0, 0, 0, 0, 163, 41, 107, 5, 0, 0, 0, 0, 46, 107, 74, 253, 255, 255, 255, 255, 20, 0, 80, 114, 101, 102, 101, 114, 101, 110, 100, 117, 109, 95, 99, 97, 110, 99, 101, 108, 108, 101, 114, 232, 3, 0, 0, 80, 200, 236, 54, 42, 47, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 192, 137, 1, 0, 8, 7, 0, 0, 100, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 21, 0, 68, 114, 101, 102, 101, 114, 101, 110, 100, 117, 109, 95, 107, 105, 108, 108, 101, 114, 232, 3, 0, 0, 144, 233, 159, 18, 211, 235, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 128, 19, 3, 0, 8, 7, 0, 0, 100, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 30, 0, 48, 115, 109, 97, 108, 108, 95, 116, 105, 112, 112, 101, 114, 200, 0, 0, 0, 85, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 192, 137, 1, 0, 100, 0, 0, 0, 10, 0, 0, 0, 0, 73, 145, 73, 21, 0, 101, 205, 29, 0, 202, 154, 59, 2, 249, 186, 24, 0, 0, 0, 0, 0, 42, 77, 49, 0, 0, 0, 0, 0, 107, 89, 231, 255, 255, 255, 255, 255, 31, 0, 40, 98, 105, 103, 95, 116, 105, 112, 112, 101, 114, 100, 0, 0, 0, 82, 5, 55, 156, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 192, 137, 1, 0, 88, 2, 0, 0, 100, 0, 0, 0, 0, 73, 145, 73, 21, 0, 101, 205, 29, 0, 202, 154, 59, 2, 105, 79, 63, 0, 0, 0, 0, 0, 53, 150, 125, 0, 0, 0, 0, 0, 229, 52, 193, 255, 255, 255, 255, 255, 32, 0, 52, 115, 109, 97, 108, 108, 95, 115, 112, 101, 110, 100, 101, 114, 50, 0, 0, 0, 52, 53, 38, 26, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 9, 0, 0, 128, 19, 3, 0, 32, 28, 0, 0, 64, 56, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 33, 0, 56, 109, 101, 100, 105, 117, 109, 95, 115, 112, 101, 110, 100, 101, 114, 50, 0, 0, 0, 104, 106, 76, 52, 16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 9, 0, 0, 128, 19, 3, 0, 64, 56, 0, 0, 64, 56, 0, 0, 0, 91, 1, 246, 48, 0, 101, 205, 29, 0, 202, 154, 59, 2, 17, 97, 219, 0, 0, 0, 0, 0, 191, 209, 170, 1, 0, 0, 0, 0, 32, 151, 42, 255, 255, 255, 255, 255, 34, 0, 44, 98, 105, 103, 95, 115, 112, 101, 110, 100, 101, 114, 50, 0, 0, 0, 208, 212, 152, 104, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 9, 0, 0, 128, 19, 3, 0, 128, 112, 0, 0, 64, 56, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 2, 65, 60, 176, 1, 0, 0, 0, 0, 117, 93, 52, 3, 0, 0, 0, 0, 69, 209, 101, 254, 255, 255, 255, 255], docs: [ Information concerning the different referendum tracks.]}], error: {ty: 650}, index: 21, docs: []}, {name: FellowshipCollective, storage: {prefix: FellowshipCollective, entries: [{name: MemberCount, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 94, value: 4}}, default: [0, 0, 0, 0], docs: [ The number of members in the collective who have at least the rank according to the index,  of the vec.]}, {name: Members, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 651}}, default: [0], docs: [ The current members of the collective.]}, {name: IdToIndex, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 652, value: 4}}, default: [0], docs: [ The index of each ranks's member into the group of members who have at least that rank.]}, {name: IndexToId, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 653, value: 0}}, default: [0], docs: [ The members in the collective by index. All indices in the range `0..MemberCount` will,  return `Some`, however a member's index is not guaranteed to remain unchanged over time.]}, {name: Voting, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat, Twox64Concat], key: 583, value: 472}}, default: [0], docs: [ Votes on a given proposal, if it is ongoing.]}, {name: VotingCleanup, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 654}}, default: [0], docs: []}]}, calls: {ty: 170}, event: {ty: 471}, constants: [], error: {ty: 655}, index: 22, docs: []}, {name: FellowshipReferenda, storage: {prefix: FellowshipReferenda, entries: [{name: ReferendumCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The next free referendum index, aka the number of referenda started so far.]}, {name: ReferendumInfoFor, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 656}}, default: [0], docs: [ Information concerning any given referendum.]}, {name: TrackQueue, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 94, value: 658}}, default: [0], docs: [ The sorted list of referenda ready to be decided but not yet being decided, ordered by,  conviction-weighted approvals., ,  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.]}, {name: DecidingCount, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 94, value: 4}}, default: [0, 0, 0, 0], docs: [ The number of referenda being decided currently.]}, {name: MetadataOf, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 12}}, default: [0], docs: [ The metadata is a general information concerning the referendum.,  The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON,  dump or IPFS hash of a JSON file., ,  Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove),  large preimages.]}]}, calls: {ty: 171}, event: {ty: 474}, constants: [{name: SubmissionDeposit, ty: 6, value: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum amount to be used as a deposit for a public referendum proposal.]}, {name: MaxQueued, ty: 4, value: [100, 0, 0, 0], docs: [ Maximum size of the referendum queue for a single track.]}, {name: UndecidingTimeout, ty: 4, value: [192, 137, 1, 0], docs: [ The number of blocks after submission that a referendum must begin being decided by.,  Once this passes, then anyone may cancel the referendum.]}, {name: AlarmInterval, ty: 4, value: [1, 0, 0, 0], docs: [ Quantization level for the referendum wakeup scheduler. A higher number will result in,  fewer storage reads/writes needed for smaller voters, but also result in delays to the,  automatic referendum status changes. Explicit servicing instructions are unaffected.]}, {name: Tracks, ty: 644, value: [40, 0, 0, 40, 99, 97, 110, 100, 105, 100, 97, 116, 101, 115, 10, 0, 0, 0, 52, 53, 38, 26, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 1, 0, 28, 109, 101, 109, 98, 101, 114, 115, 10, 0, 0, 0, 82, 5, 55, 156, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 2, 0, 44, 112, 114, 111, 102, 105, 99, 105, 101, 110, 116, 115, 10, 0, 0, 0, 82, 5, 55, 156, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 3, 0, 28, 102, 101, 108, 108, 111, 119, 115, 10, 0, 0, 0, 82, 5, 55, 156, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 4, 0, 56, 115, 101, 110, 105, 111, 114, 32, 102, 101, 108, 108, 111, 119, 115, 10, 0, 0, 0, 82, 5, 55, 156, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 5, 0, 28, 101, 120, 112, 101, 114, 116, 115, 10, 0, 0, 0, 85, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 6, 0, 56, 115, 101, 110, 105, 111, 114, 32, 101, 120, 112, 101, 114, 116, 115, 10, 0, 0, 0, 85, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 7, 0, 28, 109, 97, 115, 116, 101, 114, 115, 10, 0, 0, 0, 85, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 8, 0, 56, 115, 101, 110, 105, 111, 114, 32, 109, 97, 115, 116, 101, 114, 115, 10, 0, 0, 0, 85, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 9, 0, 52, 103, 114, 97, 110, 100, 32, 109, 97, 115, 116, 101, 114, 115, 10, 0, 0, 0, 85, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29], docs: [ Information concerning the different referendum tracks.]}], error: {ty: 659}, index: 23, docs: []}, {name: Origins, storage: null, calls: null, event: null, constants: [], error: null, index: 43, docs: []}, {name: Whitelist, storage: {prefix: Whitelist, entries: [{name: WhitelistedCall, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 12, value: 113}}, default: [0], docs: []}]}, calls: {ty: 172}, event: {ty: 475}, constants: [], error: {ty: 660}, index: 44, docs: []}, {name: Claims, storage: {prefix: Claims, entries: [{name: Claims, modifier: Optional, ty: {Map: {hashers: [Identity], key: 176, value: 6}}, default: [0], docs: []}, {name: Total, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: []}, {name: Vesting, modifier: Optional, ty: {Map: {hashers: [Identity], key: 176, value: 178}}, default: [0], docs: [ Vesting schedule for a claim.,  First balance is the total amount that should be held for vesting.,  Second balance is how much should be unlocked per block.,  The block number is when the vesting should start.]}, {name: Signing, modifier: Optional, ty: {Map: {hashers: [Identity], key: 176, value: 180}}, default: [0], docs: [ The statement kind that must be signed, if any.]}, {name: Preclaims, modifier: Optional, ty: {Map: {hashers: [Identity], key: 0, value: 176}}, default: [0], docs: [ Pre-claimed Ethereum accounts, by the Account ID that they are claimed to.]}]}, calls: {ty: 173}, event: {ty: 480}, constants: [{name: Prefix, ty: 13, value: [124, 80, 97, 121, 32, 75, 83, 77, 115, 32, 116, 111, 32, 116, 104, 101, 32, 75, 117, 115, 97, 109, 97, 32, 97, 99, 99, 111, 117, 110, 116, 58], docs: []}], error: {ty: 661}, index: 19, docs: []}, {name: Utility, storage: null, calls: {ty: 181}, event: {ty: 481}, constants: [{name: batched_calls_limit, ty: 4, value: [170, 42, 0, 0], docs: [ The limit on the number of batched calls.]}], error: {ty: 662}, index: 24, docs: []}, {name: Society, storage: {prefix: Society, entries: [{name: Parameters, modifier: Optional, ty: {Plain: 484}, default: [0], docs: [ The max number of members for the society at one time.]}, {name: Pot, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Amount of our account balance that is specifically for the next round's bid(s).]}, {name: Founder, modifier: Optional, ty: {Plain: 0}, default: [0], docs: [ The first member.]}, {name: Head, modifier: Optional, ty: {Plain: 0}, default: [0], docs: [ The most primary from the most recently approved rank 0 members in the society.]}, {name: Rules, modifier: Optional, ty: {Plain: 12}, default: [0], docs: [ A hash of the rules of this society concerning membership. Can only be set once and,  only by the founder.]}, {name: Members, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 663}}, default: [0], docs: [ The current members and their rank. Doesn't include `SuspendedMembers`.]}, {name: Payouts, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 666}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Information regarding rank-0 payouts, past and future.]}, {name: MemberCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)]}, {name: MemberByIndex, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 0}}, default: [0], docs: [ The current items in `Members` keyed by their unique index. Keys are densely populated,  `0..MemberCount` (does not include `MemberCount`).]}, {name: SuspendedMembers, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 663}}, default: [0], docs: [ The set of suspended members, with their old membership record.]}, {name: RoundCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The number of rounds which have passed.]}, {name: Bids, modifier: Default, ty: {Plain: 668}, default: [0], docs: [ The current bids, stored ordered by the value of the bid.]}, {name: Candidates, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 672}}, default: [0], docs: []}, {name: Skeptic, modifier: Optional, ty: {Plain: 0}, default: [0], docs: [ The current skeptic.]}, {name: Votes, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 674, value: 675}}, default: [0], docs: [ Double map from Candidate -> Voter -> (Maybe) Vote.]}, {name: VoteClearCursor, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 676}}, default: [0], docs: [ Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor.]}, {name: NextHead, modifier: Optional, ty: {Plain: 677}, default: [0], docs: [ At the end of the claim period, this contains the most recently approved members (along with,  their bid and round ID) who is from the most recent round with the lowest bid. They will,  become the new `Head`.]}, {name: ChallengeRoundCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The number of challenge rounds there have been. Used to identify stale DefenderVotes.]}, {name: Defending, modifier: Optional, ty: {Plain: 678}, default: [0], docs: [ The defending member currently being challenged, along with a running tally of votes.]}, {name: DefenderVotes, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 583, value: 675}}, default: [0], docs: [ Votes for the defender, keyed by challenge round.]}]}, calls: {ty: 183}, event: {ty: 483}, constants: [{name: PalletId, ty: 618, value: [112, 121, 47, 115, 111, 99, 105, 101], docs: [ The societies's pallet id]}, {name: GraceStrikes, ty: 4, value: [10, 0, 0, 0], docs: [ The maximum number of strikes before a member gets funds slashed.]}, {name: PeriodSpend, ty: 6, value: [4, 10, 191, 130, 40, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount of incentive paid within each period. Doesn't include VoterTip.]}, {name: VotingPeriod, ty: 4, value: [64, 25, 1, 0], docs: [ The number of blocks on which new candidates should be voted on. Together with,  `ClaimPeriod`, this sums to the number of blocks between candidate intake periods.]}, {name: ClaimPeriod, ty: 4, value: [128, 112, 0, 0], docs: [ The number of blocks on which new candidates can claim their membership and be the,  named head.]}, {name: MaxLockDuration, ty: 4, value: [0, 78, 237, 0], docs: [ The maximum duration of the payout lock.]}, {name: ChallengePeriod, ty: 4, value: [192, 137, 1, 0], docs: [ The number of blocks between membership challenges.]}, {name: MaxPayouts, ty: 4, value: [8, 0, 0, 0], docs: [ The maximum number of payouts a member may have waiting unclaimed.]}, {name: MaxBids, ty: 4, value: [0, 2, 0, 0], docs: [ The maximum number of bids at once.]}], error: {ty: 679}, index: 26, docs: []}, {name: Recovery, storage: {prefix: Recovery, entries: [{name: Recoverable, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 680}}, default: [0], docs: [ The set of recoverable accounts and their recovery configuration.]}, {name: ActiveRecoveries, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 674, value: 682}}, default: [0], docs: [ Active recovery attempts., ,  First account is the account to be recovered, and the second account,  is the user trying to recover the account.]}, {name: Proxy, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 0}}, default: [0], docs: [ The list of allowed proxy accounts., ,  Map from the user who can access it to the recovered account.]}]}, calls: {ty: 184}, event: {ty: 485}, constants: [{name: ConfigDepositBase, ty: 6, value: [4, 130, 27, 206, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The base amount of currency needed to reserve for creating a recovery configuration., ,  This is held for an additional storage item whose value size is,  `2 + sizeof(BlockNumber, Balance)` bytes.]}, {name: FriendDepositFactor, ty: 6, value: [154, 38, 105, 225, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount of currency needed per additional user when creating a recovery,  configuration., ,  This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage,  value.]}, {name: MaxFriends, ty: 4, value: [9, 0, 0, 0], docs: [ The maximum amount of friends allowed in a recovery configuration., ,  NOTE: The threshold programmed in this Pallet uses u16, so it does,  not really make sense to have a limit here greater than u16::MAX.,  But also, that is a lot more than you should probably set this value,  to anyway...]}, {name: RecoveryDeposit, ty: 6, value: [4, 130, 27, 206, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The base amount of currency needed to reserve for starting a recovery., ,  This is primarily held for deterring malicious recovery attempts, and should,  have a value large enough that a bad actor would choose not to place this,  deposit. It also acts to fund additional storage item whose value size is,  `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable,  threshold.]}], error: {ty: 683}, index: 27, docs: []}, {name: Vesting, storage: {prefix: Vesting, entries: [{name: Vesting, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 684}}, default: [0], docs: [ Information regarding the vesting of a given account.]}, {name: StorageVersion, modifier: Default, ty: {Plain: 686}, default: [0], docs: [ Storage version of the pallet., ,  New networks start with latest version, as determined by the genesis build.]}]}, calls: {ty: 185}, event: {ty: 486}, constants: [{name: MinVestedTransfer, ty: 6, value: [52, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum amount transferred to call `vested_transfer`.]}, {name: MaxVestingSchedules, ty: 4, value: [28, 0, 0, 0], docs: []}], error: {ty: 687}, index: 28, docs: []}, {name: Scheduler, storage: {prefix: Scheduler, entries: [{name: IncompleteSince, modifier: Optional, ty: {Plain: 4}, default: [0], docs: []}, {name: Agenda, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 688}}, default: [0], docs: [ Items to be executed, indexed by the block number that they should be executed on.]}, {name: Lookup, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 1, value: 189}}, default: [0], docs: [ Lookup from a name to the block number and index of the task., ,  For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4,  identities.]}]}, calls: {ty: 187}, event: {ty: 487}, constants: [{name: MaximumWeight, ty: 9, value: [11, 0, 128, 110, 135, 116, 1, 19, 204, 204, 204, 204, 204, 204, 204, 204], docs: [ The maximum weight that may be scheduled per block for any dispatchables.]}, {name: MaxScheduledPerBlock, ty: 4, value: [50, 0, 0, 0], docs: [ The maximum number of scheduled calls in the queue for a single block., ,  NOTE:,  + Dependent pallets' benchmarks might require a higher limit for the setting. Set a,  higher limit under `runtime-benchmarks` feature.]}], error: {ty: 692}, index: 29, docs: []}, {name: Proxy, storage: {prefix: Proxy, entries: [{name: Proxies, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 693}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The set of account proxies. Maps the account which has delegated to the accounts,  which are being delegated to, together with the amount held on deposit.]}, {name: Announcements, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 697}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The announcements made by the proxy (key).]}]}, calls: {ty: 190}, event: {ty: 489}, constants: [{name: ProxyDepositBase, ty: 6, value: [176, 9, 83, 72, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The base amount of currency needed to reserve for creating a proxy., ,  This is held for an additional storage item whose value size is,  `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.]}, {name: ProxyDepositFactor, ty: 6, value: [180, 166, 144, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount of currency needed per proxy added., ,  This is held for adding 32 bytes plus an instance of `ProxyType` more into a,  pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take,  into account `32 + proxy_type.encode().len()` bytes of data.]}, {name: MaxProxies, ty: 4, value: [32, 0, 0, 0], docs: [ The maximum amount of proxies allowed for a single account.]}, {name: MaxPending, ty: 4, value: [32, 0, 0, 0], docs: [ The maximum amount of time-delayed announcements that are allowed to be pending.]}, {name: AnnouncementDepositBase, ty: 6, value: [176, 9, 83, 72, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The base amount of currency needed to reserve for creating an announcement., ,  This is held when a new storage item holding a `Balance` is created (typically 16,  bytes).]}, {name: AnnouncementDepositFactor, ty: 6, value: [104, 77, 33, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount of currency needed per announcement made., ,  This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes),  into a pre-existing storage value.]}], error: {ty: 701}, index: 30, docs: []}, {name: Multisig, storage: {prefix: Multisig, entries: [{name: Multisigs, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 702, value: 703}}, default: [0], docs: [ The set of open multisig operations.]}]}, calls: {ty: 193}, event: {ty: 490}, constants: [{name: DepositBase, ty: 6, value: [240, 25, 69, 231, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The base amount of currency needed to reserve for creating a multisig execution or to,  store a dispatch call for later., ,  This is held for an additional storage item whose value size is,  `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is,  `32 + sizeof(AccountId)` bytes.]}, {name: DepositFactor, ty: 6, value: [128, 6, 148, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount of currency needed per unit threshold when creating a multisig execution., ,  This is held for adding 32 bytes more into a pre-existing storage value.]}, {name: MaxSignatories, ty: 4, value: [100, 0, 0, 0], docs: [ The maximum amount of signatories allowed in the multisig.]}], error: {ty: 705}, index: 31, docs: []}, {name: Preimage, storage: {prefix: Preimage, entries: [{name: StatusFor, modifier: Optional, ty: {Map: {hashers: [Identity], key: 12, value: 706}}, default: [0], docs: [ The request status of a given hash.]}, {name: RequestStatusFor, modifier: Optional, ty: {Map: {hashers: [Identity], key: 12, value: 708}}, default: [0], docs: [ The request status of a given hash.]}, {name: PreimageFor, modifier: Optional, ty: {Map: {hashers: [Identity], key: 601, value: 712}}, default: [0], docs: []}]}, calls: {ty: 196}, event: {ty: 491}, constants: [], error: {ty: 713}, index: 32, docs: []}, {name: Bounties, storage: {prefix: Bounties, entries: [{name: BountyCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Number of bounty proposals that have been made.]}, {name: Bounties, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 714}}, default: [0], docs: [ Bounties that have been made.]}, {name: BountyDescriptions, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 716}}, default: [0], docs: [ The description of each bounty.]}, {name: BountyApprovals, modifier: Default, ty: {Plain: 614}, default: [0], docs: [ Bounty indices that have been approved but not yet funded.]}]}, calls: {ty: 198}, event: {ty: 492}, constants: [{name: BountyDepositBase, ty: 6, value: [52, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount held on deposit for placing a bounty proposal.]}, {name: BountyDepositPayoutDelay, ty: 4, value: [0, 225, 0, 0], docs: [ The delay period for which a bounty beneficiary need to wait before claim the payout.]}, {name: BountyUpdatePeriod, ty: 4, value: [128, 198, 19, 0], docs: [ Bounty duration in blocks.]}, {name: CuratorDepositMultiplier, ty: 617, value: [32, 161, 7, 0], docs: [ The curator deposit is calculated as a percentage of the curator fee., ,  This deposit has optional upper and lower bounds with `CuratorDepositMax` and,  `CuratorDepositMin`.]}, {name: CuratorDepositMax, ty: 128, value: [1, 4, 130, 27, 206, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Maximum amount of funds that should be placed in a deposit for making a proposal.]}, {name: CuratorDepositMin, ty: 128, value: [1, 82, 161, 174, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Minimum amount of funds that should be placed in a deposit for making a proposal.]}, {name: BountyValueMinimum, ty: 6, value: [104, 154, 164, 133, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Minimum value for a bounty.]}, {name: DataDepositPerByte, ty: 6, value: [85, 67, 222, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The amount held on deposit per byte within the tip report reason or bounty description.]}, {name: MaximumReasonLength, ty: 4, value: [0, 64, 0, 0], docs: [ Maximum acceptable reason length., ,  Benchmarks depend on this value, be sure to update weights file when changing this value]}], error: {ty: 717}, index: 35, docs: []}, {name: ChildBounties, storage: {prefix: ChildBounties, entries: [{name: ChildBountyCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Number of total child bounties.]}, {name: ParentChildBounties, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 4}}, default: [0, 0, 0, 0], docs: [ Number of child bounties per parent bounty.,  Map of parent bounty index to number of child bounties.]}, {name: ChildBounties, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 189, value: 718}}, default: [0], docs: [ Child bounties that have been added.]}, {name: ChildBountyDescriptions, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 716}}, default: [0], docs: [ The description of each child-bounty.]}, {name: ChildrenCuratorFees, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 6}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The cumulative child-bounty curator fee for each parent bounty.]}]}, calls: {ty: 199}, event: {ty: 493}, constants: [{name: MaxActiveChildBountyCount, ty: 4, value: [100, 0, 0, 0], docs: [ Maximum number of child bounties that can be added to a parent bounty.]}, {name: ChildBountyValueMinimum, ty: 6, value: [164, 66, 93, 141, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Minimum value for a child-bounty.]}], error: {ty: 720}, index: 40, docs: []}, {name: ElectionProviderMultiPhase, storage: {prefix: ElectionProviderMultiPhase, entries: [{name: Round, modifier: Default, ty: {Plain: 4}, default: [1, 0, 0, 0], docs: [ Internal counter for the number of rounds., ,  This is useful for de-duplication of transactions submitted to the pool, and general,  diagnostics of the pallet., ,  This is merely incremented once per every time that an upstream `elect` is called.]}, {name: CurrentPhase, modifier: Default, ty: {Plain: 496}, default: [0], docs: [ Current phase.]}, {name: QueuedSolution, modifier: Optional, ty: {Plain: 721}, default: [0], docs: [ Current best solution, signed or unsigned, queued to be returned upon `elect`., ,  Always sorted by score.]}, {name: Snapshot, modifier: Optional, ty: {Plain: 723}, default: [0], docs: [ Snapshot data of the round., ,  This is created at the beginning of the signed phase and cleared upon calling `elect`.,  Note: This storage type must only be mutated through [`SnapshotWrapper`].]}, {name: DesiredTargets, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ Desired number of targets to elect for this round., ,  Only exists when [`Snapshot`] is present.,  Note: This storage type must only be mutated through [`SnapshotWrapper`].]}, {name: SnapshotMetadata, modifier: Optional, ty: {Plain: 278}, default: [0], docs: [ The metadata of the [`RoundSnapshot`], ,  Only exists when [`Snapshot`] is present.,  Note: This storage type must only be mutated through [`SnapshotWrapper`].]}, {name: SignedSubmissionNextIndex, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The next index to be assigned to an incoming signed submission., ,  Every accepted submission is assigned a unique index; that index is bound to that particular,  submission for the duration of the election. On election finalization, the next index is,  reset to 0., ,  We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its,  capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,,  because iteration is slow. Instead, we store the value here.]}, {name: SignedSubmissionIndices, modifier: Default, ty: {Plain: 726}, default: [0], docs: [ A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a,  value in `SignedSubmissions`., ,  We never need to process more than a single signed submission at a time. Signed submissions,  can be quite large, so we're willing to pay the cost of multiple database accesses to access,  them one at a time instead of reading and decoding all of them at once.]}, {name: SignedSubmissionsMap, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 729}}, default: [0], docs: [ Unchecked, signed solutions., ,  Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while,  allowing us to keep only a single one in memory at a time., ,  Twox note: the key of the map is an auto-incrementing index which users cannot inspect or,  affect; we shouldn't need a cryptographically secure hasher.]}, {name: MinimumUntrustedScore, modifier: Optional, ty: {Plain: 277}, default: [0], docs: [ The minimum score that each 'untrusted' solution must attain in order to be considered,  feasible., ,  Can be set via `set_minimum_untrusted_score`.]}]}, calls: {ty: 200}, event: {ty: 494}, constants: [{name: UnsignedPhase, ty: 4, value: [150, 0, 0, 0], docs: [ Duration of the unsigned phase.]}, {name: SignedPhase, ty: 4, value: [150, 0, 0, 0], docs: [ Duration of the signed phase.]}, {name: BetterSignedThreshold, ty: 37, value: [0, 0, 0, 0], docs: [ The minimum amount of improvement to the solution score that defines a solution as,  "better" in the Signed phase.]}, {name: OffchainRepeat, ty: 4, value: [18, 0, 0, 0], docs: [ The repeat threshold of the offchain worker., ,  For example, if it is 5, that means that at least 5 blocks will elapse between attempts,  to submit the worker's solution.]}, {name: MinerTxPriority, ty: 11, value: [101, 102, 102, 102, 102, 102, 102, 230], docs: [ The priority of the unsigned transaction submitted in the unsigned-phase]}, {name: SignedMaxSubmissions, ty: 4, value: [16, 0, 0, 0], docs: [ Maximum number of signed submissions that can be queued., ,  It is best to avoid adjusting this during an election, as it impacts downstream data,  structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you,  update this value during an election, you _must_ ensure that,  `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,,  attempts to submit new solutions may cause a runtime panic.]}, {name: SignedMaxWeight, ty: 9, value: [11, 136, 216, 102, 60, 85, 1, 19, 163, 112, 61, 10, 215, 163, 112, 189], docs: [ Maximum weight of a signed solution., ,  If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of,  this pallet), then [`MinerConfig::solution_weight`] is used to compare against,  this value.]}, {name: SignedMaxRefunds, ty: 4, value: [4, 0, 0, 0], docs: [ The maximum amount of unchecked solutions to refund the call fee for.]}, {name: SignedRewardBase, ty: 6, value: [0, 232, 118, 72, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Base reward for a signed solution]}, {name: SignedDepositByte, ty: 6, value: [144, 247, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Per-byte deposit for a signed solution.]}, {name: SignedDepositWeight, ty: 6, value: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Per-weight deposit for a signed solution.]}, {name: MaxWinners, ty: 4, value: [208, 7, 0, 0], docs: [ The maximum number of winners that can be elected by this `ElectionProvider`,  implementation., ,  Note: This must always be greater or equal to `T::DataProvider::desired_targets()`.]}, {name: MinerMaxLength, ty: 4, value: [0, 0, 54, 0], docs: []}, {name: MinerMaxWeight, ty: 9, value: [11, 136, 216, 102, 60, 85, 1, 19, 163, 112, 61, 10, 215, 163, 112, 189], docs: []}, {name: MinerMaxVotesPerVoter, ty: 4, value: [24, 0, 0, 0], docs: []}, {name: MinerMaxWinners, ty: 4, value: [208, 7, 0, 0], docs: []}], error: {ty: 730}, index: 37, docs: []}, {name: Nis, storage: {prefix: Nis, entries: [{name: QueueTotals, modifier: Default, ty: {Plain: 731}, default: [209, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The totals of items and balances within each queue. Saves a lot of storage reads in the,  case of sparsely packed queues., ,  The vector is indexed by duration in `Period`s, offset by one, so information on the queue,  whose duration is one `Period` would be storage `0`.]}, {name: Queues, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 732}}, default: [0], docs: [ The queues of bids. Indexed by duration (in `Period`s).]}, {name: Summary, modifier: Default, ty: {Plain: 735}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Summary information over the general state.]}, {name: Receipts, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 4, value: 736}}, default: [0], docs: [ The currently outstanding receipts, indexed according to the order of creation.]}]}, calls: {ty: 285}, event: {ty: 498}, constants: [{name: PalletId, ty: 618, value: [112, 121, 47, 110, 105, 115, 32, 32], docs: [ The treasury's pallet id, used for deriving its sovereign account ID.]}, {name: QueueCount, ty: 4, value: [244, 1, 0, 0], docs: [ Number of duration queues in total. This sets the maximum duration supported, which is,  this value multiplied by `Period`.]}, {name: MaxQueueLen, ty: 4, value: [232, 3, 0, 0], docs: [ Maximum number of items that may be in each duration queue., ,  Must be larger than zero.]}, {name: FifoQueueLen, ty: 4, value: [250, 0, 0, 0], docs: [ Portion of the queue which is free from ordering and just a FIFO., ,  Must be no greater than `MaxQueueLen`.]}, {name: BasePeriod, ty: 4, value: [192, 137, 1, 0], docs: [ The base period for the duration queues. This is the common multiple across all,  supported freezing durations that can be bid upon.]}, {name: MinBid, ty: 6, value: [52, 53, 38, 26, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum amount of funds that may be placed in a bid. Note that this,  does not actually limit the amount which may be represented in a receipt since bids may,  be split up by the system., ,  It should be at least big enough to ensure that there is no possible storage spam attack,  or queue-filling attack.]}, {name: MinReceipt, ty: 287, value: [0, 232, 118, 72, 23, 0, 0, 0], docs: [ The minimum amount of funds which may intentionally be left remaining under a single,  receipt.]}, {name: IntakePeriod, ty: 4, value: [50, 0, 0, 0], docs: [ The number of blocks between consecutive attempts to dequeue bids and create receipts., ,  A larger value results in fewer storage hits each block, but a slower period to get to,  the target.]}, {name: MaxIntakeWeight, ty: 9, value: [7, 0, 208, 237, 144, 46, 19, 153, 153, 153, 153, 153, 153, 153, 25], docs: [ The maximum amount of bids that can consolidated into receipts in a single intake. A,  larger value here means less of the block available for transactions should there be a,  glut of bids.]}, {name: ThawThrottle, ty: 737, value: [0, 0, 217, 233, 172, 45, 120, 3, 5, 0, 0, 0], docs: [ The maximum proportion which may be thawed and the period over which it is reset.]}], error: {ty: 738}, index: 38, docs: []}, {name: NisCounterpartBalances, storage: {prefix: NisCounterpartBalances, entries: [{name: TotalIssuance, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The total units issued in the system.]}, {name: InactiveIssuance, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The total units of outstanding deactivated balance in the system.]}, {name: Account, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 5}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [ The Balances pallet example of storing the balance of an account., ,  # Example, ,  ```nocompile,   impl pallet_balances::Config for Runtime {,     type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>,   },  ```, ,  You can also store the balance of an account in the `System` pallet., ,  # Example, ,  ```nocompile,   impl pallet_balances::Config for Runtime {,    type AccountStore = System,   },  ```, ,  But this comes with tradeoffs, storing account balances in the system pallet stores,  `frame_system` data alongside the account data contrary to storing account balances in the,  `Balances` pallet, which uses a `StorageMap` to store balances data only.,  NOTE: This is only used in the case that this pallet is used to store balances.]}, {name: Locks, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 739}}, default: [0], docs: [ Any liquidity locks on some account balances.,  NOTE: Should only be accessed when setting, changing and freeing a lock.]}, {name: Reserves, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 740}}, default: [0], docs: [ Named reserves on some account balances.]}, {name: Holds, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 564}}, default: [0], docs: [ Holds on account balances.]}, {name: Freezes, modifier: Default, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 741}}, default: [0], docs: [ Freeze locks on account balances.]}]}, calls: {ty: 288}, event: {ty: 499}, constants: [{name: ExistentialDeposit, ty: 6, value: [0, 228, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!, ,  If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for,  this pallet. However, you do so at your own risk: this will open up a major DoS vector.,  In case you have multiple sources of provider references, you may also get unexpected,  behaviour if you set this to zero., ,  Bottom line: Do yourself a favour and make it at least one!]}, {name: MaxLocks, ty: 4, value: [4, 0, 0, 0], docs: [ The maximum number of locks that should exist on an account.,  Not strictly enforced, but used for weight estimation.]}, {name: MaxReserves, ty: 4, value: [4, 0, 0, 0], docs: [ The maximum number of named reserves that can exist on an account.]}, {name: MaxFreezes, ty: 4, value: [1, 0, 0, 0], docs: [ The maximum number of individual freeze locks that can exist on an account at any time.]}], error: {ty: 744}, index: 45, docs: []}, {name: VoterList, storage: {prefix: VoterList, entries: [{name: ListNodes, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 745}}, default: [0], docs: [ A single node, within some bag., ,  Nodes store links forward and back within their respective bags.]}, {name: CounterForListNodes, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: ListBags, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 11, value: 746}}, default: [0], docs: [ A bag stored in storage., ,  Stores a `Bag` struct, which stores head and tail pointers to itself.]}]}, calls: {ty: 289}, event: {ty: 500}, constants: [{name: BagThresholds, ty: 747, value: [33, 3, 85, 160, 252, 1, 0, 0, 0, 0, 218, 166, 70, 2, 0, 0, 0, 0, 110, 115, 155, 2, 0, 0, 0, 0, 121, 151, 252, 2, 0, 0, 0, 0, 208, 222, 107, 3, 0, 0, 0, 0, 51, 88, 235, 3, 0, 0, 0, 0, 13, 95, 125, 4, 0, 0, 0, 0, 154, 166, 36, 5, 0, 0, 0, 0, 177, 70, 228, 5, 0, 0, 0, 0, 103, 202, 191, 6, 0, 0, 0, 0, 214, 64, 187, 7, 0, 0, 0, 0, 83, 80, 219, 8, 0, 0, 0, 0, 113, 76, 37, 10, 0, 0, 0, 0, 54, 79, 159, 11, 0, 0, 0, 0, 0, 86, 80, 13, 0, 0, 0, 0, 152, 98, 64, 15, 0, 0, 0, 0, 27, 161, 120, 17, 0, 0, 0, 0, 101, 147, 3, 20, 0, 0, 0, 0, 205, 66, 237, 22, 0, 0, 0, 0, 32, 121, 67, 26, 0, 0, 0, 0, 228, 1, 22, 30, 0, 0, 0, 0, 30, 245, 118, 34, 0, 0, 0, 0, 249, 12, 123, 39, 0, 0, 0, 0, 224, 7, 58, 45, 0, 0, 0, 0, 232, 24, 207, 51, 0, 0, 0, 0, 140, 104, 89, 59, 0, 0, 0, 0, 46, 168, 252, 67, 0, 0, 0, 0, 10, 187, 225, 77, 0, 0, 0, 0, 195, 119, 55, 89, 0, 0, 0, 0, 25, 134, 51, 102, 0, 0, 0, 0, 232, 92, 19, 117, 0, 0, 0, 0, 24, 101, 29, 134, 0, 0, 0, 0, 232, 70, 162, 153, 0, 0, 0, 0, 190, 103, 254, 175, 0, 0, 0, 0, 132, 159, 155, 201, 0, 0, 0, 0, 173, 45, 243, 230, 0, 0, 0, 0, 40, 247, 143, 8, 1, 0, 0, 0, 216, 23, 17, 47, 1, 0, 0, 0, 190, 211, 44, 91, 1, 0, 0, 0, 194, 245, 179, 141, 1, 0, 0, 0, 10, 172, 149, 199, 1, 0, 0, 0, 43, 244, 227, 9, 2, 0, 0, 0, 34, 172, 216, 85, 2, 0, 0, 0, 16, 96, 219, 172, 2, 0, 0, 0, 46, 240, 135, 16, 3, 0, 0, 0, 124, 46, 182, 130, 3, 0, 0, 0, 43, 152, 130, 5, 4, 0, 0, 0, 23, 84, 88, 155, 4, 0, 0, 0, 157, 165, 252, 70, 5, 0, 0, 0, 255, 9, 156, 11, 6, 0, 0, 0, 108, 62, 217, 236, 6, 0, 0, 0, 196, 117, 222, 238, 7, 0, 0, 0, 150, 15, 113, 22, 9, 0, 0, 0, 170, 45, 8, 105, 10, 0, 0, 0, 248, 146, 230, 236, 11, 0, 0, 0, 140, 70, 56, 169, 13, 0, 0, 0, 151, 134, 52, 166, 15, 0, 0, 0, 109, 172, 68, 237, 17, 0, 0, 0, 120, 185, 48, 137, 20, 0, 0, 0, 22, 96, 82, 134, 23, 0, 0, 0, 228, 121, 207, 242, 26, 0, 0, 0, 64, 0, 221, 222, 30, 0, 0, 0, 255, 195, 11, 93, 35, 0, 0, 0, 130, 79, 160, 130, 40, 0, 0, 0, 39, 147, 247, 103, 46, 0, 0, 0, 166, 56, 250, 40, 53, 0, 0, 0, 72, 191, 160, 229, 60, 0, 0, 0, 71, 210, 138, 194, 69, 0, 0, 0, 197, 165, 172, 233, 79, 0, 0, 0, 246, 142, 21, 139, 91, 0, 0, 0, 144, 131, 211, 221, 104, 0, 0, 0, 102, 181, 247, 32, 120, 0, 0, 0, 207, 27, 193, 156, 137, 0, 0, 0, 252, 111, 242, 163, 157, 0, 0, 0, 30, 239, 89, 149, 180, 0, 0, 0, 192, 32, 146, 221, 206, 0, 0, 0, 178, 237, 3, 249, 236, 0, 0, 0, 7, 137, 51, 118, 15, 1, 0, 0, 211, 14, 99, 248, 54, 1, 0, 0, 18, 82, 151, 58, 100, 1, 0, 0, 225, 35, 13, 19, 152, 1, 0, 0, 160, 114, 47, 119, 211, 1, 0, 0, 120, 1, 33, 128, 23, 2, 0, 0, 101, 51, 239, 111, 101, 2, 0, 0, 66, 133, 134, 183, 190, 2, 0, 0, 40, 231, 132, 253, 36, 3, 0, 0, 177, 63, 10, 38, 154, 3, 0, 0, 208, 22, 172, 91, 32, 4, 0, 0, 34, 200, 182, 25, 186, 4, 0, 0, 121, 199, 236, 55, 106, 5, 0, 0, 224, 146, 251, 247, 51, 6, 0, 0, 61, 5, 230, 20, 27, 7, 0, 0, 247, 1, 173, 212, 35, 8, 0, 0, 216, 16, 138, 28, 83, 9, 0, 0, 200, 171, 27, 136, 174, 10, 0, 0, 178, 239, 240, 131, 60, 12, 0, 0, 232, 88, 242, 107, 4, 14, 0, 0, 15, 125, 55, 174, 14, 16, 0, 0, 213, 167, 238, 242, 100, 18, 0, 0, 88, 63, 19, 74, 18, 21, 0, 0, 23, 83, 203, 95, 35, 24, 0, 0, 92, 54, 100, 184, 166, 27, 0, 0, 166, 26, 10, 245, 172, 31, 0, 0, 51, 242, 127, 34, 73, 36, 0, 0, 75, 58, 76, 19, 145, 41, 0, 0, 40, 136, 5, 199, 157, 47, 0, 0, 55, 211, 167, 224, 139, 54, 0, 0, 255, 161, 34, 46, 124, 62, 0, 0, 240, 196, 161, 67, 148, 71, 0, 0, 229, 173, 111, 45, 255, 81, 0, 0, 7, 110, 187, 59, 238, 93, 0, 0, 171, 240, 6, 236, 153, 107, 0, 0, 140, 108, 142, 244, 66, 123, 0, 0, 58, 214, 154, 118, 51, 141, 0, 0, 186, 87, 105, 93, 192, 161, 0, 0, 93, 218, 36, 240, 74, 185, 0, 0, 182, 111, 96, 158, 66, 212, 0, 0, 118, 85, 150, 15, 39, 243, 0, 0, 37, 141, 108, 127, 138, 22, 1, 0, 81, 105, 235, 113, 20, 63, 1, 0, 185, 190, 114, 204, 132, 109, 1, 0, 60, 75, 23, 98, 183, 162, 1, 0, 204, 47, 52, 4, 168, 223, 1, 0, 247, 39, 110, 42, 119, 37, 2, 0, 72, 11, 51, 72, 111, 117, 2, 0, 29, 92, 245, 232, 10, 209, 2, 0, 15, 100, 16, 176, 251, 57, 3, 0, 169, 4, 119, 93, 50, 178, 3, 0, 45, 225, 33, 253, 231, 59, 4, 0, 48, 175, 183, 108, 168, 217, 4, 0, 251, 117, 62, 105, 94, 142, 5, 0, 60, 68, 228, 93, 97, 93, 6, 0, 44, 185, 59, 53, 133, 74, 7, 0, 168, 248, 203, 119, 44, 90, 8, 0, 122, 72, 185, 13, 93, 145, 9, 0, 61, 61, 199, 5, 216, 245, 10, 0, 13, 30, 66, 210, 52, 142, 12, 0, 28, 176, 190, 124, 0, 98, 14, 0, 36, 121, 99, 100, 225, 121, 16, 0, 27, 141, 237, 47, 192, 223, 18, 0, 211, 233, 66, 181, 246, 158, 21, 0, 232, 202, 153, 180, 133, 196, 24, 0, 208, 200, 140, 101, 82, 95, 28, 0, 194, 245, 119, 249, 108, 128, 32, 0, 10, 188, 226, 96, 97, 59, 37, 0, 116, 189, 77, 210, 147, 166, 42, 0, 236, 75, 97, 200, 170, 219, 48, 0, 72, 176, 55, 109, 8, 248, 55, 0, 192, 19, 132, 177, 85, 29, 64, 0, 220, 43, 253, 161, 33, 114, 73, 0, 112, 182, 69, 237, 151, 34, 84, 0, 108, 252, 81, 250, 81, 97, 96, 0, 108, 147, 8, 109, 70, 104, 110, 0, 156, 170, 232, 134, 219, 121, 126, 0, 192, 54, 131, 118, 33, 226, 144, 0, 160, 100, 155, 101, 58, 248, 165, 0, 40, 163, 76, 238, 246, 31, 190, 0, 56, 90, 162, 151, 174, 203, 217, 0, 72, 51, 53, 22, 93, 126, 249, 0, 208, 202, 228, 82, 14, 206, 29, 1, 0, 144, 167, 174, 164, 102, 71, 1, 224, 157, 146, 165, 6, 13, 119, 1, 48, 119, 142, 220, 194, 162, 173, 1, 208, 11, 184, 213, 59, 42, 236, 1, 64, 177, 140, 9, 111, 203, 51, 2, 128, 81, 147, 2, 110, 217, 133, 2, 160, 246, 214, 99, 163, 216, 227, 2, 96, 187, 203, 135, 1, 134, 79, 3, 160, 69, 248, 182, 60, 223, 202, 3, 64, 129, 109, 232, 55, 44, 88, 4, 64, 94, 32, 169, 208, 9, 250, 4, 128, 141, 114, 69, 61, 118, 179, 5, 128, 243, 91, 192, 55, 223, 135, 6, 128, 78, 236, 168, 56, 50, 123, 7, 0, 177, 152, 161, 14, 239, 145, 8, 128, 11, 47, 155, 42, 61, 209, 9, 128, 162, 72, 148, 5, 4, 63, 11, 0, 114, 76, 90, 19, 7, 226, 12, 0, 216, 248, 151, 198, 5, 194, 14, 0, 152, 144, 190, 61, 224, 231, 16, 0, 67, 79, 101, 70, 193, 93, 19, 0, 214, 28, 255, 125, 78, 47, 22, 0, 155, 50, 184, 115, 223, 105, 25, 0, 0, 135, 117, 208, 188, 28, 29, 0, 218, 86, 235, 175, 104, 89, 33, 0, 218, 203, 66, 129, 241, 51, 38, 0, 60, 136, 158, 247, 80, 195, 43, 0, 10, 183, 230, 203, 216, 33, 50, 0, 52, 109, 173, 82, 175, 109, 57, 0, 80, 71, 233, 51, 94, 201, 65, 0, 36, 238, 24, 232, 117, 92, 75, 0, 56, 212, 180, 0, 73, 84, 86, 0, 8, 125, 118, 178, 194, 228, 98, 0, 152, 28, 3, 153, 92, 73, 113, 0, 136, 30, 85, 63, 56, 198, 129, 0, 176, 203, 144, 161, 97, 169, 148, 0, 40, 79, 229, 158, 64, 76, 170, 0, 192, 229, 74, 48, 64, 21, 195, 0, 96, 205, 116, 55, 179, 121, 223, 255, 255, 255, 255, 255, 255, 255, 255], docs: [ The list of thresholds separating the various bags., ,  Ids are separated into unsorted bags according to their score. This specifies the,  thresholds separating the bags. An id's bag is the largest bag for which the id's score,  is less than or equal to its upper threshold., ,  When ids are iterated, higher bags are iterated completely before lower bags. This means,  that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower,  score, but peer ids within a particular bag are sorted in insertion order., ,  # Expressing the constant, ,  This constant must be sorted in strictly increasing order. Duplicate items are not,  permitted., ,  There is an implied upper limit of `Score::MAX`; that value does not need to be,  specified within the bag. For any two threshold lists, if one ends with,  `Score::MAX`, the other one does not, and they are otherwise equal, the two,  lists will behave identically., ,  # Calculation, ,  It is recommended to generate the set of thresholds in a geometric series, such that,  there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *,  constant_ratio).max(threshold[k] + 1)` for all `k`., ,  The helpers in the `/utils/frame/generate-bags` module can simplify this calculation., ,  # Examples, ,  - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and,    iteration is strictly in insertion order.,  - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to,    the procedure given above, then the constant ratio is equal to 2.,  - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to,    the procedure given above, then the constant ratio is approximately equal to 1.248.,  - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall,    into bag 0, an id with score 2 will fall into bag 1, etc., ,  # Migration, ,  In the event that this list ever changes, a copy of the old bags list must be retained.,  With that `List::migrate` can be called, which will perform the appropriate migration.]}], error: {ty: 748}, index: 39, docs: []}, {name: NominationPools, storage: {prefix: NominationPools, entries: [{name: TotalValueLocked, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The sum of funds across all pools., ,  This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`],  because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's,  `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s.]}, {name: MinJoinBond, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Minimum amount to bond to join a pool.]}, {name: MinCreateBond, modifier: Default, ty: {Plain: 6}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Minimum bond required to create a pool., ,  This is the amount that the depositor must put as their initial stake in the pool, as an,  indication of "skin in the game"., ,  This is the value that will always exist in the staking ledger of the pool bonded account,  while all other accounts leave.]}, {name: MaxPools, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ Maximum number of nomination pools that can exist. If `None`, then an unbounded number of,  pools can exist.]}, {name: MaxPoolMembers, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ Maximum number of members that can exist in the system. If `None`, then the count,  members are not bound on a system wide basis.]}, {name: MaxPoolMembersPerPool, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ Maximum number of members that may belong to pool. If `None`, then the count of,  members is not bound on a per pool basis.]}, {name: GlobalMaxCommission, modifier: Optional, ty: {Plain: 37}, default: [0], docs: [ The maximum commission that can be charged by a pool. Used on commission payouts to bound,  pool commissions that are > `GlobalMaxCommission`, necessary if a future,  `GlobalMaxCommission` is lower than some current pool commissions.]}, {name: PoolMembers, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 750}}, default: [0], docs: [ Active members., ,  TWOX-NOTE: SAFE since `AccountId` is a secure hash.]}, {name: CounterForPoolMembers, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: BondedPools, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 753}}, default: [0], docs: [ Storage for bonded pools.]}, {name: CounterForBondedPools, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: RewardPools, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 758}}, default: [0], docs: [ Reward pools. This is where there rewards for each pool accumulate. When a members payout is,  claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account.]}, {name: CounterForRewardPools, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: SubPoolsStorage, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 759}}, default: [0], docs: [ Groups of unbonding pools. Each group of unbonding pools belongs to a,  bonded pool, hence the name sub-pools. Keyed by the bonded pools account.]}, {name: CounterForSubPoolsStorage, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: Metadata, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 765}}, default: [0], docs: [ Metadata for the pool.]}, {name: CounterForMetadata, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: LastPoolId, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Ever increasing number of all pools created so far.]}, {name: ReversePoolIdLookup, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 4}}, default: [0], docs: [ A reverse lookup from the pool's account id to its id., ,  This is only used for slashing. In all other instances, the pool id is used, and the,  accounts are deterministically derived from it.]}, {name: CounterForReversePoolIdLookup, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: ClaimPermissions, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 297}}, default: [0], docs: [ Map from a pool member account to their opted claim permission.]}]}, calls: {ty: 290}, event: {ty: 501}, constants: [{name: PalletId, ty: 618, value: [112, 121, 47, 110, 111, 112, 108, 115], docs: [ The nomination pool's pallet id.]}, {name: MaxPointsToBalance, ty: 2, value: [10], docs: [ The maximum pool points-to-balance ratio that an `open` pool can have., ,  This is important in the event slashing takes place and the pool's points-to-balance,  ratio becomes disproportional., ,  Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations,  are a function of number of points, and by setting this value to e.g. 10, you ensure,  that the total number of points in the system are at most 10 times the total_issuance of,  the chain, in the absolute worse case., ,  For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.,  Such a scenario would also be the equivalent of the pool being 90% slashed.]}, {name: MaxUnbonding, ty: 4, value: [32, 0, 0, 0], docs: [ The maximum number of simultaneous unbonding chunks that can exist per member.]}], error: {ty: 766}, index: 41, docs: []}, {name: FastUnstake, storage: {prefix: FastUnstake, entries: [{name: Head, modifier: Optional, ty: {Plain: 768}, default: [0], docs: [ The current "head of the queue" being unstaked., ,  The head in itself can be a batch of up to [`Config::BatchSize`] stakers.]}, {name: Queue, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 0, value: 6}}, default: [0], docs: [ The map of all accounts wishing to be unstaked., ,  Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.]}, {name: CounterForQueue, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [Counter for the related counted storage map]}, {name: ErasToCheckPerBlock, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Number of eras to check per block., ,  If set to 0, this pallet does absolutely nothing. Cannot be set to more than,  [`Config::MaxErasToCheckPerBlock`]., ,  Based on the amount of weight available at [`Pallet::on_idle`], up to this many eras are,  checked. The checking is represented by updating [`UnstakeRequest::checked`], which is,  stored in [`Head`].]}]}, calls: {ty: 303}, event: {ty: 502}, constants: [{name: Deposit, ty: 6, value: [52, 77, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Deposit to take for unstaking, to make sure we're able to slash the it in order to cover,  the costs of resources on unsuccessful unstake.]}], error: {ty: 771}, index: 42, docs: []}, {name: ParachainsOrigin, storage: null, calls: null, event: null, constants: [], error: null, index: 50, docs: [ There is no way to register an origin type in `construct_runtime` without a pallet the origin,  belongs to., ,  This module fulfills only the single purpose of housing the `Origin` in `construct_runtime`.]}, {name: Configuration, storage: {prefix: Configuration, entries: [{name: ActiveConfig, modifier: Default, ty: {Plain: 772}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 39, 0, 0, 128, 178, 230, 14, 128, 195, 201, 1, 128, 150, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0], docs: [ The active configuration for the current session.]}, {name: PendingConfigs, modifier: Default, ty: {Plain: 773}, default: [0], docs: [ Pending configuration changes., ,  This is a list of configuration changes, each with a session index at which it should,  be applied., ,  The list is sorted ascending by session index. Also, this list can only contain at most,  2 items: for the next session and for the `scheduled_session`.]}, {name: BypassConsistencyCheck, modifier: Default, ty: {Plain: 30}, default: [0], docs: [ If this is set, then the configuration setters will bypass the consistency checks. This,  is meant to be used only as the last resort.]}]}, calls: {ty: 304}, event: null, constants: [], error: {ty: 775}, index: 51, docs: []}, {name: ParasShared, storage: {prefix: ParasShared, entries: [{name: CurrentSessionIndex, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The current session index.]}, {name: ActiveValidatorIndices, modifier: Default, ty: {Plain: 776}, default: [0], docs: [ All the validators actively participating in parachain consensus.,  Indices are into the broader validator set.]}, {name: ActiveValidatorKeys, modifier: Default, ty: {Plain: 777}, default: [0], docs: [ The parachain attestation keys of the validators actively participating in parachain,  consensus. This should be the same length as `ActiveValidatorIndices`.]}, {name: AllowedRelayParents, modifier: Default, ty: {Plain: 778}, default: [0, 0, 0, 0, 0], docs: [ All allowed relay-parents.]}]}, calls: {ty: 312}, event: null, constants: [], error: null, index: 52, docs: []}, {name: ParaInclusion, storage: {prefix: ParaInclusion, entries: [{name: AvailabilityBitfields, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 321, value: 781}}, default: [0], docs: [ The latest bitfield for each validator, referred to by their index in the validator set.]}, {name: PendingAvailability, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 782}}, default: [0], docs: [ Candidates pending availability by `ParaId`.]}, {name: PendingAvailabilityCommitments, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 331}}, default: [0], docs: [ The commitments of candidates pending availability, by `ParaId`.]}]}, calls: {ty: 313}, event: {ty: 503}, constants: [], error: {ty: 783}, index: 53, docs: []}, {name: ParaInherent, storage: {prefix: ParaInherent, entries: [{name: Included, modifier: Optional, ty: {Plain: 113}, default: [0], docs: [ Whether the paras inherent was included within this block., ,  The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant,  due to the guarantees of FRAME's storage APIs., ,  If this is `None` at the end of the block, we panic and render the block invalid.]}, {name: OnChainVotes, modifier: Optional, ty: {Plain: 784}, default: [0], docs: [ Scraped on chain data for extracting resolved disputes as well as backing votes.]}]}, calls: {ty: 314}, event: null, constants: [], error: {ty: 789}, index: 54, docs: []}, {name: ParaScheduler, storage: {prefix: ParaScheduler, entries: [{name: ValidatorGroups, modifier: Default, ty: {Plain: 790}, default: [0], docs: [ All the validator groups. One for each core. Indices are into `ActiveValidators` - not the,  broader set of Polkadot validators, but instead just the subset used for parachains during,  this session., ,  Bound: The number of cores is the sum of the numbers of parachains and parathread,  multiplexers. Reasonably, 100-1000. The dominant factor is the number of validators: safe,  upper bound at 10k.]}, {name: AvailabilityCores, modifier: Default, ty: {Plain: 791}, default: [0], docs: [ One entry for each availability core. Entries are `None` if the core is not currently,  occupied. Can be temporarily `Some` if scheduled but not occupied.,  The i'th parachain belongs to the i'th core, with the remaining cores all being,  parathread-multiplexers., ,  Bounded by the maximum of either of these two values:,    * The number of parachains and parathread multiplexers,    * The number of validators divided by `configuration.max_validators_per_core`.]}, {name: SessionStartBlock, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The block number where the session start occurred. Used to track how many group rotations,  have occurred., ,  Note that in the context of parachains modules the session change is signaled during,  the block and enacted at the end of the block (at the finalization stage, to be exact).,  Thus for all intents and purposes the effect of the session change is observed at the,  block following the session change, block number of which we save in this storage value.]}, {name: ClaimQueue, modifier: Default, ty: {Plain: 795}, default: [0], docs: [ One entry for each availability core. The `VecDeque` represents the assignments to be,  scheduled on that core. `None` is used to signal to not schedule the next para of the core,  as there is one currently being scheduled. Not using `None` here would overwrite the,  `CoreState` in the runtime API. The value contained here will not be valid after the end of,  a block. Runtime APIs should be used to determine scheduled cores/ for the upcoming block.]}]}, calls: null, event: null, constants: [], error: null, index: 55, docs: []}, {name: Paras, storage: {prefix: Paras, entries: [{name: PvfActiveVoteMap, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 330, value: 799}}, default: [0], docs: [ All currently active PVF pre-checking votes., ,  Invariant:,  - There are no PVF pre-checking votes that exists in list but not in the set and vice versa.]}, {name: PvfActiveVoteList, modifier: Default, ty: {Plain: 803}, default: [0], docs: [ The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`.]}, {name: Parachains, modifier: Default, ty: {Plain: 804}, default: [0], docs: [ All lease holding parachains. Ordered ascending by `ParaId`. On demand parachains are not,  included., ,  Consider using the [`ParachainsCache`] type of modifying.]}, {name: ParaLifecycles, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 805}}, default: [0], docs: [ The current lifecycle of a all known Para IDs.]}, {name: Heads, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 338}}, default: [0], docs: [ The head-data of every registered para.]}, {name: MostRecentContext, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 4}}, default: [0], docs: [ The context (relay-chain block number) of the most recent parachain head.]}, {name: CurrentCodeHash, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 330}}, default: [0], docs: [ The validation code hash of every live para., ,  Corresponding code can be retrieved with [`CodeByHash`].]}, {name: PastCodeHash, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 806, value: 330}}, default: [0], docs: [ Actual past code hash, indicated by the para id as well as the block number at which it,  became outdated., ,  Corresponding code can be retrieved with [`CodeByHash`].]}, {name: PastCodeMeta, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 807}}, default: [0, 0], docs: [ Past code of parachains. The parachains themselves may not be registered anymore,,  but we also keep their code on-chain for the same amount of time as outdated code,  to keep it available for approval checkers.]}, {name: PastCodePruning, modifier: Default, ty: {Plain: 810}, default: [0], docs: [ Which paras have past code that needs pruning and the relay-chain block at which the code,  was replaced. Note that this is the actual height of the included block, not the expected,  height at which the code upgrade would be applied, although they may be equal.,  This is to ensure the entire acceptance period is covered, not an offset acceptance period,  starting from the time at which the parachain perceives a code upgrade as having occurred.,  Multiple entries for a single para are permitted. Ordered ascending by block number.]}, {name: FutureCodeUpgrades, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 4}}, default: [0], docs: [ The block number at which the planned code change is expected for a para.,  The change will be applied after the first parablock for this ID included which executes,  in the context of a relay chain block with a number >= `expected_at`.]}, {name: FutureCodeHash, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 330}}, default: [0], docs: [ The actual future code hash of a para., ,  Corresponding code can be retrieved with [`CodeByHash`].]}, {name: UpgradeGoAheadSignal, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 811}}, default: [0], docs: [ This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade,  procedure., ,  This value is absent when there are no upgrades scheduled or during the time the relay chain,  performs the checks. It is set at the first relay-chain block when the corresponding,  parachain can switch its upgrade function. As soon as the parachain's block is included, the,  value gets reset to `None`., ,  NOTE that this field is used by parachains via merkle storage proofs, therefore changing,  the format will require migration of parachains.]}, {name: UpgradeRestrictionSignal, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 812}}, default: [0], docs: [ This is used by the relay-chain to communicate that there are restrictions for performing,  an upgrade for this parachain., ,  This may be a because the parachain waits for the upgrade cooldown to expire. Another,  potential use case is when we want to perform some maintenance (such as storage migration),  we could restrict upgrades to make the process simpler., ,  NOTE that this field is used by parachains via merkle storage proofs, therefore changing,  the format will require migration of parachains.]}, {name: UpgradeCooldowns, modifier: Default, ty: {Plain: 810}, default: [0], docs: [ The list of parachains that are awaiting for their upgrade restriction to cooldown., ,  Ordered ascending by block number.]}, {name: UpcomingUpgrades, modifier: Default, ty: {Plain: 810}, default: [0], docs: [ The list of upcoming code upgrades. Each item is a pair of which para performs a code,  upgrade and at which relay-chain block it is expected at., ,  Ordered ascending by block number.]}, {name: ActionsQueue, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 804}}, default: [0], docs: [ The actions to perform during the start of a specific session index.]}, {name: UpcomingParasGenesis, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 813}}, default: [0], docs: [ Upcoming paras instantiation arguments., ,  NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set,  to empty. Instead, the code will be saved into the storage right away via `CodeByHash`.]}, {name: CodeByHashRefs, modifier: Default, ty: {Map: {hashers: [Identity], key: 330, value: 4}}, default: [0, 0, 0, 0], docs: [ The number of reference on the validation code in [`CodeByHash`] storage.]}, {name: CodeByHash, modifier: Optional, ty: {Map: {hashers: [Identity], key: 330, value: 337}}, default: [0], docs: [ Validation code stored by its hash., ,  This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and,  [`PastCodeHash`].]}]}, calls: {ty: 350}, event: {ty: 507}, constants: [{name: UnsignedPriority, ty: 11, value: [255, 255, 255, 255, 255, 255, 255, 255], docs: []}], error: {ty: 814}, index: 56, docs: []}, {name: Initializer, storage: {prefix: Initializer, entries: [{name: HasInitialized, modifier: Optional, ty: {Plain: 113}, default: [0], docs: [ Whether the parachains modules have been initialized within this block., ,  Semantically a `bool`, but this guarantees it should never hit the trie,,  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values., ,  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one,  of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable,  for the semantics of this variable.]}, {name: BufferedSessionChanges, modifier: Default, ty: {Plain: 815}, default: [0], docs: [ Buffered session changes along with the block number at which they should be applied., ,  Typically this will be empty or one element long. Apart from that this item never hits,  the storage., ,  However this is a `Vec` regardless to handle various edge cases that may occur at runtime,  upgrade boundaries or if governance intervenes.]}]}, calls: {ty: 352}, event: null, constants: [], error: null, index: 57, docs: []}, {name: Dmp, storage: {prefix: Dmp, entries: [{name: DownwardMessageQueues, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 817}}, default: [0], docs: [ The downward messages addressed for a certain para.]}, {name: DownwardMessageQueueHeads, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 12}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ A mapping that stores the downward message queue MQC head for each para., ,  Each link in this chain has a form:,  `(prev_head, B, H(M))`, where,  - `prev_head`: is the previous head hash or zero if none.,  - `B`: is the relay-chain block number in which a message was appended.,  - `H(M)`: is the hash of the message being appended.]}, {name: DeliveryFeeFactor, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 458}}, default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The factor to multiply the base delivery fee by.]}]}, calls: null, event: null, constants: [], error: null, index: 58, docs: []}, {name: Hrmp, storage: {prefix: Hrmp, entries: [{name: HrmpOpenChannelRequests, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 354, value: 819}}, default: [0], docs: [ The set of pending HRMP open channel requests., ,  The set is accompanied by a list for iteration., ,  Invariant:,  - There are no channels that exists in list but not in the set and vice versa.]}, {name: HrmpOpenChannelRequestsList, modifier: Default, ty: {Plain: 820}, default: [0], docs: []}, {name: HrmpOpenChannelRequestCount, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 4}}, default: [0, 0, 0, 0], docs: [ This mapping tracks how many open channel requests are initiated by a given sender para.,  Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has,  `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`.]}, {name: HrmpAcceptedChannelRequestCount, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 4}}, default: [0, 0, 0, 0], docs: [ This mapping tracks how many open channel requests were accepted by a given recipient para.,  Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with,  `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`.]}, {name: HrmpCloseChannelRequests, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 354, value: 113}}, default: [0], docs: [ A set of pending HRMP close channel requests that are going to be closed during the session,  change. Used for checking if a given channel is registered for closure., ,  The set is accompanied by a list for iteration., ,  Invariant:,  - There are no channels that exists in list but not in the set and vice versa.]}, {name: HrmpCloseChannelRequestsList, modifier: Default, ty: {Plain: 820}, default: [0], docs: []}, {name: HrmpWatermarks, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 4}}, default: [0], docs: [ The HRMP watermark associated with each para.,  Invariant:,  - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a,    session.]}, {name: HrmpChannels, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 354, value: 821}}, default: [0], docs: [ HRMP channel data associated with each para.,  Invariant:,  - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session.]}, {name: HrmpIngressChannelsIndex, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 804}}, default: [0], docs: [ Ingress/egress indexes allow to find all the senders and receivers given the opposite side.,  I.e., ,  (a) ingress index allows to find all the senders for a given recipient.,  (b) egress index allows to find all the recipients for a given sender., ,  Invariants:,  - for each ingress index entry for `P` each item `I` in the index should present in,    `HrmpChannels` as `(I, P)`.,  - for each egress index entry for `P` each item `E` in the index should present in,    `HrmpChannels` as `(P, E)`.,  - there should be no other dangling channels in `HrmpChannels`.,  - the vectors are sorted.]}, {name: HrmpEgressChannelsIndex, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 804}}, default: [0], docs: []}, {name: HrmpChannelContents, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 354, value: 822}}, default: [0], docs: [ Storage for the messages for each channel.,  Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`.]}, {name: HrmpChannelDigests, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 824}}, default: [0], docs: [ Maintains a mapping that can be used to answer the question: What paras sent a message at,  the given block number for a given receiver. Invariants:,  - The inner `Vec<ParaId>` is never empty.,  - The inner `Vec<ParaId>` cannot store two same `ParaId`.,  - The outer vector is sorted ascending by block number and cannot store two items with the,    same block number.]}]}, calls: {ty: 353}, event: {ty: 508}, constants: [], error: {ty: 826}, index: 60, docs: []}, {name: ParaSessionInfo, storage: {prefix: ParaSessionInfo, entries: [{name: AssignmentKeysUnsafe, modifier: Default, ty: {Plain: 827}, default: [0], docs: [ Assignment keys for the current session.,  Note that this API is private due to it being prone to 'off-by-one' at session boundaries.,  When in doubt, use `Sessions` API instead.]}, {name: EarliestStoredSession, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The earliest session for which previous session info is stored.]}, {name: Sessions, modifier: Optional, ty: {Map: {hashers: [Identity], key: 4, value: 828}}, default: [0], docs: [ Session information in a rolling window.,  Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.,  Does not have any entries before the session index in the first session change notification.]}, {name: AccountKeys, modifier: Optional, ty: {Map: {hashers: [Identity], key: 4, value: 116}}, default: [0], docs: [ The validator account keys of the validators actively participating in parachain consensus.]}, {name: SessionExecutorParams, modifier: Optional, ty: {Map: {hashers: [Identity], key: 4, value: 306}}, default: [0], docs: [ Executor parameter set for a given session index]}]}, calls: null, event: null, constants: [], error: null, index: 61, docs: []}, {name: ParasDisputes, storage: {prefix: ParasDisputes, entries: [{name: LastPrunedSession, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ The last pruned session, if any. All data stored by this module,  references sessions.]}, {name: Disputes, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 831, value: 832}}, default: [0], docs: [ All ongoing or concluded disputes for the last several sessions.]}, {name: BackersOnDisputes, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 831, value: 833}}, default: [0], docs: [ Backing votes stored for each dispute.,  This storage is used for slashing.]}, {name: Included, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 831, value: 4}}, default: [0], docs: [ All included blocks on the chain, as well as the block number in this chain that,  should be reverted back to if the candidate is disputed and determined to be invalid.]}, {name: Frozen, modifier: Default, ty: {Plain: 154}, default: [0], docs: [ Whether the chain is frozen. Starts as `None`. When this is `Some`,,  the chain will not accept any new parachain blocks for backing or inclusion,,  and its value indicates the last valid block number in the chain.,  It can only be set back to `None` by governance intervention.]}]}, calls: {ty: 355}, event: {ty: 509}, constants: [], error: {ty: 834}, index: 62, docs: []}, {name: ParasSlashing, storage: {prefix: ParasSlashing, entries: [{name: UnappliedSlashes, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 831, value: 835}}, default: [0], docs: [ Validators pending dispute slashes.]}, {name: ValidatorSetCounts, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 4}}, default: [0], docs: [ `ValidatorSetCount` per session.]}]}, calls: {ty: 356}, event: null, constants: [], error: {ty: 839}, index: 63, docs: []}, {name: OnDemandAssignmentProvider, storage: {prefix: OnDemandAssignmentProvider, entries: [{name: SpotTraffic, modifier: Default, ty: {Plain: 458}, default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Keeps track of the multiplier used to calculate the current spot price for the on demand,  assigner.]}, {name: OnDemandQueue, modifier: Default, ty: {Plain: 840}, default: [0], docs: [ The order storage entry. Uses a VecDeque to be able to push to the front of the,  queue from the scheduler on session boundaries.]}, {name: ParaIdAffinity, modifier: Optional, ty: {Map: {hashers: [Twox256], key: 165, value: 842}}, default: [0], docs: [ Maps a `ParaId` to `CoreIndex` and keeps track of how many assignments the scheduler has in,  it's lookahead. Keeping track of this affinity prevents parallel execution of the same,  `ParaId` on two or more `CoreIndex`es.]}]}, calls: {ty: 360}, event: {ty: 512}, constants: [{name: TrafficDefaultValue, ty: 458, value: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The default value for the spot traffic multiplier.]}], error: {ty: 843}, index: 64, docs: []}, {name: CoretimeAssignmentProvider, storage: {prefix: CoretimeAssignmentProvider, entries: [{name: CoreSchedules, modifier: Optional, ty: {Map: {hashers: [Twox256], key: 844, value: 845}}, default: [0], docs: [ Scheduled assignment sets., ,  Assignments as of the given block number. They will go into state once the block number is,  reached (and replace whatever was in there before).]}, {name: CoreDescriptors, modifier: Default, ty: {Map: {hashers: [Twox256], key: 505, value: 846}}, default: [0, 0], docs: [ Assignments which are currently active., ,  They will be picked from `PendingAssignments` once we reach the scheduled block number in,  `PendingAssignments`.]}]}, calls: null, event: null, constants: [], error: {ty: 854}, index: 65, docs: []}, {name: Registrar, storage: {prefix: Registrar, entries: [{name: PendingSwap, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 165}}, default: [0], docs: [ Pending swap operations.]}, {name: Paras, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 855}}, default: [0], docs: [ Amount held on deposit for each para and the original depositor., ,  The given account ID is responsible for registering the code and initial head data, but may,  only do so if it isn't yet registered. (After that, it's up to governance to do so.)]}, {name: NextFreeParaId, modifier: Default, ty: {Plain: 165}, default: [0, 0, 0, 0], docs: [ The next free `ParaId`.]}]}, calls: {ty: 361}, event: {ty: 513}, constants: [{name: ParaDeposit, ty: 6, value: [0, 128, 202, 57, 97, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The deposit to be paid to run a on-demand parachain.,  This should include the cost for storing the genesis head and validation code.]}, {name: DataDepositPerByte, ty: 6, value: [85, 67, 222, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The deposit to be paid per byte stored on chain.]}], error: {ty: 857}, index: 70, docs: []}, {name: Slots, storage: {prefix: Slots, entries: [{name: Leases, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 858}}, default: [0], docs: [ Amounts held on deposit for each (possibly future) leased parachain., ,  The actual amount locked on its behalf by any account at any time is the maximum of the,  second values of the items in this list whose first value is the account., ,  The first item in the list is the amount locked for the current Lease Period. Following,  items are for the subsequent lease periods., ,  The default value (an empty list) implies that the parachain no longer exists (or never,  existed) as far as this pallet is concerned., ,  If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it,  will be left-padded with one or more `None`s to denote the fact that nothing is held on,  deposit for the non-existent chain currently, but is held at some point in the future., ,  It is illegal for a `None` value to trail in the list.]}]}, calls: {ty: 362}, event: {ty: 514}, constants: [{name: LeasePeriod, ty: 4, value: [128, 58, 9, 0], docs: [ The number of blocks over which a single period lasts.]}, {name: LeaseOffset, ty: 4, value: [0, 0, 0, 0], docs: [ The number of blocks to offset each lease period by.]}], error: {ty: 859}, index: 71, docs: []}, {name: Auctions, storage: {prefix: Auctions, entries: [{name: AuctionCounter, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Number of auctions started so far.]}, {name: AuctionInfo, modifier: Optional, ty: {Plain: 189}, default: [0], docs: [ Information relating to the current auction, if there is one., ,  The first item in the tuple is the lease period index that the first of the four,  contiguous lease periods on auction is for. The second is the block number when the,  auction will "begin to end", i.e. the first block of the Ending Period of the auction.]}, {name: ReservedAmounts, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 860, value: 6}}, default: [0], docs: [ Amounts currently reserved in the accounts of the bidders currently winning,  (sub-)ranges.]}, {name: Winning, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 4, value: 861}}, default: [0], docs: [ The winning bids for each of the 10 ranges at each sample in the final Ending Period of,  the current auction. The map's key is the 0-based index into the Sample Size. The,  first sample of the ending period is 0; the last is `Sample Size - 1`.]}]}, calls: {ty: 363}, event: {ty: 515}, constants: [{name: EndingPeriod, ty: 4, value: [64, 25, 1, 0], docs: [ The number of blocks over which an auction may be retroactively ended.]}, {name: SampleLength, ty: 4, value: [20, 0, 0, 0], docs: [ The length of each sample to take during the ending period., ,  `EndingPeriod` / `SampleLength` = Total # of Samples]}, {name: SlotRangeCount, ty: 4, value: [36, 0, 0, 0], docs: []}, {name: LeasePeriodsPerSlot, ty: 4, value: [8, 0, 0, 0], docs: []}], error: {ty: 864}, index: 72, docs: []}, {name: Crowdloan, storage: {prefix: Crowdloan, entries: [{name: Funds, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 165, value: 865}}, default: [0], docs: [ Info on all of the funds.]}, {name: NewRaise, modifier: Default, ty: {Plain: 804}, default: [0], docs: [ The funds that have had additional contributions during the last block. This is used,  in order to determine which funds should submit new or updated bids.]}, {name: EndingsCount, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ The number of auctions that have entered into their ending period so far.]}, {name: NextFundIndex, modifier: Default, ty: {Plain: 4}, default: [0, 0, 0, 0], docs: [ Tracker for the next available fund index]}]}, calls: {ty: 365}, event: {ty: 516}, constants: [{name: PalletId, ty: 618, value: [112, 121, 47, 99, 102, 117, 110, 100], docs: [ `PalletId` for the crowdloan pallet. An appropriate value could be,  `PalletId(*b"py/cfund")`]}, {name: MinContribution, ty: 6, value: [24, 12, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The minimum amount that may be contributed into a crowdloan. Should almost certainly be,  at least `ExistentialDeposit`.]}, {name: RemoveKeysLimit, ty: 4, value: [232, 3, 0, 0], docs: [ Max number of storage keys to remove per extrinsic call.]}], error: {ty: 867}, index: 73, docs: []}, {name: Coretime, storage: null, calls: {ty: 371}, event: {ty: 517}, constants: [{name: BrokerId, ty: 4, value: [237, 3, 0, 0], docs: [ The ParaId of the broker system parachain.]}], error: {ty: 868}, index: 74, docs: []}, {name: XcmPallet, storage: {prefix: XcmPallet, entries: [{name: QueryCounter, modifier: Default, ty: {Plain: 11}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ The latest available query index.]}, {name: Queries, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 11, value: 869}}, default: [0], docs: [ The ongoing queries.]}, {name: AssetTraps, modifier: Default, ty: {Map: {hashers: [Identity], key: 12, value: 4}}, default: [0, 0, 0, 0], docs: [ The existing asset traps., ,  Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of,  times this pair has been trapped (usually just 1 if it exists at all).]}, {name: SafeXcmVersion, modifier: Optional, ty: {Plain: 4}, default: [0], docs: [ Default version to encode XCM when latest version of destination is unknown. If `None`,,  then the destinations whose XCM version is unknown are considered unreachable.]}, {name: SupportedVersion, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 874, value: 4}}, default: [0], docs: [ The Latest versions that we know various locations support.]}, {name: VersionNotifiers, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 874, value: 11}}, default: [0], docs: [ All locations that we have requested version notifications from.]}, {name: VersionNotifyTargets, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat], key: 874, value: 875}}, default: [0], docs: [ The target locations that are subscribed to our version changes, as well as the most recent,  of our versions we informed them of.]}, {name: VersionDiscoveryQueue, modifier: Default, ty: {Plain: 876}, default: [0], docs: [ Destinations whose latest XCM version we would like to know. Duplicates not allowed, and,  the `u32` counter is the number of times that a send to the destination has been attempted,,  which is used as a prioritization.]}, {name: CurrentMigration, modifier: Optional, ty: {Plain: 879}, default: [0], docs: [ The current migration's stage, if any.]}, {name: RemoteLockedFungibles, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Blake2_128Concat, Blake2_128Concat], key: 881, value: 882}}, default: [0], docs: [ Fungible assets which we know are locked on a remote chain.]}, {name: LockedFungibles, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 0, value: 886}}, default: [0], docs: [ Fungible assets which we know are locked on this chain.]}, {name: XcmExecutionSuspended, modifier: Default, ty: {Plain: 30}, default: [0], docs: [ Global suspension state of the XCM executor.]}]}, calls: {ty: 376}, event: {ty: 518}, constants: [], error: {ty: 889}, index: 99, docs: []}, {name: MessageQueue, storage: {prefix: MessageQueue, entries: [{name: BookStateFor, modifier: Default, ty: {Map: {hashers: [Twox64Concat], key: 455, value: 890}}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ The index of the first and last (non-empty) pages.]}, {name: ServiceHead, modifier: Optional, ty: {Plain: 455}, default: [0], docs: [ The origin at which we should begin servicing.]}, {name: Pages, modifier: Optional, ty: {Map: {hashers: [Twox64Concat, Twox64Concat], key: 893, value: 894}}, default: [0], docs: [ The map of page indices to pages.]}]}, calls: {ty: 454}, event: {ty: 520}, constants: [{name: HeapSize, ty: 4, value: [0, 0, 1, 0], docs: [ The size of the page; this implies the maximum message size which can be sent., ,  A good value depends on the expected message sizes, their weights, the weight that is,  available for processing them and the maximal needed message size. The maximal message,  size is slightly lower than this as defined by [`MaxMessageLenOf`].]}, {name: MaxStale, ty: 4, value: [16, 0, 0, 0], docs: [ The maximum number of stale pages (i.e. of overweight messages) allowed before culling,  can happen. Once there are more stale pages than this, then historical pages may be,  dropped, even if they contain unprocessed overweight messages.]}, {name: ServiceWeight, ty: 478, value: [1, 7, 0, 160, 219, 33, 93, 19, 51, 51, 51, 51, 51, 51, 51, 51], docs: [ The amount of weight (if any) which should be provided to the message queue for,  servicing enqueued items., ,  This may be legitimately `None` in the case that you will call,  `ServiceQueues::service_queues` manually.]}], error: {ty: 896}, index: 100, docs: []}, {name: AssetRate, storage: {prefix: AssetRate, entries: [{name: ConversionRateToNative, modifier: Optional, ty: {Map: {hashers: [Blake2_128Concat], key: 59, value: 458}}, default: [0], docs: [ Maps an asset to its fixed point representation in the native balance., ,  E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_kind)`]}]}, calls: {ty: 457}, event: {ty: 522}, constants: [], error: {ty: 897}, index: 101, docs: []}, {name: Beefy, storage: {prefix: Beefy, entries: [{name: Authorities, modifier: Default, ty: {Plain: 898}, default: [0], docs: [ The current authorities set]}, {name: ValidatorSetId, modifier: Default, ty: {Plain: 11}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ The current validator set id]}, {name: NextAuthorities, modifier: Default, ty: {Plain: 898}, default: [0], docs: [ Authorities set scheduled to be used with the next session]}, {name: SetIdSession, modifier: Optional, ty: {Map: {hashers: [Twox64Concat], key: 11, value: 4}}, default: [0], docs: [ A mapping from BEEFY set ID to the index of the *most recent* session for which its,  members were responsible., ,  This is only used for validating equivocation proofs. An equivocation proof must,  contains a key-ownership proof for a given session, therefore we need a way to tie,  together sessions and BEEFY set ids, i.e. we need to validate that a validator,  was the owner of a given key on a given session, and what the active set ID was,  during that session., ,  TWOX-NOTE: `ValidatorSetId` is not under user control.]}, {name: GenesisBlock, modifier: Default, ty: {Plain: 154}, default: [0], docs: [ Block number where BEEFY consensus is enabled/started.,  By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively,  restarted from the newly set block number.]}]}, calls: {ty: 459}, event: null, constants: [{name: MaxAuthorities, ty: 4, value: [160, 134, 1, 0], docs: [ The maximum number of authorities that can be added.]}, {name: MaxNominators, ty: 4, value: [0, 2, 0, 0], docs: [ The maximum number of nominators for each validator.]}, {name: MaxSetIdSessionEntries, ty: 11, value: [168, 0, 0, 0, 0, 0, 0, 0], docs: [ The maximum number of entries to keep in the set id to session index mapping., ,  Since the `SetIdSession` map is only used for validating equivocations this,  value should relate to the bonding duration of whatever staking system is,  being used (if any). If equivocation handling is not enabled then this value,  can be zero.]}], error: {ty: 900}, index: 200, docs: []}, {name: Mmr, storage: {prefix: Mmr, entries: [{name: RootHash, modifier: Default, ty: {Plain: 12}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Latest MMR Root hash.]}, {name: NumberOfLeaves, modifier: Default, ty: {Plain: 11}, default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [ Current size of the MMR (number of leaves).]}, {name: Nodes, modifier: Optional, ty: {Map: {hashers: [Identity], key: 11, value: 12}}, default: [0], docs: [ Hashes of the nodes in the MMR., ,  Note this collection only contains MMR peaks, the inner nodes (and leaves),  are pruned and only stored in the Offchain DB.]}]}, calls: null, event: null, constants: [], error: null, index: 201, docs: []}, {name: BeefyMmrLeaf, storage: {prefix: BeefyMmrLeaf, entries: [{name: BeefyAuthorities, modifier: Default, ty: {Plain: 901}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Details of current BEEFY authority set.]}, {name: BeefyNextAuthorities, modifier: Default, ty: {Plain: 901}, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [ Details of next BEEFY authority set., ,  This storage entry is used as cache for calls to `update_beefy_next_authority_set`.]}]}, calls: null, event: null, constants: [], error: null, index: 202, docs: []}], extrinsic: {version: 4, address_type: 112, call_type: 96, signature_type: 369, extra_type: 902, signed_extensions: [{identifier: CheckNonZeroSender, ty: 903, additional_signed: 113}, {identifier: CheckSpecVersion, ty: 904, additional_signed: 4}, {identifier: CheckTxVersion, ty: 905, additional_signed: 4}, {identifier: CheckGenesis, ty: 906, additional_signed: 12}, {identifier: CheckMortality, ty: 907, additional_signed: 12}, {identifier: CheckNonce, ty: 909, additional_signed: 113}, {identifier: CheckWeight, ty: 910, additional_signed: 113}, {identifier: ChargeTransactionPayment, ty: 911, additional_signed: 113}, {identifier: CheckMetadataHash, ty: 912, additional_signed: 488}]}, ty: 914, apis: [Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata', Instance of 'ApiMetadata'], outerEnums: Instance of 'OuterEnumMetadata', custom: Instance of 'CustomMetadata'}}}